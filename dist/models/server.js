const express=require("express"),tf=require("@tensorflow/tfjs-node"),fs=require("fs"),path=require("path"),cors=require("cors"),{registerCustomClasses}=require("./model_utils");registerCustomClasses();const app=express(),PORT=process.env.PORT||8e3;let tokenizer,model;async function loadTokenizer(){try{let e="model";fs.existsSync(path.join(__dirname,e,"word_index.json"))||(e="tfjs_clickbait_model");const n=path.join(__dirname,e,"word_index.json");if(!fs.existsSync(n))throw new Error(`word_index.json not found at: ${n}`);const t=path.join(__dirname,e,"tokenizer_config.json");if(!fs.existsSync(t))throw new Error(`tokenizer_config.json not found at: ${t}`);console.log(`Loading tokenizer from ${e} directory`);const o=JSON.parse(fs.readFileSync(n,"utf8")),i=JSON.parse(fs.readFileSync(t,"utf8"));tokenizer={word_index:o,oov_token:i.oov_token||"<UNK>",max_len:i.max_len||30,vocab_size:i.vocab_size||1e4};const r=Object.keys(tokenizer.word_index).length;console.log(`‚úÖ Loaded word_index with ${r} entries`),console.log(`‚úÖ Max sequence length: ${tokenizer.max_len}`);const s=tokenizer.word_index[tokenizer.oov_token];s?console.log(`‚úÖ OOV token '${tokenizer.oov_token}' has index ${s}`):console.warn(`‚ö†Ô∏è OOV token '${tokenizer.oov_token}' not found in word_index`);const l=["the","a","and","is","of"];return console.log("Testing common words:"),l.forEach((e=>{const n=tokenizer.word_index[e]||s;console.log(`  "${e}" ‚Üí ${n}${n===s?" (OOV)":""}`)})),!0}catch(e){throw console.error("‚ùå Error loading tokenizer:",e),e}}async function loadModel(){try{const e=path.join(__dirname,"tfjs_clickbait_model","model.json");if(!fs.existsSync(e))throw new Error(`Model file not found at: ${e}`);return console.log(`Loading model from: ${e}`),model=await tf.loadLayersModel("file://./tfjs_clickbait_model/model.json",{strict:!1}),console.log("‚úÖ Model loaded successfully"),console.log("Model input shape:",model.inputs[0].shape),console.log("Model output shape:",model.outputs[0].shape),!0}catch(e){throw console.error("‚ùå Error loading model:",e),e}}function cleanText(e){return e.toLowerCase().replace(/<[^>]+>/g,"").replace(/[^\w\s]/g," ").replace(/\s+/g," ").trim()}function textToSequence(e,n){const t=cleanText(e),o=t.split(" "),i=tokenizer.word_index[tokenizer.oov_token]||1,r=o.map((e=>tokenizer.word_index[e]||i));return console.log(`Tokenizing: "${e}"`),console.log(`Cleaned: "${t}"`),console.log(`First few tokens: [${r.slice(0,5).join(", ")}${r.length>5?"...":""}]`),r.length>n?r.slice(0,n):[...r,...Array(n-r.length).fill(0)]}async function startServer(){try{const e=path.join(__dirname,"public");fs.existsSync(e)||(fs.mkdirSync(e),console.log("Created public directory")),await loadTokenizer(),await loadModel(),app.listen(PORT,(()=>{console.log(`‚úÖ Server running at http://localhost:${PORT}`),console.log(`üí¨ Test server status: curl http://localhost:${PORT}/api/status`),console.log(`üí¨ Test tokenization: curl -X POST http://localhost:${PORT}/api/tokenize -H "Content-Type: application/json" -d '{"text":"This is a test"}'`),console.log(`üí¨ Test prediction: curl -X POST http://localhost:${PORT}/api/predict -H "Content-Type: application/json" -d '{"headline":"You won't believe what happened next!"}'`)}))}catch(e){console.error("‚ùå Failed to start server:",e)}}app.use(cors()),app.use(express.json()),app.use(express.static("public")),app.use("/tfjs_clickbait_model",express.static("tfjs_clickbait_model")),app.post("/api/predict",(async(e,n)=>{try{const{headline:t}=e.body;if(!t)return n.status(400).json({error:"Missing headline in request"});const o=textToSequence(t,tokenizer.max_len),i=tf.tensor2d([o],[1,tokenizer.max_len]),r=model.predict(i),s=await r.data();n.json({headline:t,probability:s[0],isClickbait:s[0]>.5})}catch(e){console.error("Error making prediction:",e),n.status(500).json({error:"Error processing request: "+e.message})}})),app.post("/api/tokenize",((e,n)=>{try{const{text:t}=e.body;if(!t)return n.status(400).json({error:"Missing text in request"});const o=textToSequence(t,tokenizer.max_len);n.json({original:t,cleaned:cleanText(t),sequence:o,length:o.length})}catch(e){console.error("Error tokenizing text:",e),n.status(500).json({error:"Error tokenizing: "+e.message})}})),app.get("/api/status",((e,n)=>{const t=!!tokenizer,o=!!model;n.json({status:"Server is running",tokenizer_loaded:t,model_loaded:o,max_sequence_length:tokenizer?.max_len||"unknown"})}));const htmlContent="\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Clickbait Detector</title>\n    <style>\n        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }\n        h1 { color: #333; }\n        textarea { width: 100%; height: 80px; padding: 10px; margin: 10px 0; }\n        button { padding: 10px 20px; background: #4CAF50; color: white; border: none; cursor: pointer; }\n        .result { margin-top: 20px; padding: 15px; border-radius: 4px; display: none; }\n        .clickbait { background-color: #ffcccc; }\n        .not-clickbait { background-color: #ccffcc; }\n    </style>\n</head>\n<body>\n    <h1>Clickbait Headline Detector</h1>\n    <p>Type or paste a headline below to check if it's clickbait.</p>\n    \n    <div>\n        <textarea id=\"headline-input\" placeholder=\"Enter a headline to analyze...\"></textarea>\n        <button onclick=\"analyzeHeadline()\">Analyze</button>\n    </div>\n    \n    <div id=\"result\" class=\"result\"></div>\n    \n    <div style=\"margin-top: 30px;\">\n        <h3>Examples to try:</h3>\n        <ul>\n            <li onclick=\"useExample(this)\" style=\"cursor:pointer\">Scientists discover new planet in Alpha Centauri system</li>\n            <li onclick=\"useExample(this)\" style=\"cursor:pointer\">You won't believe what this celebrity did next!</li>\n            <li onclick=\"useExample(this)\" style=\"cursor:pointer\">Study shows link between exercise and longevity</li>\n            <li onclick=\"useExample(this)\" style=\"cursor:pointer\">This one weird trick will save you thousands on car insurance</li>\n        </ul>\n    </div>\n    \n    <script>\n        function useExample(element) {\n            document.getElementById('headline-input').value = element.textContent;\n            analyzeHeadline();\n        }\n        \n        async function analyzeHeadline() {\n            const headline = document.getElementById('headline-input').value.trim();\n            if (!headline) {\n                alert('Please enter a headline to analyze.');\n                return;\n            }\n            \n            // Show loading \n            const resultDiv = document.getElementById('result');\n            resultDiv.style.display = 'block';\n            resultDiv.className = 'result';\n            resultDiv.innerHTML = 'Analyzing...';\n            \n            try {\n                const response = await fetch('/api/predict', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ headline })\n                });\n                \n                if (!response.ok) {\n                    throw new Error('Server error');\n                }\n                \n                const result = await response.json();\n                const probabilityPercent = (result.probability * 100).toFixed(2);\n                \n                resultDiv.className = result.isClickbait ? 'result clickbait' : 'result not-clickbait';\n                resultDiv.innerHTML = `\n                    <h3>Analysis Result</h3>\n                    <p><strong>Headline:</strong> ${headline}</p>\n                    <p><strong>Clickbait Probability:</strong> ${probabilityPercent}%</p>\n                    <p><strong>Classification:</strong> ${result.isClickbait ? 'CLICKBAIT' : 'NOT CLICKBAIT'}</p>\n                `;\n            } catch (error) {\n                resultDiv.className = 'result';\n                resultDiv.innerHTML = `<p>Error: ${error.message || 'Failed to analyze headline'}</p>`;\n            }\n        }\n    <\/script>\n</body>\n</html>\n";fs.writeFile(path.join(__dirname,"public","index.html"),htmlContent,(e=>{e?console.error("Error creating index.html:",e):console.log("Created test page at public/index.html")})),app.use(express.static(path.join(__dirname))),app.get("*",((e,n)=>{n.sendFile(path.join(__dirname,"index.html"))})),startServer();