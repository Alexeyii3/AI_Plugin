/*! For license information please see tfCustomBundle.js.LICENSE.txt */
(()=>{var e={417:(e,t,n)=>{var a,r=(a=(a="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(e){function t(){return A.buffer!=O&&G(A.buffer),M}function r(){return A.buffer!=O&&G(A.buffer),L}function s(){return A.buffer!=O&&G(A.buffer),z}function i(){return A.buffer!=O&&G(A.buffer),P}function o(){return A.buffer!=O&&G(A.buffer),B}var u,l,c,h=void 0!==(e=e||{})?e:{};h.ready=new Promise((function(e,t){u=e,l=t})),"undefined"!=typeof process&&process.listeners&&(c={uncaughtException:process.listeners("uncaughtException"),unhandledRejection:process.listeners("unhandledRejection")});var p,d,f,m=Object.assign({},h),g=[],y=(e,t)=>{throw t},b="object"==typeof window,x="function"==typeof importScripts,w="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,k=h.ENVIRONMENT_IS_PTHREAD||!1,v="";function I(e){return h.locateFile?h.locateFile(e,v):v+e}if(w){var N,S;let e;v=x?n(281).dirname(v)+"/":"//",N=n(893),S=n(281),p=(e,t)=>(e=S.normalize(e),N.readFileSync(e,t?void 0:"utf8")),f=e=>{var t=p(e,!0);return t.buffer||(t=new Uint8Array(t)),t},d=(e,t,n)=>{e=S.normalize(e),N.readFile(e,(function(e,a){e?n(e):t(a.buffer)}))},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),g=process.argv.slice(2),process.on("uncaughtException",(function(e){if(!(e instanceof oe))throw e})),process.on("unhandledRejection",(function(e){throw e})),y=(e,t)=>{if(Y())throw process.exitCode=e,t;var n;(n=t)instanceof oe||_("exiting due to exception: "+n),process.exit(e)},h.inspect=function(){return"[Emscripten Module object]"};try{e=n(556)}catch(e){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=e.Worker}else(b||x)&&(x?v=self.location.href:"undefined"!=typeof document&&document.currentScript&&(v=document.currentScript.src),void 0!==a&&a&&(v=a),v=0!==v.indexOf("blob:")?v.substr(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1):"",w||(p=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},x&&(f=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),d=(e,t,n)=>{var a=new XMLHttpRequest;a.open("GET",e,!0),a.responseType="arraybuffer",a.onload=()=>{200==a.status||0==a.status&&a.response?t(a.response):n()},a.onerror=n,a.send(null)}));w&&"undefined"==typeof performance&&(n.g.performance=n(244).performance);var T=console.log.bind(console),C=console.warn.bind(console);w&&(T=e=>N.writeSync(1,e+"\n"),C=e=>N.writeSync(2,e+"\n"));var $,E=h.print||T,_=h.printErr||C;Object.assign(h,m),m=null,h.arguments&&(g=h.arguments),h.thisProgram&&h.thisProgram,h.quit&&(y=h.quit),Atomics.load,Atomics.store,Atomics.compareExchange,h.wasmBinary&&($=h.wasmBinary);var A,R,F=h.noExitRuntime||!0;"object"!=typeof WebAssembly&&ne("no native wasm support detected");var D,O,M,L,z,P,B,W=!1,V="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function U(e,t,n){for(var a=t+n,r=t;e[r]&&!(r>=a);)++r;if(r-t>16&&e.buffer&&V)return V.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(var s="";t<r;){var i=e[t++];if(128&i){var o=63&e[t++];if(192!=(224&i)){var u=63&e[t++];if((i=224==(240&i)?(15&i)<<12|o<<6|u:(7&i)<<18|o<<12|u<<6|63&e[t++])<65536)s+=String.fromCharCode(i);else{var l=i-65536;s+=String.fromCharCode(55296|l>>10,56320|1023&l)}}else s+=String.fromCharCode((31&i)<<6|o)}else s+=String.fromCharCode(i)}return s}function G(e){O=e,h.HEAP8=M=new Int8Array(e),h.HEAP16=new Int16Array(e),h.HEAP32=z=new Int32Array(e),h.HEAPU8=L=new Uint8Array(e),h.HEAPU16=new Uint16Array(e),h.HEAPU32=P=new Uint32Array(e),h.HEAPF32=new Float32Array(e),h.HEAPF64=B=new Float64Array(e)}k&&(O=h.buffer);var H,j=h.INITIAL_MEMORY||16777216;if(k)A=h.wasmMemory,O=h.buffer;else if(h.wasmMemory)A=h.wasmMemory;else if(!((A=new WebAssembly.Memory({initial:j/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw _("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),w&&console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"),Error("bad memory");A&&(O=A.buffer),j=O.byteLength,G(O);var q=[],K=[],X=[];function Y(){return F}function Z(){k||de(K)}var J,Q=0,ee=null,te=null;function ne(e){k?postMessage({cmd:"onAbort",arg:e}):h.onAbort&&h.onAbort(e),_(e="Aborted("+e+")"),W=!0,D=1,e+=". Build with -sASSERTIONS for more info.";var t=new WebAssembly.RuntimeError(e);throw l(t),t}function ae(e){return e.startsWith("data:application/octet-stream;base64,")}function re(e){return e.startsWith("file://")}function se(e){try{if(e==J&&$)return new Uint8Array($);if(f)return f(e);throw"both async and sync fetching of the wasm failed"}catch(e){ne(e)}}ae(J="tfjs-backend-wasm-threaded-simd.wasm")||(J=I(J));var ie={};function oe(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function ue(e){var t=pe.pthreads[e];t||ne(undefined),pe.returnWorkerToPool(t)}function le(e){var t=pe.getNewWorker();if(!t)return 6;pe.runningWorkers.push(t),pe.pthreads[e.pthread_ptr]=t,t.pthread_ptr=e.pthread_ptr;var n={cmd:"run",start_routine:e.startRoutine,arg:e.arg,pthread_ptr:e.pthread_ptr};return t.runPthread=()=>{n.time=performance.now(),t.postMessage(n,e.transferList)},t.loaded&&(t.runPthread(),delete t.runPthread),0}function ce(e){if(k)return ke(1,1,e);D=e,Y()||(pe.terminateAllThreads(),h.onExit&&h.onExit(e),W=!0),y(e,new oe(e))}var he=function(e,t){if(D=e,!t&&k)throw fe(e),"unwind";ce(e)},pe={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},init:function(){k?pe.initWorker():pe.initMainThread()},initMainThread:function(){for(var e=8;e--;)pe.allocateUnusedWorker()},initWorker:function(){F=!1},setExitStatus:function(e){D=e},terminateAllThreads:function(){for(var e of Object.values(pe.pthreads))pe.returnWorkerToPool(e);for(var e of pe.unusedWorkers)e.terminate();pe.unusedWorkers=[]},returnWorkerToPool:function(e){var t=e.pthread_ptr;delete pe.pthreads[t],pe.unusedWorkers.push(e),pe.runningWorkers.splice(pe.runningWorkers.indexOf(e),1),e.pthread_ptr=0,Be(t)},receiveObjectTransfer:function(e){},threadInitTLS:function(){pe.tlsInitFunctions.forEach((e=>e()))},loadWasmModuleToWorker:function(e,t){e.onmessage=n=>{var a,r=n.data,s=r.cmd;if(e.pthread_ptr&&(pe.currentProxiedOperationCallerThread=e.pthread_ptr),r.targetThread&&r.targetThread!=Me()){var i=pe.pthreads[r.targetThread];return i?i.postMessage(r,r.transferList):_('Internal error! Worker sent a message "'+s+'" to target pthread '+r.targetThread+", but that thread no longer exists!"),void(pe.currentProxiedOperationCallerThread=void 0)}"processProxyingQueue"===s?xe(r.queue):"spawnThread"===s?le(r):"cleanupThread"===s?ue(r.thread):"killThread"===s?function(e){var t=pe.pthreads[e];delete pe.pthreads[e],t.terminate(),Be(e),pe.runningWorkers.splice(pe.runningWorkers.indexOf(t),1),t.pthread_ptr=0}(r.thread):"cancelThread"===s?(a=r.thread,pe.pthreads[a].postMessage({cmd:"cancel"})):"loaded"===s?(e.loaded=!0,t&&t(e),e.runPthread&&(e.runPthread(),delete e.runPthread)):"print"===s?E("Thread "+r.threadId+": "+r.text):"printErr"===s?_("Thread "+r.threadId+": "+r.text):"alert"===s?alert("Thread "+r.threadId+": "+r.text):"setimmediate"===r.target?e.postMessage(r):"onAbort"===s?h.onAbort&&h.onAbort(r.arg):s&&_("worker sent an unknown command "+s),pe.currentProxiedOperationCallerThread=void 0},e.onerror=e=>{throw _("worker sent an error! "+e.filename+":"+e.lineno+": "+e.message),e},w&&(e.on("message",(function(t){e.onmessage({data:t})})),e.on("error",(function(t){e.onerror(t)})),e.on("detachedExit",(function(){}))),e.postMessage({cmd:"load",urlOrBlob:h.mainScriptUrlOrBlob||a,wasmMemory:A,wasmModule:R})},allocateUnusedWorker:function(){var e=I("tfjs-backend-wasm-threaded-simd.worker.js");pe.unusedWorkers.push(new Worker(e))},getNewWorker:function(){return 0==pe.unusedWorkers.length&&(pe.allocateUnusedWorker(),pe.loadWasmModuleToWorker(pe.unusedWorkers[0])),pe.unusedWorkers.pop()}};function de(e){for(;e.length>0;)e.shift()(h)}function fe(e){if(k)return ke(2,0,e);try{he(e)}catch(e){!function(e){if(e instanceof oe||"unwind"==e)return D;y(1,e)}(e)}}h.PThread=pe,h.establishStackSpace=function(){var e=Me(),t=s()[e+44>>2],n=s()[e+48>>2];Ve(t,t-n),Ge(t)};var me,ge=[];function ye(e,t,n,a){return k?ke(3,1,e,t,n,a):be(e,t,n,a)}function be(e,t,n,a){if("undefined"==typeof SharedArrayBuffer)return _("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var r=[];if(k&&0===r.length)return ye(e,t,n,a);var s={startRoutine:n,pthread_ptr:e,arg:a,transferList:r};return k?(s.cmd="spawnThread",postMessage(s,r),0):le(s)}function xe(e){Atomics.store(s(),e>>2,1),Me()&&Pe(e),Atomics.compareExchange(s(),e>>2,1,0)}function we(e){we.shown||(we.shown={}),we.shown[e]||(we.shown[e]=1,w&&(e="warning: "+e),_(e))}function ke(e,t){var n,a,r,s=arguments.length-2,i=arguments;return n=()=>{for(var n=s,a=He(8*n),r=a>>3,u=0;u<s;u++){var l=i[2+u];o()[r+u]=l}return ze(e,n,a,t)},a=Ue(),r=n(),Ge(a),r}h.invokeEntryPoint=function(e,t){var n,a,r=((a=ge[n=e])||(n>=ge.length&&(ge.length=n+1),ge[n]=a=H.get(n)),a)(t);Y()?pe.setExitStatus(r):We(r)},h.executeNotifiedProxyingQueue=xe,me=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:k?()=>performance.now()-h.__performance_now_clock_drift:()=>performance.now();var ve=[];function Ie(e){try{return A.grow(e-O.byteLength+65535>>>16),G(A.buffer),1}catch(e){}}function Ne(e){return k?ke(4,1,e):52}function Se(e,t,n,a,r){return k?ke(5,1,e,t,n,a,r):70}var Te=[null,[],[]];function Ce(e,t){var n=Te[e];0===t||10===t?((1===e?E:_)(U(n,0)),n.length=0):n.push(t)}function $e(e,t,n,a){if(k)return ke(6,1,e,t,n,a);for(var s=0,o=0;o<n;o++){var u=i()[t>>2],l=i()[t+4>>2];t+=8;for(var c=0;c<l;c++)Ce(e,r()[u+c]);s+=l}return i()[a>>2]=s,0}function Ee(e){return h["_"+e]}function _e(e,n,a,s,i){var o={string:e=>{var t=0;if(null!=e&&0!==e){var n=1+(e.length<<2);!function(e,t,n){!function(e,t,n,a){if(!(a>0))return 0;for(var r=n+a-1,s=0;s<e.length;++s){var i=e.charCodeAt(s);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++s)),i<=127){if(n>=r)break;t[n++]=i}else if(i<=2047){if(n+1>=r)break;t[n++]=192|i>>6,t[n++]=128|63&i}else if(i<=65535){if(n+2>=r)break;t[n++]=224|i>>12,t[n++]=128|i>>6&63,t[n++]=128|63&i}else{if(n+3>=r)break;t[n++]=240|i>>18,t[n++]=128|i>>12&63,t[n++]=128|i>>6&63,t[n++]=128|63&i}}t[n]=0}(e,r(),t,n)}(e,t=He(n),n)}return t},array:e=>{var n=He(e.length);return function(e,n){t().set(e,n)}(e,n),n}},u=Ee(e),l=[],c=0;if(s)for(var h=0;h<s.length;h++){var p=o[a[h]];p?(0===c&&(c=Ue()),l[h]=p(s[h])):l[h]=s[h]}var d=u.apply(null,l);return function(e){return 0!==c&&Ge(c),function(e){return"string"===n?(t=e)?U(r(),t,a):"":"boolean"===n?Boolean(e):e;var t,a}(e)}(d)}pe.init();var Ae,Re,Fe,De=[null,ce,fe,ye,Ne,Se,$e],Oe={__emscripten_init_main_thread_js:function(e){Le(e,!x,1,!b),pe.threadInitTLS()},__emscripten_thread_cleanup:function(e){k?postMessage({cmd:"cleanupThread",thread:e}):ue(e)},__pthread_create_js:be,_emscripten_default_pthread_stack_size:function(){return 2097152},_emscripten_get_now_is_monotonic:function(){return!0},_emscripten_notify_task_queue:function(e,t,n,a){if(e==t)setTimeout((()=>xe(a)));else if(k)postMessage({targetThread:e,cmd:"processProxyingQueue",queue:a});else{var r=pe.pthreads[e];if(!r)return;r.postMessage({cmd:"processProxyingQueue",queue:a})}return 1},_emscripten_set_offscreencanvas_size:function(e,t,n){return-1},abort:function(){ne("")},emscripten_check_blocking_allowed:function(){w||x||we("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread")},emscripten_date_now:function(){return Date.now()},emscripten_get_heap_max:function(){return 2147483648},emscripten_get_now:me,emscripten_memcpy_big:function(e,t,n){r().copyWithin(e,t,t+n)},emscripten_num_logical_cores:function(){return w?n(74).cpus().length:navigator.hardwareConcurrency},emscripten_receive_on_main_thread_js:function(e,t,n){ve.length=t;for(var a=n>>3,r=0;r<t;r++)ve[r]=o()[a+r];return(e<0?ie[-e-1]:De[e]).apply(null,ve)},emscripten_resize_heap:function(e){var t=r().length;if((e>>>=0)<=t)return!1;var n,a=2147483648;if(e>a)return!1;for(var s=1;s<=4;s*=2){var i=t*(1+.2/s);if(i=Math.min(i,e+100663296),Ie(Math.min(a,(n=Math.max(e,i))+(65536-n%65536)%65536)))return!0}return!1},emscripten_unwind_to_js_event_loop:function(){throw"unwind"},exit:he,fd_close:Ne,fd_seek:Se,fd_write:$e,memory:A||h.wasmMemory},Me=(function(){var e={env:Oe,wasi_snapshot_preview1:Oe};function t(e,t){var n,a,r=e.exports;if(h.asm=r,n=h.asm._emscripten_tls_init,pe.tlsInitFunctions.push(n),H=h.asm.__indirect_function_table,a=h.asm.__wasm_call_ctors,K.unshift(a),R=t,!k){var s=pe.unusedWorkers.length;pe.unusedWorkers.forEach((function(e){pe.loadWasmModuleToWorker(e,(function(){--s||function(){if(Q--,h.monitorRunDependencies&&h.monitorRunDependencies(Q),0==Q&&(null!==ee&&(clearInterval(ee),ee=null),te)){var e=te;te=null,e()}}()}))}))}}function n(e){t(e.instance,e.module)}function a(t){return function(){if(!$&&(b||x)){if("function"==typeof fetch&&!re(J))return fetch(J,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+J+"'";return e.arrayBuffer()})).catch((function(){return se(J)}));if(d)return new Promise((function(e,t){d(J,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return se(J)}))}().then((function(t){return WebAssembly.instantiate(t,e)})).then((function(e){return e})).then(t,(function(e){_("failed to asynchronously prepare wasm: "+e),ne(e)}))}if(k||(Q++,h.monitorRunDependencies&&h.monitorRunDependencies(Q)),h.instantiateWasm)try{return h.instantiateWasm(e,t)}catch(e){_("Module.instantiateWasm callback failed with error: "+e),l(e)}($||"function"!=typeof WebAssembly.instantiateStreaming||ae(J)||re(J)||w||"function"!=typeof fetch?a(n):fetch(J,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(n,(function(e){return _("wasm streaming compile failed: "+e),_("falling back to ArrayBuffer instantiation"),a(n)}))}))).catch(l)}(),h.___wasm_call_ctors=function(){return(h.___wasm_call_ctors=h.asm.__wasm_call_ctors).apply(null,arguments)},h._init=function(){return(h._init=h.asm.init).apply(null,arguments)},h._init_with_threads_count=function(){return(h._init_with_threads_count=h.asm.init_with_threads_count).apply(null,arguments)},h._get_threads_count=function(){return(h._get_threads_count=h.asm.get_threads_count).apply(null,arguments)},h._register_tensor=function(){return(h._register_tensor=h.asm.register_tensor).apply(null,arguments)},h._dispose_data=function(){return(h._dispose_data=h.asm.dispose_data).apply(null,arguments)},h._dispose=function(){return(h._dispose=h.asm.dispose).apply(null,arguments)},h._Abs=function(){return(h._Abs=h.asm.Abs).apply(null,arguments)},h._Add=function(){return(h._Add=h.asm.Add).apply(null,arguments)},h._AddN=function(){return(h._AddN=h.asm.AddN).apply(null,arguments)},h._All=function(){return(h._All=h.asm.All).apply(null,arguments)},h._Any=function(){return(h._Any=h.asm.Any).apply(null,arguments)},h._ArgMax=function(){return(h._ArgMax=h.asm.ArgMax).apply(null,arguments)},h._AvgPool=function(){return(h._AvgPool=h.asm.AvgPool).apply(null,arguments)},h._BatchMatMul=function(){return(h._BatchMatMul=h.asm.BatchMatMul).apply(null,arguments)},h._Ceil=function(){return(h._Ceil=h.asm.Ceil).apply(null,arguments)},h._ClipByValue=function(){return(h._ClipByValue=h.asm.ClipByValue).apply(null,arguments)},h._Conv2D=function(){return(h._Conv2D=h.asm.Conv2D).apply(null,arguments)},h._Conv2DBackpropInput=function(){return(h._Conv2DBackpropInput=h.asm.Conv2DBackpropInput).apply(null,arguments)},h._Cos=function(){return(h._Cos=h.asm.Cos).apply(null,arguments)},h._Cosh=function(){return(h._Cosh=h.asm.Cosh).apply(null,arguments)},h._CropAndResize=function(){return(h._CropAndResize=h.asm.CropAndResize).apply(null,arguments)},h._Cumprod=function(){return(h._Cumprod=h.asm.Cumprod).apply(null,arguments)},h._Cumsum=function(){return(h._Cumsum=h.asm.Cumsum).apply(null,arguments)},h._DepthToSpace=function(){return(h._DepthToSpace=h.asm.DepthToSpace).apply(null,arguments)},h._DepthwiseConv2dNative=function(){return(h._DepthwiseConv2dNative=h.asm.DepthwiseConv2dNative).apply(null,arguments)},h._Elu=function(){return(h._Elu=h.asm.Elu).apply(null,arguments)},h._Equal=function(){return(h._Equal=h.asm.Equal).apply(null,arguments)},h._Exp=function(){return(h._Exp=h.asm.Exp).apply(null,arguments)},h._FlipLeftRight=function(){return(h._FlipLeftRight=h.asm.FlipLeftRight).apply(null,arguments)},h._Floor=function(){return(h._Floor=h.asm.Floor).apply(null,arguments)},h._FloorDiv=function(){return(h._FloorDiv=h.asm.FloorDiv).apply(null,arguments)},h._FusedBatchNorm=function(){return(h._FusedBatchNorm=h.asm.FusedBatchNorm).apply(null,arguments)},h._FusedConv2D=function(){return(h._FusedConv2D=h.asm.FusedConv2D).apply(null,arguments)},h._FusedDepthwiseConv2D=function(){return(h._FusedDepthwiseConv2D=h.asm.FusedDepthwiseConv2D).apply(null,arguments)},h._Gather=function(){return(h._Gather=h.asm.Gather).apply(null,arguments)},h._GatherNd=function(){return(h._GatherNd=h.asm.GatherNd).apply(null,arguments)},h._Greater=function(){return(h._Greater=h.asm.Greater).apply(null,arguments)},h._GreaterEqual=function(){return(h._GreaterEqual=h.asm.GreaterEqual).apply(null,arguments)},h._LeakyRelu=function(){return(h._LeakyRelu=h.asm.LeakyRelu).apply(null,arguments)},h._Less=function(){return(h._Less=h.asm.Less).apply(null,arguments)},h._LessEqual=function(){return(h._LessEqual=h.asm.LessEqual).apply(null,arguments)},h._Log=function(){return(h._Log=h.asm.Log).apply(null,arguments)},h._LogicalAnd=function(){return(h._LogicalAnd=h.asm.LogicalAnd).apply(null,arguments)},h._LogicalNot=function(){return(h._LogicalNot=h.asm.LogicalNot).apply(null,arguments)},h._LogicalOr=function(){return(h._LogicalOr=h.asm.LogicalOr).apply(null,arguments)},h._LogicalXor=function(){return(h._LogicalXor=h.asm.LogicalXor).apply(null,arguments)},h._Max=function(){return(h._Max=h.asm.Max).apply(null,arguments)},h._MaxPool=function(){return(h._MaxPool=h.asm.MaxPool).apply(null,arguments)},h._Maximum=function(){return(h._Maximum=h.asm.Maximum).apply(null,arguments)},h._Mean=function(){return(h._Mean=h.asm.Mean).apply(null,arguments)},h._Min=function(){return(h._Min=h.asm.Min).apply(null,arguments)},h._Minimum=function(){return(h._Minimum=h.asm.Minimum).apply(null,arguments)},h._MirrorPad=function(){return(h._MirrorPad=h.asm.MirrorPad).apply(null,arguments)},h._Multiply=function(){return(h._Multiply=h.asm.Multiply).apply(null,arguments)},h._Neg=function(){return(h._Neg=h.asm.Neg).apply(null,arguments)},h._NonMaxSuppressionV3=function(){return(h._NonMaxSuppressionV3=h.asm.NonMaxSuppressionV3).apply(null,arguments)},h._NonMaxSuppressionV4=function(){return(h._NonMaxSuppressionV4=h.asm.NonMaxSuppressionV4).apply(null,arguments)},h._NonMaxSuppressionV5=function(){return(h._NonMaxSuppressionV5=h.asm.NonMaxSuppressionV5).apply(null,arguments)},h._NotEqual=function(){return(h._NotEqual=h.asm.NotEqual).apply(null,arguments)},h._OneHot=function(){return(h._OneHot=h.asm.OneHot).apply(null,arguments)},h._PadV2=function(){return(h._PadV2=h.asm.PadV2).apply(null,arguments)},h._Pow=function(){return(h._Pow=h.asm.Pow).apply(null,arguments)},h._Prelu=function(){return(h._Prelu=h.asm.Prelu).apply(null,arguments)},h._Prod=function(){return(h._Prod=h.asm.Prod).apply(null,arguments)},h._RealDiv=function(){return(h._RealDiv=h.asm.RealDiv).apply(null,arguments)},h._Relu=function(){return(h._Relu=h.asm.Relu).apply(null,arguments)},h._Relu6=function(){return(h._Relu6=h.asm.Relu6).apply(null,arguments)},h._ResizeBilinear=function(){return(h._ResizeBilinear=h.asm.ResizeBilinear).apply(null,arguments)},h._ResizeNearestNeighbor=function(){return(h._ResizeNearestNeighbor=h.asm.ResizeNearestNeighbor).apply(null,arguments)},h._Reverse=function(){return(h._Reverse=h.asm.Reverse).apply(null,arguments)},h._RotateWithOffset=function(){return(h._RotateWithOffset=h.asm.RotateWithOffset).apply(null,arguments)},h._Round=function(){return(h._Round=h.asm.Round).apply(null,arguments)},h._Rsqrt=function(){return(h._Rsqrt=h.asm.Rsqrt).apply(null,arguments)},h._ScatterNd=function(){return(h._ScatterNd=h.asm.ScatterNd).apply(null,arguments)},h._SelectV2=function(){return(h._SelectV2=h.asm.SelectV2).apply(null,arguments)},h._Sigmoid=function(){return(h._Sigmoid=h.asm.Sigmoid).apply(null,arguments)},h._Sin=function(){return(h._Sin=h.asm.Sin).apply(null,arguments)},h._Softmax=function(){return(h._Softmax=h.asm.Softmax).apply(null,arguments)},h._SparseFillEmptyRows=function(){return(h._SparseFillEmptyRows=h.asm.SparseFillEmptyRows).apply(null,arguments)},h._SparseReshape=function(){return(h._SparseReshape=h.asm.SparseReshape).apply(null,arguments)},h._SparseSegmentReduction=function(){return(h._SparseSegmentReduction=h.asm.SparseSegmentReduction).apply(null,arguments)},h._Sqrt=function(){return(h._Sqrt=h.asm.Sqrt).apply(null,arguments)},h._Square=function(){return(h._Square=h.asm.Square).apply(null,arguments)},h._SquaredDifference=function(){return(h._SquaredDifference=h.asm.SquaredDifference).apply(null,arguments)},h._Step=function(){return(h._Step=h.asm.Step).apply(null,arguments)},h._StridedSlice=function(){return(h._StridedSlice=h.asm.StridedSlice).apply(null,arguments)},h._Sub=function(){return(h._Sub=h.asm.Sub).apply(null,arguments)},h._Sum=function(){return(h._Sum=h.asm.Sum).apply(null,arguments)},h._Tan=function(){return(h._Tan=h.asm.Tan).apply(null,arguments)},h._Tanh=function(){return(h._Tanh=h.asm.Tanh).apply(null,arguments)},h._Tile=function(){return(h._Tile=h.asm.Tile).apply(null,arguments)},h._TopK=function(){return(h._TopK=h.asm.TopK).apply(null,arguments)},h._Transform=function(){return(h._Transform=h.asm.Transform).apply(null,arguments)},h._Transpose=function(){return(h._Transpose=h.asm.Transpose).apply(null,arguments)},h.__FusedMatMul=function(){return(h.__FusedMatMul=h.asm._FusedMatMul).apply(null,arguments)},h._malloc=function(){return(h._malloc=h.asm.malloc).apply(null,arguments)},h._free=function(){return(h._free=h.asm.free).apply(null,arguments)},h.__emscripten_tls_init=function(){return(h.__emscripten_tls_init=h.asm._emscripten_tls_init).apply(null,arguments)},h._pthread_self=function(){return(Me=h._pthread_self=h.asm.pthread_self).apply(null,arguments)}),Le=(h.___errno_location=function(){return(h.___errno_location=h.asm.__errno_location).apply(null,arguments)},h.__emscripten_thread_init=function(){return(Le=h.__emscripten_thread_init=h.asm._emscripten_thread_init).apply(null,arguments)}),ze=(h.__emscripten_thread_crashed=function(){return(h.__emscripten_thread_crashed=h.asm._emscripten_thread_crashed).apply(null,arguments)},h._emscripten_main_thread_process_queued_calls=function(){return(h._emscripten_main_thread_process_queued_calls=h.asm.emscripten_main_thread_process_queued_calls).apply(null,arguments)},h._emscripten_main_browser_thread_id=function(){return(h._emscripten_main_browser_thread_id=h.asm.emscripten_main_browser_thread_id).apply(null,arguments)},h._emscripten_run_in_main_runtime_thread_js=function(){return(ze=h._emscripten_run_in_main_runtime_thread_js=h.asm.emscripten_run_in_main_runtime_thread_js).apply(null,arguments)}),Pe=(h._emscripten_dispatch_to_thread_=function(){return(h._emscripten_dispatch_to_thread_=h.asm.emscripten_dispatch_to_thread_).apply(null,arguments)},h.__emscripten_proxy_execute_task_queue=function(){return(Pe=h.__emscripten_proxy_execute_task_queue=h.asm._emscripten_proxy_execute_task_queue).apply(null,arguments)}),Be=h.__emscripten_thread_free_data=function(){return(Be=h.__emscripten_thread_free_data=h.asm._emscripten_thread_free_data).apply(null,arguments)},We=h.__emscripten_thread_exit=function(){return(We=h.__emscripten_thread_exit=h.asm._emscripten_thread_exit).apply(null,arguments)},Ve=h._emscripten_stack_set_limits=function(){return(Ve=h._emscripten_stack_set_limits=h.asm.emscripten_stack_set_limits).apply(null,arguments)},Ue=h.stackSave=function(){return(Ue=h.stackSave=h.asm.stackSave).apply(null,arguments)},Ge=h.stackRestore=function(){return(Ge=h.stackRestore=h.asm.stackRestore).apply(null,arguments)},He=h.stackAlloc=function(){return(He=h.stackAlloc=h.asm.stackAlloc).apply(null,arguments)};function je(e){if(e=e||g,!(Q>0)){if(k)return u(h),Z(),void postMessage({cmd:"loaded"});!function(){if(h.preRun)for("function"==typeof h.preRun&&(h.preRun=[h.preRun]);h.preRun.length;)e=h.preRun.shift(),q.unshift(e);var e;de(q)}(),Q>0||(h.setStatus?(h.setStatus("Running..."),setTimeout((function(){setTimeout((function(){h.setStatus("")}),1),t()}),1)):t())}function t(){Ae||(Ae=!0,h.calledRun=!0,W||(Z(),u(h),h.onRuntimeInitialized&&h.onRuntimeInitialized(),function(){if(!k){if(h.postRun)for("function"==typeof h.postRun&&(h.postRun=[h.postRun]);h.postRun.length;)e=h.postRun.shift(),X.unshift(e);var e;de(X)}}()))}}if(h.dynCall_iijjiiii=function(){return(h.dynCall_iijjiiii=h.asm.dynCall_iijjiiii).apply(null,arguments)},h.dynCall_jiji=function(){return(h.dynCall_jiji=h.asm.dynCall_jiji).apply(null,arguments)},h.keepRuntimeAlive=Y,h.wasmMemory=A,h.cwrap=function(e,t,n,a){var r=(n=n||[]).every((e=>"number"===e||"boolean"===e));return"string"!==t&&r&&!a?Ee(e):function(){return _e(e,t,n,arguments)}},h.ExitStatus=oe,h.PThread=pe,te=function e(){Ae||je(),Ae||(te=e)},h.preInit)for("function"==typeof h.preInit&&(h.preInit=[h.preInit]);h.preInit.length>0;)h.preInit.pop()();if(je(),c&&(Re={uncaughtException:process.listeners("uncaughtException").filter((function(e){return!c.uncaughtException.indexOf(e)>-1})),unhandledRejection:process.listeners("unhandledRejection").filter((function(e){return!c.unhandledRejection.indexOf(e)>-1}))}),"undefined"!=typeof WasmBackendModule)Fe=WasmBackendModule;else{if(void 0===e)throw new Error("Could not find wasm module in post.js");Fe=e}if(Re){var qe=Fe._dispose;Fe._dispose=function(){qe(),Re.uncaughtException.forEach((function(e){process.removeListener("uncaughtException",e)})),Re.unhandledRejection.forEach((function(e){process.removeListener("unhandledRejection",e)}))}}return e.ready});e.exports=r},593:e=>{e.exports.$='"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(fs.readFileSync(f,"utf8"))},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}var initializedJS=false;var pendingNotifiedProxyingQueues=[];function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var instance=new WebAssembly.Instance(Module["wasmModule"],info);receiveInstance(instance);Module["wasmModule"]=null;return instance.exports};self.onunhandledrejection=e=>{throw e.reason??e};self.onmessage=e=>{try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module).then(function(instance){Module=instance})}else if(e.data.cmd==="run"){Module["__performance_now_clock_drift"]=performance.now()-e.data.time;Module["__emscripten_thread_init"](e.data.pthread_ptr,0,0,1);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){pendingNotifiedProxyingQueues.forEach(queue=>{Module["executeNotifiedProxyingQueue"](queue)});pendingNotifiedProxyingQueues=[];initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["keepRuntimeAlive"]()){}else{Module["__emscripten_thread_exit"](ex.status)}}else{throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processProxyingQueue"){if(initializedJS){Module["executeNotifiedProxyingQueue"](e.data.queue)}else{pendingNotifiedProxyingQueues.push(e.data.queue)}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}};'},186:(e,t,n)=>{var a,r=(a=(a="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(e){var t,r,s,i=void 0!==(e=e||{})?e:{};i.ready=new Promise((function(e,n){t=e,r=n})),"undefined"!=typeof process&&process.listeners&&(s={uncaughtException:process.listeners("uncaughtException"),unhandledRejection:process.listeners("unhandledRejection")});var o,u,l,c,h,p=Object.assign({},i),d=[],f="object"==typeof window,m="function"==typeof importScripts,g="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,y="";g?(y=m?n(281).dirname(y)+"/":"//",c=n(893),h=n(281),o=(e,t)=>(e=h.normalize(e),c.readFileSync(e,t?void 0:"utf8")),l=e=>{var t=o(e,!0);return t.buffer||(t=new Uint8Array(t)),t},u=(e,t,n)=>{e=h.normalize(e),c.readFile(e,(function(e,a){e?n(e):t(a.buffer)}))},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),d=process.argv.slice(2),process.on("uncaughtException",(function(e){if(!(e instanceof V))throw e})),process.on("unhandledRejection",(function(e){throw e})),i.inspect=function(){return"[Emscripten Module object]"}):(f||m)&&(m?y=self.location.href:"undefined"!=typeof document&&document.currentScript&&(y=document.currentScript.src),a&&(y=a),y=0!==y.indexOf("blob:")?y.substr(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1):"",o=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},m&&(l=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),u=(e,t,n)=>{var a=new XMLHttpRequest;a.open("GET",e,!0),a.responseType="arraybuffer",a.onload=()=>{200==a.status||0==a.status&&a.response?t(a.response):n()},a.onerror=n,a.send(null)});var b,x,w=i.print||console.log.bind(console),k=i.printErr||console.warn.bind(console);Object.assign(i,p),p=null,i.arguments&&(d=i.arguments),i.thisProgram&&i.thisProgram,i.quit&&i.quit,i.wasmBinary&&(b=i.wasmBinary),i.noExitRuntime,"object"!=typeof WebAssembly&&z("no native wasm support detected");var v,I,N,S,T=!1,C="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function $(e,t,n){for(var a=t+n,r=t;e[r]&&!(r>=a);)++r;if(r-t>16&&e.buffer&&C)return C.decode(e.subarray(t,r));for(var s="";t<r;){var i=e[t++];if(128&i){var o=63&e[t++];if(192!=(224&i)){var u=63&e[t++];if((i=224==(240&i)?(15&i)<<12|o<<6|u:(7&i)<<18|o<<12|u<<6|63&e[t++])<65536)s+=String.fromCharCode(i);else{var l=i-65536;s+=String.fromCharCode(55296|l>>10,56320|1023&l)}}else s+=String.fromCharCode((31&i)<<6|o)}else s+=String.fromCharCode(i)}return s}function E(e){v=e,i.HEAP8=I=new Int8Array(e),i.HEAP16=new Int16Array(e),i.HEAP32=new Int32Array(e),i.HEAPU8=N=new Uint8Array(e),i.HEAPU16=new Uint16Array(e),i.HEAPU32=S=new Uint32Array(e),i.HEAPF32=new Float32Array(e),i.HEAPF64=new Float64Array(e)}i.INITIAL_MEMORY;var _,A,R=[],F=[],D=[],O=0,M=null,L=null;function z(e){i.onAbort&&i.onAbort(e),k(e="Aborted("+e+")"),T=!0,e+=". Build with -sASSERTIONS for more info.";var t=new WebAssembly.RuntimeError(e);throw r(t),t}function P(e){return e.startsWith("data:application/octet-stream;base64,")}function B(e){return e.startsWith("file://")}function W(e){try{if(e==_&&b)return new Uint8Array(b);if(l)return l(e);throw"both async and sync fetching of the wasm failed"}catch(e){z(e)}}function V(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function U(e){for(;e.length>0;)e.shift()(i)}function G(e){try{return x.grow(e-v.byteLength+65535>>>16),E(x.buffer),1}catch(e){}}P(_="tfjs-backend-wasm.wasm")||(A=_,_=i.locateFile?i.locateFile(A,y):y+A);var H=[null,[],[]];function j(e,t){var n=H[e];0===t||10===t?((1===e?w:k)($(n,0)),n.length=0):n.push(t)}function q(e){return i["_"+e]}function K(e,t,n,a,r){var s={string:e=>{var t=0;if(null!=e&&0!==e){var n=1+(e.length<<2);!function(e,t,n){!function(e,t,n,a){if(!(a>0))return 0;for(var r=n+a-1,s=0;s<e.length;++s){var i=e.charCodeAt(s);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++s)),i<=127){if(n>=r)break;t[n++]=i}else if(i<=2047){if(n+1>=r)break;t[n++]=192|i>>6,t[n++]=128|63&i}else if(i<=65535){if(n+2>=r)break;t[n++]=224|i>>12,t[n++]=128|i>>6&63,t[n++]=128|63&i}else{if(n+3>=r)break;t[n++]=240|i>>18,t[n++]=128|i>>12&63,t[n++]=128|i>>6&63,t[n++]=128|63&i}}t[n]=0}(e,N,t,n)}(e,t=te(n),n)}return t},array:e=>{var t=te(e.length);return function(e,t){I.set(e,t)}(e,t),t}},i=q(e),o=[],u=0;if(a)for(var l=0;l<a.length;l++){var c=s[n[l]];c?(0===u&&(u=Q()),o[l]=c(a[l])):o[l]=a[l]}var h=i.apply(null,o);return function(e){return 0!==u&&ee(u),function(e){return"string"===t?(n=e)?$(N,n,a):"":"boolean"===t?Boolean(e):e;var n,a}(e)}(h)}var X,Y,Z,J={abort:function(){z("")},emscripten_get_heap_max:function(){return 2147483648},emscripten_memcpy_big:function(e,t,n){N.copyWithin(e,t,t+n)},emscripten_resize_heap:function(e){var t,n=N.length,a=2147483648;if((e>>>=0)>a)return!1;for(var r=1;r<=4;r*=2){var s=n*(1+.2/r);if(s=Math.min(s,e+100663296),G(Math.min(a,(t=Math.max(e,s))+(65536-t%65536)%65536)))return!0}return!1},fd_close:function(e){return 52},fd_seek:function(e,t,n,a,r){return 70},fd_write:function(e,t,n,a){for(var r=0,s=0;s<n;s++){var i=S[t>>2],o=S[t+4>>2];t+=8;for(var u=0;u<o;u++)j(e,N[i+u]);r+=o}return S[a>>2]=r,0}},Q=(function(){var e={env:J,wasi_snapshot_preview1:J};function t(e,t){var n,a=e.exports;i.asm=a,E((x=i.asm.memory).buffer),i.asm.__indirect_function_table,n=i.asm.__wasm_call_ctors,F.unshift(n),function(){if(O--,i.monitorRunDependencies&&i.monitorRunDependencies(O),0==O&&(null!==M&&(clearInterval(M),M=null),L)){var e=L;L=null,e()}}()}function n(e){t(e.instance)}function a(t){return function(){if(!b&&(f||m)){if("function"==typeof fetch&&!B(_))return fetch(_,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+_+"'";return e.arrayBuffer()})).catch((function(){return W(_)}));if(u)return new Promise((function(e,t){u(_,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return W(_)}))}().then((function(t){return WebAssembly.instantiate(t,e)})).then((function(e){return e})).then(t,(function(e){k("failed to asynchronously prepare wasm: "+e),z(e)}))}if(O++,i.monitorRunDependencies&&i.monitorRunDependencies(O),i.instantiateWasm)try{return i.instantiateWasm(e,t)}catch(e){k("Module.instantiateWasm callback failed with error: "+e),r(e)}(b||"function"!=typeof WebAssembly.instantiateStreaming||P(_)||B(_)||g||"function"!=typeof fetch?a(n):fetch(_,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(n,(function(e){return k("wasm streaming compile failed: "+e),k("falling back to ArrayBuffer instantiation"),a(n)}))}))).catch(r)}(),i.___wasm_call_ctors=function(){return(i.___wasm_call_ctors=i.asm.__wasm_call_ctors).apply(null,arguments)},i._init=function(){return(i._init=i.asm.init).apply(null,arguments)},i._init_with_threads_count=function(){return(i._init_with_threads_count=i.asm.init_with_threads_count).apply(null,arguments)},i._get_threads_count=function(){return(i._get_threads_count=i.asm.get_threads_count).apply(null,arguments)},i._register_tensor=function(){return(i._register_tensor=i.asm.register_tensor).apply(null,arguments)},i._dispose_data=function(){return(i._dispose_data=i.asm.dispose_data).apply(null,arguments)},i._dispose=function(){return(i._dispose=i.asm.dispose).apply(null,arguments)},i._Abs=function(){return(i._Abs=i.asm.Abs).apply(null,arguments)},i._Add=function(){return(i._Add=i.asm.Add).apply(null,arguments)},i._AddN=function(){return(i._AddN=i.asm.AddN).apply(null,arguments)},i._All=function(){return(i._All=i.asm.All).apply(null,arguments)},i._Any=function(){return(i._Any=i.asm.Any).apply(null,arguments)},i._ArgMax=function(){return(i._ArgMax=i.asm.ArgMax).apply(null,arguments)},i._AvgPool=function(){return(i._AvgPool=i.asm.AvgPool).apply(null,arguments)},i._BatchMatMul=function(){return(i._BatchMatMul=i.asm.BatchMatMul).apply(null,arguments)},i._Ceil=function(){return(i._Ceil=i.asm.Ceil).apply(null,arguments)},i._ClipByValue=function(){return(i._ClipByValue=i.asm.ClipByValue).apply(null,arguments)},i._Conv2D=function(){return(i._Conv2D=i.asm.Conv2D).apply(null,arguments)},i._Conv2DBackpropInput=function(){return(i._Conv2DBackpropInput=i.asm.Conv2DBackpropInput).apply(null,arguments)},i._Cos=function(){return(i._Cos=i.asm.Cos).apply(null,arguments)},i._Cosh=function(){return(i._Cosh=i.asm.Cosh).apply(null,arguments)},i._CropAndResize=function(){return(i._CropAndResize=i.asm.CropAndResize).apply(null,arguments)},i._Cumprod=function(){return(i._Cumprod=i.asm.Cumprod).apply(null,arguments)},i._Cumsum=function(){return(i._Cumsum=i.asm.Cumsum).apply(null,arguments)},i._DepthToSpace=function(){return(i._DepthToSpace=i.asm.DepthToSpace).apply(null,arguments)},i._DepthwiseConv2dNative=function(){return(i._DepthwiseConv2dNative=i.asm.DepthwiseConv2dNative).apply(null,arguments)},i._Elu=function(){return(i._Elu=i.asm.Elu).apply(null,arguments)},i._Equal=function(){return(i._Equal=i.asm.Equal).apply(null,arguments)},i._Exp=function(){return(i._Exp=i.asm.Exp).apply(null,arguments)},i._FlipLeftRight=function(){return(i._FlipLeftRight=i.asm.FlipLeftRight).apply(null,arguments)},i._Floor=function(){return(i._Floor=i.asm.Floor).apply(null,arguments)},i._FloorDiv=function(){return(i._FloorDiv=i.asm.FloorDiv).apply(null,arguments)},i._FusedBatchNorm=function(){return(i._FusedBatchNorm=i.asm.FusedBatchNorm).apply(null,arguments)},i._FusedConv2D=function(){return(i._FusedConv2D=i.asm.FusedConv2D).apply(null,arguments)},i._FusedDepthwiseConv2D=function(){return(i._FusedDepthwiseConv2D=i.asm.FusedDepthwiseConv2D).apply(null,arguments)},i._Gather=function(){return(i._Gather=i.asm.Gather).apply(null,arguments)},i._GatherNd=function(){return(i._GatherNd=i.asm.GatherNd).apply(null,arguments)},i._Greater=function(){return(i._Greater=i.asm.Greater).apply(null,arguments)},i._GreaterEqual=function(){return(i._GreaterEqual=i.asm.GreaterEqual).apply(null,arguments)},i._LeakyRelu=function(){return(i._LeakyRelu=i.asm.LeakyRelu).apply(null,arguments)},i._Less=function(){return(i._Less=i.asm.Less).apply(null,arguments)},i._LessEqual=function(){return(i._LessEqual=i.asm.LessEqual).apply(null,arguments)},i._Log=function(){return(i._Log=i.asm.Log).apply(null,arguments)},i._LogicalAnd=function(){return(i._LogicalAnd=i.asm.LogicalAnd).apply(null,arguments)},i._LogicalNot=function(){return(i._LogicalNot=i.asm.LogicalNot).apply(null,arguments)},i._LogicalOr=function(){return(i._LogicalOr=i.asm.LogicalOr).apply(null,arguments)},i._LogicalXor=function(){return(i._LogicalXor=i.asm.LogicalXor).apply(null,arguments)},i._Max=function(){return(i._Max=i.asm.Max).apply(null,arguments)},i._MaxPool=function(){return(i._MaxPool=i.asm.MaxPool).apply(null,arguments)},i._Maximum=function(){return(i._Maximum=i.asm.Maximum).apply(null,arguments)},i._Mean=function(){return(i._Mean=i.asm.Mean).apply(null,arguments)},i._Min=function(){return(i._Min=i.asm.Min).apply(null,arguments)},i._Minimum=function(){return(i._Minimum=i.asm.Minimum).apply(null,arguments)},i._MirrorPad=function(){return(i._MirrorPad=i.asm.MirrorPad).apply(null,arguments)},i._Multiply=function(){return(i._Multiply=i.asm.Multiply).apply(null,arguments)},i._Neg=function(){return(i._Neg=i.asm.Neg).apply(null,arguments)},i._NonMaxSuppressionV3=function(){return(i._NonMaxSuppressionV3=i.asm.NonMaxSuppressionV3).apply(null,arguments)},i._NonMaxSuppressionV4=function(){return(i._NonMaxSuppressionV4=i.asm.NonMaxSuppressionV4).apply(null,arguments)},i._NonMaxSuppressionV5=function(){return(i._NonMaxSuppressionV5=i.asm.NonMaxSuppressionV5).apply(null,arguments)},i._NotEqual=function(){return(i._NotEqual=i.asm.NotEqual).apply(null,arguments)},i._OneHot=function(){return(i._OneHot=i.asm.OneHot).apply(null,arguments)},i._PadV2=function(){return(i._PadV2=i.asm.PadV2).apply(null,arguments)},i._Pow=function(){return(i._Pow=i.asm.Pow).apply(null,arguments)},i._Prelu=function(){return(i._Prelu=i.asm.Prelu).apply(null,arguments)},i._Prod=function(){return(i._Prod=i.asm.Prod).apply(null,arguments)},i._RealDiv=function(){return(i._RealDiv=i.asm.RealDiv).apply(null,arguments)},i._Relu=function(){return(i._Relu=i.asm.Relu).apply(null,arguments)},i._Relu6=function(){return(i._Relu6=i.asm.Relu6).apply(null,arguments)},i._ResizeBilinear=function(){return(i._ResizeBilinear=i.asm.ResizeBilinear).apply(null,arguments)},i._ResizeNearestNeighbor=function(){return(i._ResizeNearestNeighbor=i.asm.ResizeNearestNeighbor).apply(null,arguments)},i._Reverse=function(){return(i._Reverse=i.asm.Reverse).apply(null,arguments)},i._RotateWithOffset=function(){return(i._RotateWithOffset=i.asm.RotateWithOffset).apply(null,arguments)},i._Round=function(){return(i._Round=i.asm.Round).apply(null,arguments)},i._Rsqrt=function(){return(i._Rsqrt=i.asm.Rsqrt).apply(null,arguments)},i._ScatterNd=function(){return(i._ScatterNd=i.asm.ScatterNd).apply(null,arguments)},i._SelectV2=function(){return(i._SelectV2=i.asm.SelectV2).apply(null,arguments)},i._Sigmoid=function(){return(i._Sigmoid=i.asm.Sigmoid).apply(null,arguments)},i._Sin=function(){return(i._Sin=i.asm.Sin).apply(null,arguments)},i._Softmax=function(){return(i._Softmax=i.asm.Softmax).apply(null,arguments)},i._SparseFillEmptyRows=function(){return(i._SparseFillEmptyRows=i.asm.SparseFillEmptyRows).apply(null,arguments)},i._SparseReshape=function(){return(i._SparseReshape=i.asm.SparseReshape).apply(null,arguments)},i._SparseSegmentReduction=function(){return(i._SparseSegmentReduction=i.asm.SparseSegmentReduction).apply(null,arguments)},i._Sqrt=function(){return(i._Sqrt=i.asm.Sqrt).apply(null,arguments)},i._Square=function(){return(i._Square=i.asm.Square).apply(null,arguments)},i._SquaredDifference=function(){return(i._SquaredDifference=i.asm.SquaredDifference).apply(null,arguments)},i._Step=function(){return(i._Step=i.asm.Step).apply(null,arguments)},i._StridedSlice=function(){return(i._StridedSlice=i.asm.StridedSlice).apply(null,arguments)},i._Sub=function(){return(i._Sub=i.asm.Sub).apply(null,arguments)},i._Sum=function(){return(i._Sum=i.asm.Sum).apply(null,arguments)},i._Tan=function(){return(i._Tan=i.asm.Tan).apply(null,arguments)},i._Tanh=function(){return(i._Tanh=i.asm.Tanh).apply(null,arguments)},i._Tile=function(){return(i._Tile=i.asm.Tile).apply(null,arguments)},i._TopK=function(){return(i._TopK=i.asm.TopK).apply(null,arguments)},i._Transform=function(){return(i._Transform=i.asm.Transform).apply(null,arguments)},i._Transpose=function(){return(i._Transpose=i.asm.Transpose).apply(null,arguments)},i.__FusedMatMul=function(){return(i.__FusedMatMul=i.asm._FusedMatMul).apply(null,arguments)},i._malloc=function(){return(i._malloc=i.asm.malloc).apply(null,arguments)},i._free=function(){return(i._free=i.asm.free).apply(null,arguments)},i.___errno_location=function(){return(i.___errno_location=i.asm.__errno_location).apply(null,arguments)},i.stackSave=function(){return(Q=i.stackSave=i.asm.stackSave).apply(null,arguments)}),ee=i.stackRestore=function(){return(ee=i.stackRestore=i.asm.stackRestore).apply(null,arguments)},te=i.stackAlloc=function(){return(te=i.stackAlloc=i.asm.stackAlloc).apply(null,arguments)};function ne(e){function n(){X||(X=!0,i.calledRun=!0,T||(U(F),t(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),function(){if(i.postRun)for("function"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;)e=i.postRun.shift(),D.unshift(e);var e;U(D)}()))}e=e||d,O>0||(function(){if(i.preRun)for("function"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)e=i.preRun.shift(),R.unshift(e);var e;U(R)}(),O>0||(i.setStatus?(i.setStatus("Running..."),setTimeout((function(){setTimeout((function(){i.setStatus("")}),1),n()}),1)):n()))}if(i.dynCall_iijjiiii=function(){return(i.dynCall_iijjiiii=i.asm.dynCall_iijjiiii).apply(null,arguments)},i.dynCall_jiji=function(){return(i.dynCall_jiji=i.asm.dynCall_jiji).apply(null,arguments)},i.cwrap=function(e,t,n,a){var r=(n=n||[]).every((e=>"number"===e||"boolean"===e));return"string"!==t&&r&&!a?q(e):function(){return K(e,t,n,arguments)}},L=function e(){X||ne(),X||(L=e)},i.preInit)for("function"==typeof i.preInit&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();if(ne(),s&&(Y={uncaughtException:process.listeners("uncaughtException").filter((function(e){return!s.uncaughtException.indexOf(e)>-1})),unhandledRejection:process.listeners("unhandledRejection").filter((function(e){return!s.unhandledRejection.indexOf(e)>-1}))}),void 0!==e)Z=e;else{if("undefined"==typeof WasmBackendModuleThreadedSimd)throw new Error("Could not find wasm module in post.js");Z=WasmBackendModuleThreadedSimd}if(Y){var ae=Z._dispose;Z._dispose=function(){ae(),Y.uncaughtException.forEach((function(e){process.removeListener("uncaughtException",e)})),Y.unhandledRejection.forEach((function(e){process.removeListener("unhandledRejection",e)}))}}return e.ready});e.exports=r},570:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function a(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=a;var r={},s={};function i(e,t){var n,a,i;return t?(i=0<=(e>>>=0)&&e<256)&&(a=s[e])?a:(n=u(e,(0|e)<0?-1:0,!0),i&&(s[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(a=r[e])?a:(n=u(e,e<0?-1:0,!1),i&&(r[e]=n),n)}function o(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=d)return v}else{if(e<=-f)return I;if(e+1>=f)return k}return e<0?o(-e,t).neg():u(e%p|0,e/p|0,t)}function u(e,t,a){return new n(e,t,a)}n.fromInt=i,n.fromNumber=o,n.fromBits=u;var l=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var a;if((a=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===a)return c(e.substring(1),t,n).neg();for(var r=o(l(n,8)),s=g,i=0;i<e.length;i+=8){var u=Math.min(8,e.length-i),h=parseInt(e.substring(i,i+u),n);if(u<8){var p=o(l(n,u));s=s.mul(p).add(o(h))}else s=(s=s.mul(r)).add(o(h))}return s.unsigned=t,s}function h(e,t){return"number"==typeof e?o(e,t):"string"==typeof e?c(e,t):u(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=h;var p=4294967296,d=p*p,f=d/2,m=i(1<<24),g=i(0);n.ZERO=g;var y=i(0,!0);n.UZERO=y;var b=i(1);n.ONE=b;var x=i(1,!0);n.UONE=x;var w=i(-1);n.NEG_ONE=w;var k=u(-1,2147483647,!1);n.MAX_VALUE=k;var v=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=v;var I=u(0,-2147483648,!1);n.MIN_VALUE=I;var N=n.prototype;N.toInt=function(){return this.unsigned?this.low>>>0:this.low},N.toNumber=function(){return this.unsigned?(this.high>>>0)*p+(this.low>>>0):this.high*p+(this.low>>>0)},N.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=o(e),n=this.div(t),a=n.mul(t).sub(this);return n.toString(e)+a.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=o(l(e,6),this.unsigned),s=this,i="";;){var u=s.div(r),c=(s.sub(u.mul(r)).toInt()>>>0).toString(e);if((s=u).isZero())return c+i;for(;c.length<6;)c="0"+c;i=""+c+i}},N.getHighBits=function(){return this.high},N.getHighBitsUnsigned=function(){return this.high>>>0},N.getLowBits=function(){return this.low},N.getLowBitsUnsigned=function(){return this.low>>>0},N.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&!(e&1<<t);t--);return 0!=this.high?t+33:t+1},N.isZero=function(){return 0===this.high&&0===this.low},N.eqz=N.isZero,N.isNegative=function(){return!this.unsigned&&this.high<0},N.isPositive=function(){return this.unsigned||this.high>=0},N.isOdd=function(){return!(1&~this.low)},N.isEven=function(){return!(1&this.low)},N.equals=function(e){return a(e)||(e=h(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},N.eq=N.equals,N.notEquals=function(e){return!this.eq(e)},N.neq=N.notEquals,N.ne=N.notEquals,N.lessThan=function(e){return this.comp(e)<0},N.lt=N.lessThan,N.lessThanOrEqual=function(e){return this.comp(e)<=0},N.lte=N.lessThanOrEqual,N.le=N.lessThanOrEqual,N.greaterThan=function(e){return this.comp(e)>0},N.gt=N.greaterThan,N.greaterThanOrEqual=function(e){return this.comp(e)>=0},N.gte=N.greaterThanOrEqual,N.ge=N.greaterThanOrEqual,N.compare=function(e){if(a(e)||(e=h(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},N.comp=N.compare,N.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(b)},N.neg=N.negate,N.add=function(e){a(e)||(e=h(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,i=e.high>>>16,o=65535&e.high,l=e.low>>>16,c=0,p=0,d=0,f=0;return d+=(f+=s+(65535&e.low))>>>16,p+=(d+=r+l)>>>16,c+=(p+=n+o)>>>16,c+=t+i,u((d&=65535)<<16|(f&=65535),(c&=65535)<<16|(p&=65535),this.unsigned)},N.subtract=function(e){return a(e)||(e=h(e)),this.add(e.neg())},N.sub=N.subtract,N.multiply=function(e){if(this.isZero())return g;if(a(e)||(e=h(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(I))return e.isOdd()?I:g;if(e.eq(I))return this.isOdd()?I:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return o(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,r=65535&this.high,s=this.low>>>16,i=65535&this.low,l=e.high>>>16,c=65535&e.high,p=e.low>>>16,d=65535&e.low,f=0,y=0,b=0,x=0;return b+=(x+=i*d)>>>16,y+=(b+=s*d)>>>16,b&=65535,y+=(b+=i*p)>>>16,f+=(y+=r*d)>>>16,y&=65535,f+=(y+=s*p)>>>16,y&=65535,f+=(y+=i*c)>>>16,f+=n*d+r*p+s*c+i*l,u((b&=65535)<<16|(x&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},N.mul=N.multiply,N.divide=function(e){if(a(e)||(e=h(e)),e.isZero())throw Error("division by zero");var n,r,s;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return x;s=y}else{if(this.eq(I))return e.eq(b)||e.eq(w)?I:e.eq(I)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:w:(r=this.sub(e.mul(n)),s=n.add(r.div(e)));if(e.eq(I))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=g}for(r=this;r.gte(e);){n=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(n)/Math.LN2),c=i<=48?1:l(2,i-48),p=o(n),d=p.mul(e);d.isNegative()||d.gt(r);)d=(p=o(n-=c,this.unsigned)).mul(e);p.isZero()&&(p=b),s=s.add(p),r=r.sub(d)}return s},N.div=N.divide,N.modulo=function(e){return a(e)||(e=h(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},N.mod=N.modulo,N.rem=N.modulo,N.not=function(){return u(~this.low,~this.high,this.unsigned)},N.and=function(e){return a(e)||(e=h(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},N.or=function(e){return a(e)||(e=h(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},N.xor=function(e){return a(e)||(e=h(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},N.shiftLeft=function(e){return a(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},N.shl=N.shiftLeft,N.shiftRight=function(e){return a(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},N.shr=N.shiftRight,N.shiftRightUnsigned=function(e){if(a(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},N.shru=N.shiftRightUnsigned,N.shr_u=N.shiftRightUnsigned,N.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},N.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},N.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},N.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},N.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,a){return a?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},391:(e,t,n)=>{var a=n(180),r=n(181),s=n(31),i=n(67),o=n(833),u=n(717),l=n(801);l.alea=a,l.xor128=r,l.xorwow=s,l.xorshift7=i,l.xor4096=o,l.tychei=u,e.exports=l},180:function(e,t,n){var a;!function(e,r){function s(e){var t,n=this,a=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var a=.02519603282416938*(t+=e.charCodeAt(n));a-=t=a>>>0,t=(a*=t)>>>0,t+=4294967296*(a-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=a(" "),n.s1=a(" "),n.s2=a(" "),n.s0-=a(e),n.s0<0&&(n.s0+=1),n.s1-=a(e),n.s1<0&&(n.s1+=1),n.s2-=a(e),n.s2<0&&(n.s2+=1),a=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function o(e,t){var n=new s(e),a=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,a&&("object"==typeof a&&i(a,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(a=function(){return o}.call(t,n,t,r))||(r.exports=a):this.alea=o}(0,e=n.nmd(e),n.amdD)},717:function(e,t,n){var a;!function(e,r){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,a=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-a|0,a=a<<24^a>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-a|0,t.d=a<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var a=0;a<n.length+20;a++)t.b^=0|n.charCodeAt(a),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function o(e,t){var n=new s(e),a=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,a&&("object"==typeof a&&i(a,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(a=function(){return o}.call(t,n,t,r))||(r.exports=a):this.tychei=o}(0,e=n.nmd(e),n.amdD)},181:function(e,t,n){var a;!function(e,r){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var a=0;a<n.length+64;a++)t.x^=0|n.charCodeAt(a),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function o(e,t){var n=new s(e),a=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,a&&("object"==typeof a&&i(a,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(a=function(){return o}.call(t,n,t,r))||(r.exports=a):this.xor128=o}(0,e=n.nmd(e),n.amdD)},833:function(e,t,n){var a;!function(e,r){function s(e){var t=this;t.next=function(){var e,n,a=t.w,r=t.X,s=t.i;return t.w=a=a+1640531527|0,n=r[s+34&127],e=r[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[s]=n^e,t.i=s,n+(a^a>>>16)|0},function(e,t){var n,a,r,s,i,o=[],u=128;for(t===(0|t)?(a=t,t=null):(t+="\0",a=0,u=Math.max(u,t.length)),r=0,s=-32;s<u;++s)t&&(a^=t.charCodeAt((s+32)%t.length)),0===s&&(i=a),a^=a<<10,a^=a>>>15,a^=a<<4,a^=a>>>13,s>=0&&(i=i+1640531527|0,r=0==(n=o[127&s]^=a+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,s=512;s>0;--s)a=o[r+34&127],n=o[r=r+1&127],a^=a<<13,n^=n<<17,a^=a>>>15,n^=n>>>12,o[r]=a^n;e.w=i,e.X=o,e.i=r}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function o(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,a&&(a.X&&i(a,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(a=function(){return o}.call(t,n,t,r))||(r.exports=a):this.xor4096=o}(0,e=n.nmd(e),n.amdD)},67:function(e,t,n){var a;!function(e,r){function s(e){var t=this;t.next=function(){var e,n,a=t.x,r=t.i;return e=a[r],n=(e^=e>>>7)^e<<24,n^=(e=a[r+1&7])^e>>>10,n^=(e=a[r+3&7])^e>>>3,n^=(e=a[r+4&7])^e<<7,e=a[r+7&7],n^=(e^=e<<13)^e<<9,a[r]=n,t.i=r+1&7,n},function(e,t){var n,a=[];if(t===(0|t))a[0]=t;else for(t=""+t,n=0;n<t.length;++n)a[7&n]=a[7&n]<<15^t.charCodeAt(n)+a[n+1&7]<<13;for(;a.length<8;)a.push(0);for(n=0;n<8&&0===a[n];++n);for(8==n?a[7]=-1:a[n],e.x=a,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function o(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,a&&(a.x&&i(a,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(a=function(){return o}.call(t,n,t,r))||(r.exports=a):this.xorshift7=o}(0,e=n.nmd(e),n.amdD)},31:function(e,t,n){var a;!function(e,r){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var a=0;a<n.length+64;a++)t.x^=0|n.charCodeAt(a),a==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function o(e,t){var n=new s(e),a=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,a&&("object"==typeof a&&i(a,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=o:n.amdD&&n.amdO?void 0===(a=function(){return o}.call(t,n,t,r))||(r.exports=a):this.xorwow=o}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var a;!function(r,s,i){var o,u=256,l=i.pow(u,6),c=i.pow(2,52),h=2*c,p=255;function d(e,t,n){var a=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(s)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(u):(e=new Uint8Array(u),(r.crypto||r.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=r.navigator,n=t&&t.plugins;return[+new Date,r,n,r.screen,b(s)]}}():e,3),a),d=new f(a),x=function(){for(var e=d.g(6),t=l,n=0;e<c;)e=(e+n)*u,t*=u,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),s),(t.pass||n||function(e,t,n,a){return a&&(a.S&&m(a,d),e.state=function(){return m(d,{})}),n?(i.random=e,t):e})(x,p,"global"in t?t.global:this==i,t.state)}function f(e){var t,n=e.length,a=this,r=0,s=a.i=a.j=0,i=a.S=[];for(n||(e=[n++]);r<u;)i[r]=r++;for(r=0;r<u;r++)i[r]=i[s=p&s+e[r%n]+(t=i[r])],i[s]=t;(a.g=function(e){for(var t,n=0,r=a.i,s=a.j,i=a.S;e--;)t=i[r=p&r+1],n=n*u+i[p&(i[r]=i[s=p&s+t])+(i[s]=t)];return a.i=r,a.j=s,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,a=[],r=typeof e;if(t&&"object"==r)for(n in e)try{a.push(g(e[n],t-1))}catch(e){}return a.length?a:"string"==r?e:e+"\0"}function y(e,t){for(var n,a=e+"",r=0;r<a.length;)t[p&r]=p&(n^=19*t[p&r])+a.charCodeAt(r++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(y(i.random(),s),e.exports){e.exports=d;try{o=n(234)}catch(e){}}else void 0===(a=function(){return d}.call(t,n,t,e))||(e.exports=a)}("undefined"!=typeof self?self:this,[],Math)},893:()=>{},74:()=>{},281:()=>{},244:()=>{},556:()=>{},817:()=>{},590:()=>{},530:()=>{},108:()=>{},551:()=>{},234:()=>{}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var s=t[a]={id:a,loaded:!1,exports:{}};return e[a].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e={};n.r(e),n.d(e,{arraysEqual:()=>le,assert:()=>ae,assertNonNegativeIntegerDimensions:()=>Pe,assertNonNull:()=>se,assertShapesMatch:()=>re,bytesFromStringArray:()=>Te,bytesPerElement:()=>Se,checkConversionForErrors:()=>ke,clamp:()=>Z,computeStrides:()=>Fe,createScalarValue:()=>Lr,createShuffledIndices:()=>de,decodeString:()=>Vr,distSquared:()=>ne,encodeString:()=>Wr,fetch:()=>Br,fingerPrint64:()=>Mr,flatten:()=>ie,getArrayFromDType:()=>we,getTypedArrayFromDType:()=>xe,hasEncodingLoss:()=>Ie,hexToLong:()=>Sr,indexToLoc:()=>We,inferDtype:()=>_e,inferFromImplicitShape:()=>ge,isBoolean:()=>$e,isFunction:()=>Ae,isInt:()=>ce,isNumber:()=>Ee,isPromise:()=>Ve,isScalarShape:()=>ue,isString:()=>Ce,isTypedArray:()=>Ne,isValidDtype:()=>ve,locToIndex:()=>Be,makeOnesTypedArray:()=>Me,makeZerosNestedTypedArray:()=>ze,makeZerosTypedArray:()=>Le,nearestDivisor:()=>Re,nearestLargerEven:()=>J,now:()=>Pr,parseAxisParam:()=>ye,randUniform:()=>te,repeatedTry:()=>me,rightPad:()=>fe,shuffle:()=>X,shuffleCombo:()=>Y,sizeFromShape:()=>oe,sizeToSquarishShape:()=>pe,squeezeShape:()=>be,sum:()=>ee,swap:()=>Q,tanh:()=>he,toNestedArray:()=>Oe,toTypedArray:()=>zr});var t={};n.r(t),n.d(t,{assertTypesMatch:()=>ds,getTensorsInContainer:()=>ms,isTensorInList:()=>fs,makeTypesMatch:()=>ps});var a={};n.r(a),n.d(a,{isBrowser:()=>Ts,isMobile:()=>Ss,mockIsMobile:()=>Ns});var r={};n.r(r),n.d(r,{browserFiles:()=>Vi,browserHTTPRequest:()=>Zi,concatenateArrayBuffers:()=>Hs,copyModel:()=>Ai,decodeWeights:()=>Ws,encodeWeights:()=>Bs,fromMemory:()=>to,fromMemorySync:()=>no,getLoadHandlers:()=>ai,getModelArtifactsForJSON:()=>Xs,getModelArtifactsForJSONSync:()=>Ks,getModelArtifactsInfoForJSON:()=>Ys,getSaveHandlers:()=>ni,getWeightSpecs:()=>Zs,http:()=>Yi,isHTTPScheme:()=>Ki,listModels:()=>Ei,loadWeights:()=>Hi,moveModel:()=>Ri,registerLoadRouter:()=>ti,registerSaveRouter:()=>ei,removeModel:()=>_i,weightsLoaderFactory:()=>ji,withSaveHandler:()=>ao,withSaveHandlerSync:()=>ro});var s={};n.r(s),n.d(s,{confusionMatrix:()=>Fo});var i={};n.r(i),n.d(i,{assertAndGetBroadcastShape:()=>Mo,getBroadcastDims:()=>Do,getReductionAxes:()=>Oo});var o={};n.r(o),n.d(o,{fromPixels:()=>Vo,fromPixelsAsync:()=>Bo,toPixels:()=>Wo});var u={};n.r(u),n.d(u,{prepareAndValidate:()=>Uo});var l={};n.r(l),n.d(l,{calculateShapes:()=>jo,validateInput:()=>Ho,validateUpdateShape:()=>Go});var c={};n.r(c),n.d(c,{assertParamsValid:()=>Xo,computeFlatOffset:()=>uu,computeOutShape:()=>Zo,getNormalizedAxes:()=>tu,isSliceContinous:()=>ou,maskToAxes:()=>Yo,parseSliceParams:()=>lu,sliceInfo:()=>cu,startForAxis:()=>su,startIndicesWithElidedDims:()=>nu,stopForAxis:()=>iu,stopIndicesWithElidedDims:()=>au,stridesForAxis:()=>ru,stridesWithElidedDims:()=>Jo});var h={};n.r(h),n.d(h,{Serializable:()=>pu,SerializationMap:()=>du,registerClass:()=>fu});var p={};n.r(p),n.d(p,{TEST_EPSILON_FLOAT16:()=>gu,createVideoElement:()=>Cu,encodeStrings:()=>Tu,expectArrayBuffersEqual:()=>Su,expectArraysClose:()=>yu,expectArraysEqual:()=>ku,expectNumbersClose:()=>vu,expectPromiseToFail:()=>wu,expectValuesInRange:()=>Nu,play:()=>$u,testEpsilon:()=>bu});var d={};n.r(d),n.d(d,{conv2d:()=>td,depthwiseConv2d:()=>rd,matMul:()=>sd});var f={};n.r(f),n.d(f,{collectGatherOpShapeInfo:()=>hm,computeOutShape:()=>cm,segOpComputeOptimalWindowSize:()=>lm});var m={};n.r(m),n.d(m,{ERF_A1:()=>Cf,ERF_A2:()=>$f,ERF_A3:()=>Ef,ERF_A4:()=>_f,ERF_A5:()=>Af,ERF_P:()=>Tf,PARALLELIZE_THRESHOLD:()=>gf,RowPartitionType:()=>hf,SELU_SCALE:()=>Sf,SELU_SCALEALPHA:()=>Nf,applyActivation:()=>Qp,assertAndGetBroadcastShape:()=>Mo,assertAxesAreInnerMostDims:()=>Tc,assertParamsConsistent:()=>lf,assignToTypedArray:()=>Lf,axesAreInnerMostDims:()=>vc,calculateShapes:()=>jo,checkEinsumDimSizes:()=>jf,checkPadOnDimRoundingMode:()=>_l,combineLocations:()=>Ic,combineRaggedTensorToTensorShapes:()=>pf,complexWithEvenIndex:()=>Df,complexWithOddIndex:()=>Of,computeConv2DInfo:()=>wl,computeConv3DInfo:()=>kl,computeDefaultPad:()=>vl,computeDilation2DInfo:()=>yl,computeOptimalWindowSize:()=>yf,computeOutAndReduceShapes:()=>Nc,computeOutShape:()=>cf,computePool2DInfo:()=>bl,computePool3DInfo:()=>xl,convertConv2DDataFormat:()=>El,decodeEinsumEquation:()=>Gf,eitherStridesOrDilationsAreOne:()=>$l,expandShapeToKeepDim:()=>Sc,exponent:()=>Pf,exponents:()=>zf,fromStringArrayToUint8:()=>dm,fromUint8ToStringArray:()=>pm,getAxesPermutation:()=>Cc,getBroadcastDims:()=>Do,getComplexWithIndex:()=>Mf,getEinsumComputePath:()=>qf,getEinsumPermutation:()=>Hf,getFusedBiasGradient:()=>Jp,getFusedDyActivation:()=>Zp,getImageCenter:()=>bf,getInnerMostAxes:()=>Ec,getPermuted:()=>wf,getRaggedRank:()=>ff,getReductionAxes:()=>Oo,getReshaped:()=>xf,getReshapedPermuted:()=>kf,getRowPartitionTypesHelper:()=>df,getSliceBeginCoords:()=>vf,getSliceSize:()=>If,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>Zf,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Jf,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>Qf,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>nm,getSparseReshapeInputOutputMismatchErrorMessage:()=>rm,getSparseReshapeInputOutputMultipleErrorMessage:()=>am,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>em,getSparseReshapeNegativeOutputDimErrorMessage:()=>tm,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>um,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>sm,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>im,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>om,getUndoAxesPermutation:()=>$c,isIdentityPermutation:()=>Kf,log:()=>hr,mergeRealAndImagArrays:()=>Rf,prepareAndValidate:()=>Uo,prepareSplitSize:()=>Yf,segment_util:()=>f,shouldFuse:()=>ed,slice_util:()=>c,splitRealAndImagArrays:()=>Ff,tupleValuesAreOne:()=>Cl,upcastType:()=>cs,validateDefaultValueShape:()=>mf,validateInput:()=>Ho,validateUpdateShape:()=>Go,warn:()=>cr});var g={};n.r(g),n.d(g,{nonMaxSuppressionV3Impl:()=>bd,nonMaxSuppressionV4Impl:()=>xd,nonMaxSuppressionV5Impl:()=>wd,whereImpl:()=>Pp});var y={};n.r(y),n.d(y,{maxNorm:()=>Hb,minMaxNorm:()=>Kb,nonNeg:()=>qb,unitNorm:()=>jb});var b={};n.r(b),n.d(b,{constant:()=>Zb,glorotNormal:()=>rx,glorotUniform:()=>ax,heNormal:()=>sx,heUniform:()=>ix,identity:()=>tx,leCunNormal:()=>ox,leCunUniform:()=>ux,ones:()=>Yb,orthogonal:()=>lx,randomNormal:()=>Qb,randomUniform:()=>Jb,truncatedNormal:()=>ex,varianceScaling:()=>nx,zeros:()=>Xb});var x={};n.r(x),n.d(x,{Layer:()=>Nb,RNN:()=>kk,RNNCell:()=>vk,activation:()=>Uv,add:()=>Jv,alphaDropout:()=>VI,average:()=>Qv,averagePooling1d:()=>uI,averagePooling2d:()=>hI,averagePooling3d:()=>fI,avgPool1d:()=>lI,avgPool2d:()=>pI,avgPool3d:()=>mI,avgPooling1d:()=>cI,avgPooling2d:()=>dI,avgPooling3d:()=>gI,batchNormalization:()=>sI,bidirectional:()=>DI,concatenate:()=>eI,conv1d:()=>Dv,conv2d:()=>Ov,conv2dTranspose:()=>Mv,conv3d:()=>Lv,conv3dTranspose:()=>zv,convLstm2d:()=>_I,convLstm2dCell:()=>AI,cropping2D:()=>Bv,dense:()=>Gv,depthwiseConv2d:()=>Vv,dot:()=>rI,dropout:()=>Hv,elu:()=>$v,embedding:()=>Zv,flatten:()=>qv,gaussianDropout:()=>WI,gaussianNoise:()=>BI,globalAveragePooling1d:()=>yI,globalAveragePooling2d:()=>bI,globalMaxPool1d:()=>MI,globalMaxPool2d:()=>LI,globalMaxPooling1d:()=>xI,globalMaxPooling2d:()=>wI,gru:()=>NI,gruCell:()=>SI,input:()=>vw,inputLayer:()=>Cv,layerNormalization:()=>iI,leakyReLU:()=>_v,lstm:()=>TI,lstmCell:()=>CI,masking:()=>UI,maxPool1d:()=>zI,maxPool2d:()=>PI,maxPooling1d:()=>kI,maxPooling2d:()=>vI,maxPooling3d:()=>II,maximum:()=>tI,minimum:()=>nI,multiply:()=>aI,permute:()=>Yv,prelu:()=>Av,reLU:()=>Ev,repeatVector:()=>Kv,rescaling:()=>GI,reshape:()=>Xv,rnn:()=>RI,separableConv2d:()=>Pv,simpleRNN:()=>$I,simpleRNNCell:()=>EI,softmax:()=>Rv,spatialDropout1d:()=>jv,stackedRNNCells:()=>FI,thresholdedReLU:()=>Fv,timeDistributed:()=>OI,upSampling2d:()=>Wv,zeroPadding2d:()=>oI});var w={};n.r(w),n.d(w,{MAPE:()=>tN,MSE:()=>rN,binaryAccuracy:()=>HI,binaryCrossentropy:()=>jI,categoricalAccuracy:()=>KI,categoricalCrossentropy:()=>XI,cosineProximity:()=>JI,mape:()=>nN,meanAbsoluteError:()=>QI,meanAbsolutePercentageError:()=>eN,meanSquaredError:()=>aN,mse:()=>sN,precision:()=>YI,recall:()=>ZI,sparseCategoricalAccuracy:()=>qI});var k={};n.r(k),n.d(k,{modelFromJSON:()=>yw});var v={};n.r(v),n.d(v,{l1:()=>oN,l1l2:()=>iN,l2:()=>uN});var I={};n.r(I),n.d(I,{json:()=>CN});var N={};n.r(N),n.d(N,{json:()=>$N});var S={};n.r(S),n.d(S,{json:()=>EN});var T={};n.r(T),n.d(T,{json:()=>_N});var C={};n.r(C),n.d(C,{json:()=>AN});var $={};n.r($),n.d($,{json:()=>RN});var E={};n.r(E),n.d(E,{json:()=>FN});var _={};n.r(_),n.d(_,{json:()=>DN});var A={};n.r(A),n.d(A,{json:()=>ON});var R={};n.r(R),n.d(R,{json:()=>MN});var F={};n.r(F),n.d(F,{json:()=>LN});var D={};n.r(D),n.d(D,{json:()=>zN});var O={};n.r(O),n.d(O,{json:()=>PN});var M={};n.r(M),n.d(M,{json:()=>BN});var L={};n.r(L),n.d(L,{json:()=>WN});var z={};n.r(z),n.d(z,{json:()=>VN});var P={};n.r(P),n.d(P,{json:()=>UN});var B={};n.r(B),n.d(B,{json:()=>GN});var W={};n.r(W),n.d(W,{json:()=>HN});var V={};n.r(V),n.d(V,{OP_SCOPE_SUFFIX:()=>Fs,abs:()=>Ju,acos:()=>sl,acosh:()=>il,add:()=>_u,addN:()=>ol,all:()=>ul,any:()=>ll,argMax:()=>cl,argMin:()=>hl,asin:()=>pl,asinh:()=>dl,atan:()=>fl,atan2:()=>ml,atanh:()=>gl,avgPool:()=>Rl,avgPool3d:()=>Fl,basicLSTMCell:()=>zl,batchNorm:()=>Bl,batchNorm2d:()=>Wl,batchNorm3d:()=>Vl,batchNorm4d:()=>Ul,batchToSpaceND:()=>Pl,bincount:()=>Gl,booleanMaskAsync:()=>Wp,broadcastArgs:()=>Hl,broadcastTo:()=>jl,buffer:()=>Oi,cast:()=>Mi,ceil:()=>ql,clipByValue:()=>Kl,clone:()=>Li,complex:()=>Os,concat:()=>Dl,concat1d:()=>Xl,concat2d:()=>Yl,concat3d:()=>Zl,concat4d:()=>Jl,conv1d:()=>ec,conv2d:()=>Ql,conv2dTranspose:()=>nc,conv3d:()=>ac,conv3dTranspose:()=>sc,cos:()=>ic,cosh:()=>oc,cosineWindow:()=>Kp,cumprod:()=>uc,cumsum:()=>lc,denseBincount:()=>cc,depthToSpace:()=>hc,depthwiseConv2d:()=>pc,diag:()=>dc,dilation2d:()=>fc,div:()=>Ru,divNoNan:()=>yc,dot:()=>bc,dropout:()=>jp,einsum:()=>xc,elu:()=>wc,enclosingPowerOfTwo:()=>qp,equal:()=>mc,erf:()=>kc,euclideanNorm:()=>Oc,exp:()=>Mc,expandDims:()=>Lc,expm1:()=>zc,eye:()=>Bc,fft:()=>gp,fill:()=>qu,floor:()=>Wc,floorDiv:()=>Au,fused:()=>d,gather:()=>Vc,gatherND:()=>Hp,greater:()=>Uc,greaterEqual:()=>Gc,ifft:()=>yp,imag:()=>Eo,image:()=>ef,inTopKAsync:()=>Xp,irfft:()=>bp,isFinite:()=>Hc,isInf:()=>jc,isNaN:()=>qc,leakyRelu:()=>Kc,less:()=>Xc,lessEqual:()=>Yc,linalg:()=>tf,linspace:()=>Zc,localResponseNormalization:()=>Jc,log:()=>Qc,log1p:()=>eh,logSigmoid:()=>nh,logSoftmax:()=>ah,logSumExp:()=>rh,logicalAnd:()=>sh,logicalNot:()=>ih,logicalOr:()=>oh,logicalXor:()=>uh,losses:()=>nf,lowerBound:()=>hh,matMul:()=>so,max:()=>_c,maxPool:()=>ph,maxPool3d:()=>dh,maxPoolWithArgmax:()=>fh,maximum:()=>Qu,mean:()=>mh,meshgrid:()=>bh,min:()=>Ac,minimum:()=>xh,mirrorPad:()=>wh,mod:()=>kh,moments:()=>vh,movingAverage:()=>Vp,mul:()=>Fu,multiRNNCell:()=>Ih,multinomial:()=>Nh,neg:()=>_o,norm:()=>Dc,notEqual:()=>Sh,oneHot:()=>io,ones:()=>yh,onesLike:()=>Th,op:()=>Ds,outerProduct:()=>Ch,pad:()=>$h,pad1d:()=>Eh,pad2d:()=>_h,pad3d:()=>Ah,pad4d:()=>Rh,pool:()=>Dh,pow:()=>Xu,prelu:()=>Oh,print:()=>zi,prod:()=>Mh,raggedGather:()=>Lh,raggedTensorToTensor:()=>zh,rand:()=>Ph,randomGamma:()=>Gh,randomNormal:()=>Hh,randomStandardNormal:()=>jh,randomUniform:()=>qh,range:()=>Kh,real:()=>Ao,reciprocal:()=>Xh,relu:()=>Yh,relu6:()=>Zh,reshape:()=>Al,reverse:()=>Jh,reverse1d:()=>Qh,reverse2d:()=>ep,reverse3d:()=>tp,reverse4d:()=>np,rfft:()=>wp,round:()=>ap,rsqrt:()=>rp,scalar:()=>Gu,scatterND:()=>Up,searchSorted:()=>ch,selu:()=>sp,separableConv2d:()=>ip,setdiff1dAsync:()=>op,sigmoid:()=>Ol,sign:()=>up,signal:()=>Qd,sin:()=>lp,sinh:()=>cp,slice:()=>Ml,slice1d:()=>hp,slice2d:()=>pp,slice3d:()=>dp,slice4d:()=>fp,softmax:()=>mp,softplus:()=>th,spaceToBatchND:()=>Fh,sparse:()=>af,sparseToDense:()=>Gp,spectral:()=>Jd,split:()=>xp,sqrt:()=>Du,square:()=>Ou,squaredDifference:()=>kp,squeeze:()=>vp,stack:()=>Ip,step:()=>Np,stridedSlice:()=>Sp,string:()=>rf,sub:()=>Yu,sum:()=>Rc,tan:()=>Tp,tanh:()=>Ll,tensor:()=>Ls,tensor1d:()=>Cp,tensor2d:()=>$p,tensor3d:()=>Lo,tensor4d:()=>Ep,tensor5d:()=>_p,tensor6d:()=>Ap,tile:()=>Pc,topk:()=>Rp,transpose:()=>Ro,truncatedNormal:()=>Fp,unique:()=>Dp,unsortedSegmentSum:()=>Op,unstack:()=>Mp,upperBound:()=>Lp,variable:()=>zp,where:()=>gc,whereAsync:()=>Bp,zeros:()=>gh,zerosLike:()=>Mu});var U={};n.r(U),n.d(U,{CSVDataset:()=>kT,Dataset:()=>lT,FileDataSource:()=>FT,TextLineDataset:()=>fT,URLDataSource:()=>DT,array:()=>hT,csv:()=>OT,func:()=>MT,generator:()=>LT,microphone:()=>PT,version_data:()=>BT,webcam:()=>zT,zip:()=>pT});var G={};n.r(G),n.d(G,{mx:()=>kC,XI:()=>d$,Nk:()=>f$,ct:()=>gC,YG:()=>y$,hH:()=>I$,z3:()=>iE,sG:()=>yE,uM:()=>vE,vS:()=>PE,qB:()=>qE,GG:()=>XE,lg:()=>e_,rq:()=>ZE,cu:()=>d_,WR:()=>c_,GE:()=>g_,px:()=>b_,jC:()=>F_,He:()=>M_,hE:()=>j_,BF:()=>J$,Dk:()=>nA,cl:()=>cA,_B:()=>IA,ub:()=>TA,Ku:()=>RA,qy:()=>DA,Zy:()=>jA,bu:()=>XA,zv:()=>oC,dH:()=>_C,HS:()=>l$,yH:()=>mR,l3:()=>yR,z9:()=>xR,x6:()=>NR,eW:()=>FR,GK:()=>MR,SP:()=>PR,f6:()=>WR,dl:()=>$E,Dw:()=>jR,xT:()=>YR,_X:()=>LC,wz:()=>aF});var H={};n.r(H),n.d(H,{Abs:()=>Ze,Acos:()=>Je,Acosh:()=>Qe,AdadeltaOptimizer:()=>ju,AdagradOptimizer:()=>Ku,AdamOptimizer:()=>Zu,AdamaxOptimizer:()=>el,Add:()=>et,AddN:()=>tt,All:()=>nt,Any:()=>at,ArgMax:()=>rt,ArgMin:()=>st,Asin:()=>it,Asinh:()=>ot,Atan:()=>ut,Atan2:()=>ct,Atanh:()=>lt,AvgPool:()=>ht,AvgPool3D:()=>dt,AvgPool3DGrad:()=>ft,AvgPoolGrad:()=>pt,BatchMatMul:()=>mt,BatchToSpaceND:()=>gt,Bincount:()=>yt,BroadcastArgs:()=>xt,BroadcastTo:()=>bt,Callback:()=>lN,CallbackList:()=>fx,Cast:()=>wt,Ceil:()=>kt,ClipByValue:()=>vt,Complex:()=>It,ComplexAbs:()=>Nt,Concat:()=>St,Conv2D:()=>Tt,Conv2DBackpropFilter:()=>Ct,Conv2DBackpropInput:()=>$t,Conv3D:()=>Et,Conv3DBackpropFilterV2:()=>_t,Conv3DBackpropInputV2:()=>At,Cos:()=>Rt,Cosh:()=>Ft,CropAndResize:()=>Mt,Cumprod:()=>Dt,Cumsum:()=>Ot,CustomCallback:()=>yx,DataStorage:()=>j,DenseBincount:()=>Lt,DepthToSpace:()=>zt,DepthwiseConv2dNative:()=>Pt,DepthwiseConv2dNativeBackpropFilter:()=>Bt,DepthwiseConv2dNativeBackpropInput:()=>Wt,Diag:()=>Vt,Dilation2D:()=>Ut,Dilation2DBackpropFilter:()=>Ht,Dilation2DBackpropInput:()=>Gt,ENV:()=>Ke,EarlyStopping:()=>pN,Einsum:()=>qt,Elu:()=>Kt,EluGrad:()=>Xt,Environment:()=>Ge,Equal:()=>Zt,Erf:()=>Yt,Exp:()=>Jt,ExpandDims:()=>Qt,Expm1:()=>en,FFT:()=>tn,Fill:()=>nn,FlipLeftRight:()=>an,Floor:()=>rn,FloorDiv:()=>sn,FromPixels:()=>sr,FusedBatchNorm:()=>on,FusedConv2D:()=>ur,FusedDepthwiseConv2D:()=>lr,GatherNd:()=>ln,GatherV2:()=>un,GraphModel:()=>_S,Greater:()=>cn,GreaterEqual:()=>hn,History:()=>gx,IFFT:()=>dn,Identity:()=>pn,Imag:()=>fn,InputSpec:()=>xb,IsFinite:()=>mn,IsInf:()=>gn,IsNan:()=>yn,KernelBackend:()=>q,LRN:()=>_n,LRNGrad:()=>An,LayerVariable:()=>gb,LayersModel:()=>mw,LeakyRelu:()=>bn,Less:()=>xn,LessEqual:()=>wn,LinSpace:()=>kn,Log:()=>vn,Log1p:()=>In,LogSoftmax:()=>$n,LogicalAnd:()=>Nn,LogicalNot:()=>Sn,LogicalOr:()=>Tn,LogicalXor:()=>Cn,LowerBound:()=>En,Max:()=>Rn,MaxPool:()=>Dn,MaxPool3D:()=>Mn,MaxPool3DGrad:()=>Ln,MaxPoolGrad:()=>On,MaxPoolWithArgmax:()=>zn,Maximum:()=>Fn,Mean:()=>Pn,Min:()=>Bn,Minimum:()=>Wn,MirrorPad:()=>Vn,Mod:()=>Un,MomentumOptimizer:()=>nl,Multinomial:()=>Gn,Multiply:()=>Hn,Neg:()=>jn,NonMaxSuppressionV3:()=>Kn,NonMaxSuppressionV4:()=>Xn,NonMaxSuppressionV5:()=>Yn,NotEqual:()=>qn,OP_SCOPE_SUFFIX:()=>Fs,OneHot:()=>Jn,OnesLike:()=>Zn,Optimizer:()=>Hu,OptimizerConstructors:()=>rl,Pack:()=>Qn,PadV2:()=>ea,Pool:()=>ta,Pow:()=>na,Prelu:()=>aa,Prod:()=>ra,RMSPropOptimizer:()=>al,RNN:()=>kk,RaggedGather:()=>sa,RaggedTensorToTensor:()=>ia,Range:()=>oa,Rank:()=>rs,Real:()=>ua,RealDiv:()=>jt,Reciprocal:()=>la,Reduction:()=>Od,Relu:()=>ca,Relu6:()=>ga,Reshape:()=>ha,ResizeBilinear:()=>fa,ResizeBilinearGrad:()=>ma,ResizeNearestNeighbor:()=>pa,ResizeNearestNeighborGrad:()=>da,Reverse:()=>ya,RotateWithOffset:()=>ir,Round:()=>ba,Rsqrt:()=>xa,SGDOptimizer:()=>tl,ScatterNd:()=>wa,SearchSorted:()=>ka,Select:()=>va,Selu:()=>Ia,Sequential:()=>bw,Sigmoid:()=>$a,Sign:()=>Ca,Sin:()=>Sa,Sinh:()=>Ta,Slice:()=>Na,Softmax:()=>Da,Softplus:()=>Ea,SpaceToBatchND:()=>Ra,SparseFillEmptyRows:()=>Oa,SparseReshape:()=>Ma,SparseSegmentMean:()=>La,SparseSegmentSum:()=>za,SparseToDense:()=>Pa,SplitV:()=>Fa,Sqrt:()=>_a,Square:()=>Wa,SquaredDifference:()=>Ba,Step:()=>rr,StridedSlice:()=>Va,StringNGrams:()=>Ua,StringSplit:()=>Ga,StringToHashBucketFast:()=>Ha,Sub:()=>ja,Sum:()=>Aa,SymbolicTensor:()=>wb,Tan:()=>qa,Tanh:()=>Ka,Tensor:()=>ts,TensorBuffer:()=>Zr,Tile:()=>Xa,TopK:()=>Ya,Transform:()=>Za,Transpose:()=>Ja,Unique:()=>Qa,Unpack:()=>er,UnsortedSegmentSum:()=>tr,UpperBound:()=>nr,Variable:()=>as,ZerosLike:()=>ar,_FusedMatMul:()=>or,abs:()=>Ju,acos:()=>sl,acosh:()=>il,add:()=>_u,addN:()=>ol,all:()=>ul,any:()=>ll,argMax:()=>cl,argMin:()=>hl,asin:()=>pl,asinh:()=>dl,atan:()=>fl,atan2:()=>ml,atanh:()=>gl,avgPool:()=>Rl,avgPool3d:()=>Fl,backend:()=>Co,backend_util:()=>m,basicLSTMCell:()=>zl,batchNorm:()=>Bl,batchNorm2d:()=>Wl,batchNorm3d:()=>Vl,batchNorm4d:()=>Ul,batchToSpaceND:()=>Pl,bincount:()=>Gl,booleanMaskAsync:()=>Wp,broadcastArgs:()=>Hl,broadcastTo:()=>jl,broadcast_util:()=>i,browser:()=>o,buffer:()=>Oi,callbacks:()=>dN,cast:()=>Mi,ceil:()=>ql,clipByValue:()=>Kl,clone:()=>Li,complex:()=>Os,concat:()=>Dl,concat1d:()=>Xl,concat2d:()=>Yl,concat3d:()=>Zl,concat4d:()=>Jl,constraints:()=>y,conv1d:()=>ec,conv2d:()=>Ql,conv2dTranspose:()=>nc,conv3d:()=>ac,conv3dTranspose:()=>sc,copyRegisteredKernels:()=>kr,cos:()=>ic,cosh:()=>oc,cosineWindow:()=>Kp,cumprod:()=>uc,cumsum:()=>lc,customGrad:()=>Vu,data:()=>U,denseBincount:()=>cc,deprecationWarn:()=>co,depthToSpace:()=>hc,depthwiseConv2d:()=>pc,deregisterOp:()=>xN,device_util:()=>a,diag:()=>dc,dilation2d:()=>fc,disableDeprecationWarnings:()=>lo,dispose:()=>yo,disposeVariables:()=>ho,div:()=>Ru,divNoNan:()=>yc,dot:()=>bc,dropout:()=>jp,einsum:()=>xc,elu:()=>wc,enableDebugMode:()=>uo,enableProdMode:()=>oo,enclosingPowerOfTwo:()=>qp,engine:()=>po,env:()=>je,equal:()=>mc,erf:()=>kc,euclideanNorm:()=>Oc,exp:()=>Mc,expandDims:()=>Lc,expm1:()=>zc,eye:()=>Bc,fft:()=>gp,fill:()=>qu,findBackend:()=>No,findBackendFactory:()=>So,floor:()=>Wc,floorDiv:()=>Au,fused:()=>d,gather:()=>Vc,gatherND:()=>Hp,gather_util:()=>u,getBackend:()=>vo,getGradient:()=>mr,getKernel:()=>fr,getKernelsForBackend:()=>gr,grad:()=>Lu,grads:()=>zu,greater:()=>Uc,greaterEqual:()=>Gc,ifft:()=>yp,imag:()=>Eo,image:()=>ef,inTopKAsync:()=>Xp,initializers:()=>b,input:()=>vw,io:()=>r,irfft:()=>bp,isFinite:()=>Hc,isInf:()=>jc,isNaN:()=>qc,keep:()=>bo,kernel_impls:()=>g,layers:()=>x,leakyRelu:()=>Kc,less:()=>Xc,lessEqual:()=>Yc,linalg:()=>tf,linspace:()=>Zc,loadGraphModel:()=>AS,loadGraphModelSync:()=>RS,loadLayersModel:()=>kw,localResponseNormalization:()=>Jc,log:()=>Qc,log1p:()=>eh,logSigmoid:()=>nh,logSoftmax:()=>ah,logSumExp:()=>rh,logicalAnd:()=>sh,logicalNot:()=>ih,logicalOr:()=>oh,logicalXor:()=>uh,losses:()=>nf,lowerBound:()=>hh,matMul:()=>so,math:()=>s,max:()=>_c,maxPool:()=>ph,maxPool3d:()=>dh,maxPoolWithArgmax:()=>fh,maximum:()=>Qu,mean:()=>mh,memory:()=>fo,meshgrid:()=>bh,metrics:()=>w,min:()=>Ac,minimum:()=>xh,mirrorPad:()=>wh,mod:()=>kh,model:()=>xw,models:()=>k,moments:()=>vh,movingAverage:()=>Vp,mul:()=>Fu,multiRNNCell:()=>Ih,multinomial:()=>Nh,neg:()=>_o,nextFrame:()=>uf,norm:()=>Dc,notEqual:()=>Sh,oneHot:()=>io,ones:()=>yh,onesLike:()=>Th,op:()=>Ds,outerProduct:()=>Ch,pad:()=>$h,pad1d:()=>Eh,pad2d:()=>_h,pad3d:()=>Ah,pad4d:()=>Rh,pool:()=>Dh,pow:()=>Xu,prelu:()=>Oh,print:()=>zi,prod:()=>Mh,profile:()=>mo,raggedGather:()=>Lh,raggedTensorToTensor:()=>zh,rand:()=>Ph,randomGamma:()=>Gh,randomNormal:()=>Hh,randomStandardNormal:()=>jh,randomUniform:()=>qh,range:()=>Kh,ready:()=>ko,real:()=>Ao,reciprocal:()=>Xh,registerBackend:()=>To,registerCallbackConstructor:()=>Iw,registerGradient:()=>br,registerKernel:()=>yr,registerOp:()=>yN,regularizers:()=>v,relu:()=>Yh,relu6:()=>Zh,removeBackend:()=>Io,reshape:()=>Al,reverse:()=>Jh,reverse1d:()=>Qh,reverse2d:()=>ep,reverse3d:()=>tp,reverse4d:()=>np,rfft:()=>wp,round:()=>ap,rsqrt:()=>rp,scalar:()=>Gu,scatterND:()=>Up,scatter_util:()=>l,searchSorted:()=>ch,selu:()=>sp,separableConv2d:()=>ip,sequential:()=>ww,serialization:()=>h,setBackend:()=>wo,setPlatform:()=>$o,setdiff1dAsync:()=>op,sigmoid:()=>Ol,sign:()=>up,signal:()=>Qd,sin:()=>lp,sinh:()=>cp,slice:()=>Ml,slice1d:()=>hp,slice2d:()=>pp,slice3d:()=>dp,slice4d:()=>fp,slice_util:()=>c,softmax:()=>mp,softplus:()=>th,spaceToBatchND:()=>Fh,sparse:()=>af,sparseToDense:()=>Gp,spectral:()=>Jd,split:()=>xp,sqrt:()=>Du,square:()=>Ou,squaredDifference:()=>kp,squeeze:()=>vp,stack:()=>Ip,step:()=>Np,stridedSlice:()=>Sp,string:()=>rf,sub:()=>Yu,sum:()=>Rc,sumOutType:()=>hs,tan:()=>Tp,tanh:()=>Ll,tensor:()=>Ls,tensor1d:()=>Cp,tensor2d:()=>$p,tensor3d:()=>Lo,tensor4d:()=>Ep,tensor5d:()=>_p,tensor6d:()=>Ap,tensor_util:()=>t,test_util:()=>p,tidy:()=>go,tile:()=>Pc,time:()=>xo,topk:()=>Rp,train:()=>sf,transpose:()=>Ro,truncatedNormal:()=>Fp,unique:()=>Dp,unregisterGradient:()=>wr,unregisterKernel:()=>xr,unsortedSegmentSum:()=>Op,unstack:()=>Mp,upcastType:()=>cs,upperBound:()=>Lp,util:()=>e,valueAndGrad:()=>Pu,valueAndGrads:()=>Bu,variable:()=>zp,variableGrads:()=>Wu,version:()=>xV,version_converter:()=>FS,version_core:()=>Eu,version_layers:()=>Zx,where:()=>gc,whereAsync:()=>Bp,zeros:()=>gh,zerosLike:()=>Mu});class j{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class q{refCount(e){return K("refCount")}incRef(e){return K("incRef")}timerAvailable(){return!0}time(e){return K("time")}read(e){return K("read")}readSync(e){return K("readSync")}readToGPU(e,t){return K("readToGPU")}numDataIds(){return K("numDataIds")}disposeData(e,t){return K("disposeData")}write(e,t,n){return K("write")}move(e,t,n,a,r){return K("move")}memory(){return K("memory")}floatPrecision(){return K("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return K("dispose")}}function K(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function X(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,Q(e,t,n)}function Y(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,a=0;for(;n>0;)a=Math.random()*n|0,n--,Q(e,n,a),Q(t,n,a)}function Z(e,t,n){return Math.max(e,Math.min(t,n))}function J(e){return e%2==0?e:e+1}function Q(e,t,n){const a=e[t];e[t]=e[n],e[n]=a}function ee(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function te(e,t){const n=Math.random();return t*n+(1-n)*e}function ne(e,t){let n=0;for(let a=0;a<e.length;a++){const r=Number(e[a])-Number(t[a]);n+=r*r}return n}function ae(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function re(e,t,n=""){ae(le(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function se(e){ae(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function ie(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||Ne(e)&&!n)for(let a=0;a<e.length;++a)ie(e[a],t,n);else t.push(e);return t}function oe(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function ue(e){return 0===e.length}function le(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ce(e){return e%1==0}function he(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function pe(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function de(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return X(t),t}function fe(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function me(e,t=e=>0,n,a=setTimeout){return new Promise(((r,s)=>{let i=0;const o=()=>{if(e())return void r();i++;const u=t(i);null!=n&&i>=n?s():a(o,u)};o()}))}function ge(e,t){let n=1,a=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==a)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${a} and dim ${t}`);a=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===a){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[a]=t/n,r}function ye(e,t){const n=t.length;return ae((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),ae(e.every((e=>ce(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function be(e,t){const n=[],a=[],r=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||r?null:ye(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[i]||s[i]>t)&&1===e[t]&&(n.push(e[t]),a.push(t)),s[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),a.push(t))}return{newShape:n,keptDims:a}}function xe(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function we(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function ke(e,t){for(let n=0;n<e.length;n++){const a=e[n];if(isNaN(a)||!isFinite(a))throw Error(`A tensor of type ${t} being uploaded contains ${a}.`)}}function ve(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function Ie(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function Ne(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function Se(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function Te(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function Ce(e){return"string"==typeof e||e instanceof String}function $e(e){return"boolean"==typeof e}function Ee(e){return"number"==typeof e}function _e(e){return Array.isArray(e)?_e(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":Ee(e)?"float32":Ce(e)?"string":$e(e)?"bool":"float32"}function Ae(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Re(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Fe(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let a=t-3;a>=0;--a)n[a]=n[a+1]*e[a+1];return n}function De(e,t,n,a=!1){const r=new Array;if(1===t.length){const s=t[0]*(a?2:1);for(let t=0;t<s;t++)r[t]=n[e+t]}else{const s=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(a?2:1);for(let t=0;t<s;t++)r[t]=De(e+t*o,i,n,a)}return r}function Oe(e,t,n=!1){if(0===e.length)return t[0];const a=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===a)return[];if(a!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return De(0,e,t,n)}function Me(e,t){const n=Le(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Le(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function ze(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Oe(e,new Float32Array(n));if("int32"===t)return Oe(e,new Int32Array(n));if("bool"===t)return Oe(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function Pe(e){e.forEach((t=>{ae(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Be(e,t,n){if(0===t)return 0;if(1===t)return e[0];let a=e[e.length-1];for(let t=0;t<e.length-1;++t)a+=n[t]*e[t];return a}function We(e,t,n){if(0===t)return[];if(1===t)return[e];const a=new Array(t);for(let t=0;t<a.length-1;++t)a[t]=Math.floor(e/n[t]),e-=a[t]*n[t];return a[a.length-1]=e,a}function Ve(e){return e&&e.then&&"function"==typeof e.then}const Ue="tfjsflags";class Ge{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=He,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(je().getBool("IS_TEST")||je().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];je().getBool("IS_TEST")||je().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Ve(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);Ue in e&&e[Ue].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function He(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function je(){return Ke}let qe,Ke=null;function Xe(){if(null==qe){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}qe=e}return qe}function Ye(e,t){const n=function(){const e=Xe();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const a=t();return n.set(e,a),n.get(e)}}const Ze="Abs",Je="Acos",Qe="Acosh",et="Add",tt="AddN",nt="All",at="Any",rt="ArgMax",st="ArgMin",it="Asin",ot="Asinh",ut="Atan",lt="Atanh",ct="Atan2",ht="AvgPool",pt="AvgPoolGrad",dt="AvgPool3D",ft="AvgPool3DGrad",mt="BatchMatMul",gt="BatchToSpaceND",yt="Bincount",bt="BroadcastTo",xt="BroadcastArgs",wt="Cast",kt="Ceil",vt="ClipByValue",It="Complex",Nt="ComplexAbs",St="Concat",Tt="Conv2D",Ct="Conv2DBackpropFilter",$t="Conv2DBackpropInput",Et="Conv3D",_t="Conv3DBackpropFilterV2",At="Conv3DBackpropInputV2",Rt="Cos",Ft="Cosh",Dt="Cumprod",Ot="Cumsum",Mt="CropAndResize",Lt="DenseBincount",zt="DepthToSpace",Pt="DepthwiseConv2dNative",Bt="DepthwiseConv2dNativeBackpropFilter",Wt="DepthwiseConv2dNativeBackpropInput",Vt="Diag",Ut="Dilation2D",Gt="Dilation2DBackpropInput",Ht="Dilation2DBackpropFilter",jt="RealDiv",qt="Einsum",Kt="Elu",Xt="EluGrad",Yt="Erf",Zt="Equal",Jt="Exp",Qt="ExpandDims",en="Expm1",tn="FFT",nn="Fill",an="FlipLeftRight",rn="Floor",sn="FloorDiv",on="FusedBatchNorm",un="GatherV2",ln="GatherNd",cn="Greater",hn="GreaterEqual",pn="Identity",dn="IFFT",fn="Imag",mn="IsFinite",gn="IsInf",yn="IsNan",bn="LeakyRelu",xn="Less",wn="LessEqual",kn="LinSpace",vn="Log",In="Log1p",Nn="LogicalAnd",Sn="LogicalNot",Tn="LogicalOr",Cn="LogicalXor",$n="LogSoftmax",En="LowerBound",_n="LRN",An="LRNGrad",Rn="Max",Fn="Maximum",Dn="MaxPool",On="MaxPoolGrad",Mn="MaxPool3D",Ln="MaxPool3DGrad",zn="MaxPoolWithArgmax",Pn="Mean",Bn="Min",Wn="Minimum",Vn="MirrorPad",Un="Mod",Gn="Multinomial",Hn="Multiply",jn="Neg",qn="NotEqual",Kn="NonMaxSuppressionV3",Xn="NonMaxSuppressionV4",Yn="NonMaxSuppressionV5",Zn="OnesLike",Jn="OneHot",Qn="Pack",ea="PadV2",ta="Pool",na="Pow",aa="Prelu",ra="Prod",sa="RaggedGather",ia="RaggedTensorToTensor",oa="Range",ua="Real",la="Reciprocal",ca="Relu",ha="Reshape",pa="ResizeNearestNeighbor",da="ResizeNearestNeighborGrad",fa="ResizeBilinear",ma="ResizeBilinearGrad",ga="Relu6",ya="Reverse",ba="Round",xa="Rsqrt",wa="ScatterNd",ka="SearchSorted",va="Select",Ia="Selu",Na="Slice",Sa="Sin",Ta="Sinh",Ca="Sign",$a="Sigmoid",Ea="Softplus",_a="Sqrt",Aa="Sum",Ra="SpaceToBatchND",Fa="SplitV",Da="Softmax",Oa="SparseFillEmptyRows",Ma="SparseReshape",La="SparseSegmentMean",za="SparseSegmentSum",Pa="SparseToDense",Ba="SquaredDifference",Wa="Square",Va="StridedSlice",Ua="StringNGrams",Ga="StringSplit",Ha="StringToHashBucketFast",ja="Sub",qa="Tan",Ka="Tanh",Xa="Tile",Ya="TopK",Za="Transform",Ja="Transpose",Qa="Unique",er="Unpack",tr="UnsortedSegmentSum",nr="UpperBound",ar="ZerosLike",rr="Step",sr="FromPixels",ir="RotateWithOffset",or="_FusedMatMul",ur="FusedConv2D",lr="FusedDepthwiseConv2D";function cr(...e){je().getBool("IS_TEST")||je().getBool("PROD")||console.warn(...e)}function hr(...e){je().getBool("IS_TEST")||je().getBool("PROD")||console.log(...e)}const pr=Ye("kernelRegistry",(()=>new Map)),dr=Ye("gradRegistry",(()=>new Map));function fr(e,t){const n=vr(e,t);return pr.get(n)}function mr(e){return dr.get(e)}function gr(e){const t=pr.entries(),n=[];for(;;){const{done:a,value:r}=t.next();if(a)break;const[s,i]=r,[o]=s.split("_");o===e&&n.push(i)}return n}function yr(e){const{kernelName:t,backendName:n}=e,a=vr(t,n);pr.has(a)&&cr(`The kernel '${t}' for backend '${n}' is already registered`),pr.set(a,e)}function br(e){const{kernelName:t}=e;dr.has(t)&&je().getBool("DEBUG")&&cr(`Overriding the gradient for '${t}'`),dr.set(t,e)}function xr(e,t){const n=vr(e,t);if(!pr.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);pr.delete(n)}function wr(e){if(!dr.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);dr.delete(e)}function kr(e,t){gr(e).forEach((e=>{yr(Object.assign({},e,{backendName:t}))}))}function vr(e,t){return`${t}_${e}`}var Ir=n(570);const Nr=n.n(Ir)()||Ir;function Sr(e){return Nr.fromString(e,!0,16)}const Tr=Sr("c3a5c85c97cb3127"),Cr=Sr("b492b66fbe98f273"),$r=Sr("9ae16a3b2f90404f");function Er(e){return e.xor(e.shru(47))}function _r(e,t,n){const a=e.slice(t,t+n);return Nr.fromBytes(Array.from(a),!0,!0)}function Ar(e,t){return _r(e,t,8)}function Rr(e,t){return _r(e,t,4)}function Fr(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Dr(e,t,n=Sr("9ddfea08eb382d69")){let a=e.xor(t).mul(n);a=a.xor(a.shru(47));let r=t.xor(a).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function Or(e,t,n,a){return function(e,t,n,a,r,s){r=r.add(e),s=Fr(s.add(r).add(a),21);const i=r;return r=(r=r.add(t)).add(n),s=s.add(Fr(r,44)),[r.add(a),s.add(i)]}(Ar(e,t),Ar(e,t+8),Ar(e,t+16),Ar(e,t+24),n,a)}function Mr(e,t=e.length){const n=Nr.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=$r.add(2*t),a=Ar(e,0).add($r),r=Ar(e,t-8);return Dr(Fr(r,37).mul(n).add(a),Fr(a,25).add(r).mul(n),n)}if(t>=4){const n=$r.add(2*t);return Dr(Rr(e,0).shl(3).add(t),Rr(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),a=t+(e[t-1]<<2);return Er($r.mul(n).xor(Tr.mul(a))).mul($r)}return $r}(e,t):function(e,t=e.length){const n=$r.add(2*t),a=Ar(e,0).mul(Cr),r=Ar(e,8),s=Ar(e,t-8).mul(n),i=Ar(e,t-16).mul($r);return Dr(Fr(a.add(r),43).add(Fr(s,30)).add(i),a.add(Fr(r.add($r),18)).add(s),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=$r.add(2*t),a=Ar(e,0).mul($r),r=Ar(e,8),s=Ar(e,t-8).mul(n),i=Ar(e,t-16).mul($r),o=Fr(a.add(r),43).add(Fr(s,30)).add(i),u=Dr(o,a.add(Fr(r.add($r),18)).add(s),n),l=Ar(e,16).mul(n),c=Ar(e,24),h=o.add(Ar(e,t-32)).mul(n),p=u.add(Ar(e,t-24)).mul(n);return Dr(Fr(l.add(c),43).add(Fr(h,30)).add(p),l.add(Fr(c.add(a),18)).add(h),n)}(e,t);let a=n,r=n.mul(Cr).add(113),s=Er(r.mul($r).add(113)).mul($r),i=[Nr.UZERO,Nr.UZERO],o=[Nr.UZERO,Nr.UZERO];a=a.mul($r).add(Ar(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{a=Fr(a.add(r).add(i[0]).add(Ar(e,u+8)),37).mul(Cr),r=Fr(r.add(i[1]).add(Ar(e,u+48)),42).mul(Cr),a=a.xor(o[1]),r=r.add(i[0]).add(Ar(e,u+40)),s=Fr(s.add(o[0]),33).mul(Cr),i=Or(e,u,i[1].mul(Cr),a.add(o[0])),o=Or(e,u+32,s.add(o[1]),r.add(Ar(e,u+16))),[s,a]=[a,s],u+=64}while(u!==l);const h=Cr.add(s.and(255).shl(1));return u=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),a=Fr(a.add(r).add(i[0]).add(Ar(e,u+8)),37).mul(h),r=Fr(r.add(i[1]).add(Ar(e,u+48)),42).mul(h),a=a.xor(o[1].mul(9)),r=r.add(i[0].mul(9).add(Ar(e,u+40))),s=Fr(s.add(o[0]),33).mul(h),i=Or(e,u,i[1].mul(h),a.add(o[0])),o=Or(e,u+32,s.add(o[1]),r.add(Ar(e,u+16))),[s,a]=[a,s],Dr(Dr(i[0],o[0],h).add(Er(r).mul(Tr)).add(s),Dr(i[1],o[1],h).add(a),h)}function Lr(e,t){return"string"===t?Wr(e):zr([e],t)}function zr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=ie(e)),je().getBool("DEBUG")&&ke(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Pr(){return je().platform.now()}function Br(e,t){return je().platform.fetch(e,t)}function Wr(e,t="utf-8"){return t=t||"utf-8",je().platform.encode(e,t)}function Vr(e,t="utf-8"){return t=t||"utf-8",je().platform.decode(e,t)}class Ur{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Hr)}profileKernel(e,t,n){let a;const r=()=>{a=n()};let s;const i=Pr();if(this.backendTimer.timerAvailable())s=this.backendTimer.time(r);else{r();for(const e of a)e.dataSync();s=Promise.resolve({kernelMs:Pr()-i})}if(je().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<a.length;t++){const n=a[t];n.data().then((t=>{Gr(t,n.dtype,e)}))}return{kernelName:e,outputs:a,inputs:t,timeMs:s.then((e=>e.kernelMs)),extraInfo:s.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:a,inputs:r,extraInfo:s}=e;n.forEach((e=>{Promise.all([e.data(),a,s]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function Gr(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const a=e[t];if(isNaN(a)||!isFinite(a))return console.warn(`Found ${a} in the result of '${n}'`),!0}return!1}class Hr{logKernelProfile(e,t,n,a,r,s){const i="number"==typeof a?fe(`${a}ms`,9):a.error,o=fe(e,25),u=t.rank,l=t.size,c=fe(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const a=n.shape||t.shape,r=a.length;h+=`${e}: ${r}D ${r>0?a:""} `}}console.log(`%c${o}\t%c${i}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function jr(e,t,n,a){const r=Fe(t),s=function(e,t,n,a){const r=oe(t),s=a[a.length-1],i=new Array(s).fill(0),o=t.length,u="complex64"===n?Yr(e):e;if(o>1)for(let e=0;e<r/s;e++){const t=e*s;for(let e=0;e<s;e++)i[e]=Math.max(i[e],qr(u[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=Xr(e,t,n,r,s),u=["Tensor"];return a&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${i}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(o.map((e=>"    "+e)).join("\n")),u.join("\n")}function qr(e,t,n){let a;return a=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:Ce(e)?`'${e}'`:"bool"===n?Kr(e):parseFloat(e.toFixed(7)).toString(),fe(a,t)}function Kr(e){return 0===e?"false":"true"}function Xr(e,t,n,a,r,s=!0){const i="complex64"===n?2:1,o=t[0],u=t.length;if(0===u)return"complex64"===n?[qr(Yr(e)[0],0,n)]:"bool"===n?[Kr(e[0])]:[e[0].toString()];if(1===u){if(o>20){const t=3*i;let a=Array.from(e.slice(0,t)),s=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(a=Yr(a),s=Yr(s)),["["+a.map(((e,t)=>qr(e,r[t],n))).join(", ")+", ..., "+s.map(((e,t)=>qr(e,r[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Yr(e):Array.from(e)).map(((e,t)=>qr(e,r[t],n))).join(", ")+"]"]}const l=t.slice(1),c=a.slice(1),h=a[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const a=t*h,s=a+h;p.push(...Xr(e.slice(a,s),l,n,c,r,!1))}p.push("...");for(let t=o-3;t<o;t++){const a=t*h,s=a+h;p.push(...Xr(e.slice(a,s),l,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const a=t*h,s=a+h;p.push(...Xr(e.slice(a,s),l,n,c,r,t===o-1))}const d=2===u?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<u;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(s?"":f),p}function Yr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Zr{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=oe(e),null!=n){const e=n.length;ae(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||we(t,this.size),this.strides=Fe(e)}set(e,...t){0===t.length&&(t=[0]),ae(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Jr().makeTensor(this.values,this.shape,this.dtype)}}let Jr=null,Qr=null,es=null;class ts{constructor(e,t,n,a){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=oe(e),this.strides=Fe(e),this.dataId=n,this.id=a,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Qr.buffer(this.shape,this.dtype,e)}bufferSync(){return Qr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Oe(this.shape,e,"complex64"===this.dtype)}arraySync(){return Oe(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Jr().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Vr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Jr().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Jr().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Vr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Jr().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Jr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Qr.print(this,e)}clone(){return this.throwIfDisposed(),Qr.clone(this)}toString(e=!1){return jr(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Qr.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Jr().makeVariable(this,e,t,n)}}function ns(){return Ye("Tensor",(()=>ts))}Object.defineProperty(ts,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),ns();class as extends ts{constructor(e,t,n,a){super(e.shape,e.dtype,e.dataId,a),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!le(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Jr().disposeTensor(this),this.dataId=e.dataId,Jr().incRef(this,null)}dispose(){Jr().disposeVariable(this),this.isDisposedInternal=!0}}var rs,ss,is,os,us;Object.defineProperty(as,Symbol.hasInstance,{value:e=>e instanceof ts&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(rs||(rs={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(ss||(ss={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(is||(is={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(os||(os={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(us||(us={}));const ls={float32:os,int32:ss,bool:is,complex64:us};function cs(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return ls[e][t]}function hs(e){return cs(e,"int32")}function ps(e,t){if(e.dtype===t.dtype)return[e,t];const n=cs(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function ds(e,t){ae(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function fs(e,t){return t.some((t=>t.id===e.id))}function ms(e){const t=[];return gs(e,t,new Set),t}function gs(e,t,n){if(null==e)return;if(e instanceof ts)return void t.push(e);if(a=e,!Array.isArray(a)&&"object"!=typeof a)return;var a;const r=e;for(const e in r){const a=r[e];n.has(a)||(n.add(a),gs(a,t,n))}}function ys(e){return null!=e.kernelName}class bs{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class xs{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new bs}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(cr(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Ur(this.backendInstance),!0}setupRegisteredKernels(){gr(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){gr(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof q||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,a=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,cr(`Initialization of backend ${e} failed`),cr(n.stack||n.message)),!1)));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}}catch(t){return cr(`Initialization of backend ${e} failed`),cr(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:a,asyncInit:r}=this.initializeBackend(n);if(r||a)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),a=n.backend,r=this.readSync(t),s=a.refCount(t);a.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,a=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");a=e}return this.scopedRun((()=>this.startScope(a)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return xs.nextTensorId++}nextVariableId(){return xs.nextVariableId++}clone(e){const t=ks.runKernel(pn,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return ks.runKernel(wt,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==fr(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const a=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=a-t-r-s;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const a=this.isTapeOn(),r=this.state.numBytes,s=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=ys(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(ys(e)){const{kernelName:t,inputs:r,attrs:s}=e;null==this.backendName&&this.backend;const u=fr(t,this.backendName);ae(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=u.kernelFunc({inputs:r,attrs:s,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const l=i.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(a){const e=this.getTensorsForGradient(t,r,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,r=e=>{a&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,h=ys(e)?null:e.backwardsFunc;let p;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(u,l,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()})),a&&this.addTapeNode(u,l,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map((e=>null!=l[e]?l[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const a=mr(e);if(null!=a){const e=a.inputsToSave||[],r=a.outputsToSave||[];let s;a.saveAllInputs?(ae(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),s=Object.keys(t).map((e=>t[e]))):s=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return s.concat(i)}return[]}makeTensor(e,t,n,a){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",a=a||this.backend;let r=e;"string"===n&&Ce(e[0])&&(r=e.map((e=>Wr(e))));const s=a.write(r,t,n),i=new ts(t,n,s,this.nextTensorId());if(this.trackTensor(i,a),"string"===n){const e=this.state.tensorInfo.get(s),t=Te(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,a){const r={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(r,a)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:a,dtype:r}=e,s=new ts(a,r,n,this.nextTensorId());return this.trackTensor(s,t),s}makeVariable(e,t=!0,n,a){n=n||this.nextVariableId().toString(),null!=a&&a!==e.dtype&&(e=e.cast(a));const r=new as(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*Se(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof as||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*Se(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,a,r,s){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=mr(e);null!=o&&(a=o.gradFunc),null!=a&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],a=Le(e.size,e.dtype);return this.makeTensor(a,e.shape,e.dtype)}return e})),a(e.length>1?e:e[0],r,s))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=ms(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==a.id||this.track(e)}))}gradients(e,t,n,a=!1){if(ae(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));ae(r instanceof ts,(()=>"The result y returned by f() must be a tensor."));const s=function(e,t,n){const a={},r={};for(let e=0;e<t.length;e++)a[t[e].id]=!0;for(let n=0;n<e.length;n++){const s=e[n],i=s.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(a[n.id]){s.outputs.forEach((e=>a[e.id]=!0)),o=!0,r[s.id]=!0;break}if(o)break}}const s={};s[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],a=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(const e in a)s[a[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];a[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!a&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=Me(oe(e),"float32");return ks.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,a){for(let r=t.length-1;r>=0;r--){const s=t[r],i=[];if(s.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const o=s.gradient(i);for(const t in s.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=s.inputs[t];if(!le(r.shape,i.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=a(t,r),t.dispose()}}}}(e,s,(e=>this.tidy(e)),vs);const a=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:a}}))}customGrad(e){return ae(Ae(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;ae(t.every((e=>e instanceof ts)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const a={};return t.forEach(((e,t)=>{a[t]=e})),this.runKernelFunc({forwardFunc:(a,r)=>(n=e(...t,r),ae(n.value instanceof ts,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),ae(Ae(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,a)=>{const r=n.gradFunc(e,a),s=Array.isArray(r)?r:[r];ae(s.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),ae(s.every((e=>e instanceof ts)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return s.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:a})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Pr(),n=await this.backend.time(e);return n.wallMs=Pr()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new bs;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function ws(){const e=Xe();if(null==e._tfengine){const t=new Ge(e);e._tfengine=new xs(t)}var t;return t=e._tfengine.ENV,Ke=t,Jr=()=>e._tfengine,e._tfengine}xs.nextTensorId=0,xs.nextVariableId=0;const ks=ws();function vs(e,t){const n={a:e,b:t};return ks.runKernel(et,n)}let Is;function Ns(e){Is=e}function Ss(e){if(void 0!==Is)return Is;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Ts(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Cs=je();function $s(e,t){let n=e;if(Ne(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const a=[];for(;Array.isArray(n)||Ne(n)&&"string"!==t;)a.push(n.length),n=n[0];return Array.isArray(e)&&je().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Es(e,a,[]),a}function Es(e,t,n){if(n=n||[],!Array.isArray(e)&&!Ne(e))return void ae(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));ae(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),ae(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const a=t.slice(1);for(let t=0;t<e.length;++t)Es(e[t],a,n.concat(t))}function _s(e,t,n,a){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${a}' must be ${e} tensor, but got ${t} tensor`)}}function As(e,t,n,a="numeric"){if(e instanceof ts)return _s(a,e.dtype,t,n),e;let r=_e(e);if("string"!==r&&["bool","int32","float32"].indexOf(a)>=0&&(r=a),_s(a,r,t,n),null==e||!Ne(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const a=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${a}'`)}const s=$s(e,r);Ne(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?zr(e,r):ie(e,[],!0);return ks.makeTensor(i,s,r)}function Rs(e,t,n,a="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>As(e,`${t}[${r}]`,n,a)))}Cs.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Cs.registerFlag("IS_BROWSER",(()=>Ts())),Cs.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Cs.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Cs.registerFlag("PROD",(()=>!1)),Cs.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Cs.getBool("DEBUG"))),Cs.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Cs.registerFlag("IS_TEST",(()=>!1)),Cs.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Cs.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Cs.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),Cs.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),Cs.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const Fs="__op";function Ds(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const a=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Fs;const r=(...e)=>{ks.startScope(n);try{const t=a(...e);return Ve(t)&&console.error("Cannot return a Promise inside of tidy."),ks.endScope(t),t}catch(e){throw ks.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const Os=Ds({complex_:function(e,t){const n=As(e,"real","complex"),a=As(t,"imag","complex");re(n.shape,a.shape,`real and imag shapes, ${n.shape} and ${a.shape}, must match in call to tf.complex().`);const r={real:n,imag:a};return ks.runKernel(It,r)}});function Ms(e,t,n,a){if(null==a&&(a=_e(e)),"complex64"===a)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Ne(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Pe(t);const e=oe(t),a=oe(n);ae(e===a,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${a}`));for(let e=0;e<n.length;++e){const a=n[e],r=e!==n.length-1||a!==oe(t.slice(e));ae(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return Ne(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==a?zr(e,a):ie(e,[],!0),ks.makeTensor(e,t,a)}function Ls(e,t,n){return Ms(e,t,$s(e,n),n)}const zs={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8},Ps=4;async function Bs(e,t){const n=[],a=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let s=0;s<r.length;++s){const i=r[s],o=Array.isArray(e)?e[s].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+Ps*t.length,a=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],s=new Uint8Array(new Uint32Array([n.length]).buffer);a.set(s,r),r+=Ps,a.set(n,r),r+=n.length}e(a)}));a.push(e)}else a.push(o.data());null!=t&&(u.group=t),n.push(u)}return{data:Vs(await Promise.all(a)),specs:n}}function Ws(e,t){const n={};let a,r=0;for(const s of t){const t=s.name,i=s.dtype,o=s.shape,u=oe(o);let l;if("quantization"in s){const n=s.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${s.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${s.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${s.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=zs[n.dtype],c=e.slice(r,r+u*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===a&&(a=Js()),l=a(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];l[e]=Math.round(t*n.scale+n.min)}}r+=u*o}else if("string"===i){const t=oe(s.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+Ps))[0];r+=Ps;const n=new Uint8Array(e.slice(r,r+t));l.push(n),r+=t}}else{const a=zs[i],s=e.slice(r,r+u*a);if("float32"===i)l=new Float32Array(s);else if("int32"===i)l=new Int32Array(s);else if("bool"===i)l=new Uint8Array(s);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{l=new Float32Array(s);const e=new Float32Array(l.length/2),a=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],a[t]=l[2*t+1];const r=Ls(e,o,"float32"),i=Ls(a,o,"float32");n[t]=Os(r,i),r.dispose(),i.dispose()}}r+=u*a}"complex64"!==i&&(n[t]=Ls(l,o,i))}return n}function Vs(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const a=new Uint8Array(t);let r=0;return n.forEach((e=>{a.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),a.buffer}const Us="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Gs(e){return Us?Buffer.byteLength(e):new Blob([e]).size}function Hs(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let a=0;return e.forEach((e=>{n.set(new Uint8Array(e),a),a+=e.byteLength})),n.buffer}function js(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function qs(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Ks(e,t,n){const a={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(a.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");a.weightSpecs=t,a.weightData=n}return null!=e.signature&&(a.signature=e.signature),null!=e.userDefinedMetadata&&(a.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(a.modelInitializer=e.modelInitializer),a}async function Xs(e,t){let n,a;return null!=e.weightsManifest&&([n,a]=await t(e.weightsManifest)),Ks(e,n,a)}function Ys(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Gs(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Gs(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Zs(e){const t=[];for(const n of e)t.push(...n.weights);return t}function Js(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;!(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return a=>{const r=new ArrayBuffer(4*a.length),s=new Uint32Array(r);for(let r=0;r<a.length;r++){const i=a[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];s[r]=o}return new Float32Array(r)}}class Qs{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Qs.instance&&(Qs.instance=new Qs),Qs.instance}static registerSaveRouter(e){Qs.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Qs.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Qs.getHandlers(e,"save")}static getLoadHandlers(e,t){return Qs.getHandlers(e,"load",t)}static getHandlers(e,t,n){const a=[];return("load"===t?Qs.getInstance().loadRouters:Qs.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&a.push(r)})),a}}const ei=e=>Qs.registerSaveRouter(e),ti=e=>Qs.registerLoadRouter(e),ni=e=>Qs.getSaveHandlers(e),ai=(e,t)=>Qs.getLoadHandlers(e,t),ri="tensorflowjs",si="models_store",ii="model_info_store";function oi(){if(!je().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ui(e){const t=e.result;t.createObjectStore(si,{keyPath:"modelPath"}),t.createObjectStore(ii,{keyPath:"modelPath"})}class li{constructor(e){if(this.indexedDB=oi(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const a=this.indexedDB.open(ri,1);a.onupgradeneeded=()=>ui(a),a.onsuccess=()=>{const r=a.result;if(null==t){const t=r.transaction(si,"readonly"),a=t.objectStore(si).get(this.modelPath);a.onsuccess=()=>{if(null==a.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(a.result.modelArtifacts)},a.onerror=e=>(r.close(),n(a.error)),t.oncomplete=()=>r.close()}else{const a=Ys(t),s=r.transaction(ii,"readwrite");let i=s.objectStore(ii);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:a});let u;o.onsuccess=()=>{u=r.transaction(si,"readwrite");const o=u.objectStore(si).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:a});o.onsuccess=()=>e({modelArtifactsInfo:a}),o.onerror=e=>{i=s.objectStore(ii);const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),s.oncomplete=()=>{null==u?r.close():u.oncomplete=()=>r.close()}}},a.onerror=e=>n(a.error)}))}}li.URL_SCHEME="indexeddb://";const ci=e=>{return je().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(li.URL_SCHEME)?(t=e.slice(li.URL_SCHEME.length),new li(t)):null;var t};Qs.registerSaveRouter(ci),Qs.registerLoadRouter(ci);class hi{constructor(){this.indexedDB=oi()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(ri,1);n.onupgradeneeded=()=>ui(n),n.onsuccess=()=>{const a=n.result,r=a.transaction(ii,"readonly"),s=r.objectStore(ii).getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(a.close(),t(s.error)),r.oncomplete=()=>a.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(li.URL_SCHEME)?t.slice(li.URL_SCHEME.length):t,new Promise(((t,n)=>{const a=this.indexedDB.open(ri,1);a.onupgradeneeded=()=>ui(a),a.onsuccess=()=>{const r=a.result,s=r.transaction(ii,"readwrite"),i=s.objectStore(ii),o=i.get(e);let u;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const a=i.delete(e),s=()=>{u=r.transaction(si,"readwrite");const a=u.objectStore(si).delete(e);a.onsuccess=()=>t(o.result.modelArtifactsInfo),a.onerror=e=>n(o.error)};a.onsuccess=s,a.onerror=e=>(s(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),s.oncomplete=()=>{null==u?r.close():u.oncomplete=()=>r.close()}},a.onerror=e=>n(a.error)}))}}const pi="/",di="tensorflowjs_models",fi="info",mi="model_topology",gi="weight_specs",yi="weight_data",bi="model_metadata";function xi(e){return{info:[di,e,fi].join(pi),topology:[di,e,mi].join(pi),weightSpecs:[di,e,gi].join(pi),weightData:[di,e,yi].join(pi),modelMetadata:[di,e,bi].join(pi)}}function wi(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function ki(e){const t=e.split(pi);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(pi)}class vi{constructor(e){if(!je().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=xi(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),a=Ys(e);try{this.LS.setItem(this.keys.info,JSON.stringify(a)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Us)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,a=t.length;e<a;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:a}}catch(e){throw wi(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const a=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==a)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=a;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Us){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}vi.URL_SCHEME="localstorage://";const Ii=e=>{return je().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(vi.URL_SCHEME)?(t=e.slice(vi.URL_SCHEME.length),new vi(t)):null;var t};Qs.registerSaveRouter(Ii),Qs.registerLoadRouter(Ii);class Ni{constructor(){ae(je().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),ae("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=di+pi,n=pi+fi;for(let a=0;a<this.LS.length;++a){const r=this.LS.key(a);r.startsWith(t)&&r.endsWith(n)&&(e[ki(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){var t;const n=xi(e=(t=e).startsWith(vi.URL_SCHEME)?t.slice(vi.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const a=JSON.parse(this.LS.getItem(n.info));return wi(n),a}}const Si="://";class Ti{constructor(){this.managers={}}static getInstance(){return null==Ti.instance&&(Ti.instance=new Ti),Ti.instance}static registerManager(e,t){ae(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(Si)&&(e=e.slice(0,e.indexOf(Si))),ae(e.length>0,(()=>"scheme must not be an empty string."));const n=Ti.getInstance();ae(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=Ti.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Ti.getInstance().managers)}}function Ci(e){if(-1===e.indexOf(Si))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Ti.getSchemes().join(",")}`);return{scheme:e.split(Si)[0],path:e.split(Si)[1]}}async function $i(e,t,n=!1){ae(e!==t,(()=>`Old path and new path are the same: '${e}'`));const a=Qs.getLoadHandlers(e);ae(a.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),ae(a.length<2,(()=>`Copying failed because more than one (${a.length}) load handlers for source URL ${e}.`));const r=a[0],s=Qs.getSaveHandlers(t);ae(s.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),ae(s.length<2,(()=>`Copying failed because more than one (${a.length}) save handlers for destination URL ${t}.`));const i=s[0],o=Ci(e).scheme,u=Ci(e).path,l=o===Ci(e).scheme,c=await r.load();n&&l&&await Ti.getManager(o).removeModel(u);const h=await i.save(c);return n&&!l&&await Ti.getManager(o).removeModel(u),h.modelArtifactsInfo}async function Ei(){const e=Ti.getSchemes(),t={};for(const n of e){const e=await Ti.getManager(n).listModels();for(const a in e)t[n+Si+a]=e[a]}return t}async function _i(e){const t=Ci(e);return Ti.getManager(t.scheme).removeModel(t.path)}async function Ai(e,t){return $i(e,t,!1)}async function Ri(e,t){return $i(e,t,!0)}class Fi{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&je().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))}),!0))):setTimeout(e,t)}}if(je().get("IS_BROWSER")){je().setPlatform("browser",new Fi);try{Ti.registerManager(vi.URL_SCHEME,new Ni)}catch(e){}try{Ti.registerManager(li.URL_SCHEME,new hi)}catch(e){}}let Di;function Oi(e,t="float32",n){return t=t||"float32",Pe(e),new Zr(e,t,n)}je().get("IS_NODE")&&!je().get("IS_BROWSER")&&je().setPlatform("node",new class{constructor(){this.util=n(590),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=je().global.fetch?je().global.fetch(e,t):(null==Di&&(Di=n(817)),Di(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Mi=Ds({cast_:function(e,t){const n=As(e,"x","cast");if(!ve(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const a={x:n},r={dtype:t};return ks.runKernel(wt,a,r)}}),Li=Ds({clone_:function(e){const t={x:As(e,"x","clone","string_or_numeric")};return ks.runKernel(pn,t)}});function zi(e,t=!1){console.log(e.toString(t))}function Pi(e){return new Promise((e=>setTimeout(e))).then(e)}ws(),Qr={buffer:Oi,cast:Mi,clone:Li,print:zi};class Bi{constructor(e){if(!je().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Bi.URL_SCHEME)&&(e=e.slice(Bi.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=qs(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),a=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=a,await Pi((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Pi((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Ys(e)}}}}Bi.URL_SCHEME="downloads://";class Wi{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const a=JSON.parse(n.target.result),r=a.modelTopology;if(null==r)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==a.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:r});const s=Xs(a,(e=>this.loadWeights(e)));e(s)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const a of e)t.push(...a.weights),n.push(...a.paths);const a=this.checkManifestAndWeightFiles(e),r=n.map((e=>this.loadWeightsFile(e,a[e])));return Promise.all(r).then((e=>[t,Hs(e)]))}loadWeightsFile(e,t){return new Promise(((n,a)=>{const r=new FileReader;r.onload=e=>{const t=e.target.result;n(t)},r.onerror=t=>a(`Failed to weights data from file of path '${e}'.`),r.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>js(e.name))),a={};for(const r of e)r.paths.forEach((e=>{const r=js(e);if(-1!==t.indexOf(r))throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(t.push(r),-1===n.indexOf(r))throw new Error(`Weight file with basename '${r}' is not provided.`);a[e]=this.weightsFiles[n.indexOf(r)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return a}}function Vi(e){return new Wi(e)}function Ui(e,t,n,a){!function(e){ae(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){ae(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),ae(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),ae(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,a=null==a?1:a);let r=0;return Promise.all(e.map((s=>(s.then((s=>{const i=n+ ++r/e.length*(a-n);return t(i),s})),s))))}async function Gi(e,t){null==t&&(t={});const n=null==t.fetchFunc?je().platform.fetch:t.fetchFunc,a=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(a):await Ui(a,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Ui(r,t.onProgress,.5,1)}async function Hi(e,t="",n,a){return ji((e=>Gi(e,{requestInit:a})))(e,t,n)}function ji(e){return async(t,n="",a)=>{const r=t.map((()=>!1)),s={},i=null!=a?a.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=zs[u]*oe(e.shape),c=()=>{r[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=a?a.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=l}))})),!i.every((e=>e))){const e=a.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const u=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),h={};let p=0;return u.forEach((e=>{const n=t[e].paths.length;let a=0;for(let e=0;e<n;e++)a+=c[p+e].byteLength;const r=new ArrayBuffer(a),i=new Uint8Array(r);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);i.set(t,o),o+=t.byteLength}s[e].forEach((e=>{const t=Ws(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}Qs.registerSaveRouter((e=>je().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Bi.URL_SCHEME)?function(e="model"){return new Bi(e)}(e.slice(Bi.URL_SCHEME.length)):null));class qi{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(ae("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=je().platform.fetch,ae(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&ae(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=qs(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:Ys(e),responses:[a]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,a=t.weightsManifest;if(null==n&&null==a)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Xs(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,a]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,s=Zs(e),i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+a);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[s,Hs(await Gi(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ki(e){return null!=e.match(qi.URL_SCHEME_REGEX)}qi.URL_SCHEME_REGEX=/^https?:\/\//;const Xi=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Ki(e))):Ki(e),n)return Yi(e,t)}return null};function Yi(e,t){return new qi(e,t)}function Zi(e,t){return Yi(e,t)}Qs.registerSaveRouter(Xi),Qs.registerLoadRouter(Xi);class Ji{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Qi{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class eo{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function to(e,t,n,a){return new eo(no(...arguments))}function no(e,t,n,a){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Ji(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ji({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ji({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:a}))}function ao(e){return new Qi(e)}function ro(e){return new Qi(e)}const so=Ds({matMul_:function(e,t,n=!1,a=!1){let r=As(e,"a","matMul"),s=As(t,"b","matMul");[r,s]=ps(r,s);const i={a:r,b:s},o={transposeA:n,transposeB:a};return ks.runKernel(mt,i,o)}}),io=Ds({oneHot_:function(e,t,n=1,a=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const s={indices:As(e,"indices","oneHot","int32")},i={dtype:r,depth:t,onValue:n,offValue:a};return ks.runKernel(Jn,s,i)}});function oo(){je().set("PROD",!0)}function uo(){je().set("DEBUG",!0)}function lo(){je().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function co(e){je().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ho(){ks.disposeVariables()}function po(){return ks}function fo(){return ks.memory()}function mo(e){return ks.profile(e)}function go(e,t){return ks.tidy(e,t)}function yo(e){ms(e).forEach((e=>e.dispose()))}function bo(e){return ks.keep(e)}function xo(e){return ks.time(e)}function wo(e){return ks.setBackend(e)}function ko(){return ks.ready()}function vo(){return ks.backendName}function Io(e){ks.removeBackend(e)}function No(e){return ks.findBackend(e)}function So(e){return ks.findBackendFactory(e)}function To(e,t,n=1){return ks.registerBackend(e,t,n)}function Co(){return ks.backend}function $o(e,t){je().setPlatform(e,t)}es=co;const Eo=Ds({imag_:function(e){const t={input:As(e,"input","imag")};return ks.runKernel(fn,t)}}),_o=Ds({neg_:function(e){const t={x:As(e,"x","neg")};return ks.runKernel(jn,t)}}),Ao=Ds({real_:function(e){const t={input:As(e,"input","real")};return ks.runKernel(ua,t)}}),Ro=Ds({transpose_:function(e,t,n){const a=As(e,"x","transpose");if(null==t&&(t=a.shape.map(((e,t)=>t)).reverse()),ae(a.rank===t.length,(()=>`Error in transpose: rank of input ${a.rank} must match length of perm ${t}.`)),t.forEach((e=>{ae(e>=0&&e<a.rank,(()=>"All entries in 'perm' must be between 0 and "+(a.rank-1)+` but got ${t}`))})),a.rank<=1)return a.clone();const r={x:a},s={perm:t};return"complex64"===a.dtype?go((()=>{let e=Ao(a),t=Eo(a);return e=ks.runKernel(Ja,{x:e},s),t=ks.runKernel(Ja,{x:t},s),n&&(t=_o(t)),Os(e,t)})):ks.runKernel(Ja,r,s)}}),Fo=Ds({confusionMatrix_:function(e,t,n){const a=As(e,"labels","confusionMatrix"),r=As(t,"predictions","confusionMatrix");ae(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),ae(1===a.rank,(()=>`Expected the rank of labels to be 1, but got ${a.rank}`)),ae(1===r.rank,(()=>`Expected the rank of predictions to be 1, but got ${r.rank}`)),ae(a.shape[0]===r.shape[0],(()=>`Mismatch in the number of examples: ${a.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`)),ae(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const s=io(Mi(a,"int32"),n),i=io(Mi(r,"int32"),n),o=Ro(s),u=so(o,i);return Mi(u,"int32")}});function Do(e,t){const n=e.length,a=[];for(let r=0;r<n;r++){const s=n-1-r,i=e[s]||1;(t[t.length-1-r]||1)>1&&1===i&&a.unshift(s)}return a}function Oo(e,t){const n=[];for(let a=0;a<t.length;a++){const r=e[e.length-a-1],s=t.length-a-1,i=t[s];(null==r||1===r&&i>1)&&n.unshift(s)}return n}function Mo(e,t){const n=[],a=Math.max(e.length,t.length);for(let r=0;r<a;r++){let a=e[e.length-r-1];null==a&&(a=1);let s=t[t.length-r-1];if(null==s&&(s=1),1===a)n.unshift(s);else if(1===s)n.unshift(a);else{if(a!==s)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(a)}}return n}function Lo(e,t,n){if(se(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const a=$s(e,n);if(3!==a.length&&1!==a.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Ms(e,t,a,n)}let zo;function Po(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,a=!1,r=!1,s=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)a=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(null!=fr(sr,ks.backendName)){const n={pixels:e},a={numChannels:t};return ks.runKernel(sr,n,a)}const[u,l]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i)c=e.getContext("2d").getImageData(0,0,u,l).data;else if(a||n)c=e.data;else if(s||r||o){if(null==zo)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");zo=new OffscreenCanvas(1,1).getContext("2d")}else zo=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});zo.canvas.width=u,zo.canvas.height=l,zo.drawImage(e,0,0,u,l),c=zo.getImageData(0,0,u,l).data}if(4===t)h=new Int32Array(c);else{const e=u*l;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return Lo(h,[l,u,t],"int32")}async function Bo(e,t=3){let n=null;if(je().getBool("WRAP_TO_IMAGEBITMAP")&&function(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return Po(n,t)}async function Wo(e,t){let n=As(e,"img","toPixels");if(!(e instanceof ts)){const e=n;n=Mi(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[a,r]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,u=new Uint8ClampedArray(r*a*4);for(let e=0;e<a*r;++e){const t=[0,0,0,255];for(let a=0;a<s;a++){const r=i[e*s+a];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===s?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[a]=r*o}const a=4*e;u[a+0]=Math.round(t[0]),u[a+1]=Math.round(t[1]),u[a+2]=Math.round(t[2]),u[a+3]=Math.round(t[3])}if(null!=t){t.width=r,t.height=a;const e=t.getContext("2d"),n=new ImageData(u,r,a);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}const Vo=Ds({fromPixels_:Po});function Uo(e,t){const n=e.shape.length,a=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(a<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${a}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[a-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[a-1]} vs. ${n}`);if(0===oe(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,s=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,u=r.slice();u.pop();let l=1;for(let e=s;e<n;++e)l*=o[e],u.push(o[e]);const c=[...Fe(e.shape).map((e=>e/l)),1].slice(0,s);return[u,i,l,c]}function Go(e,t,n){const a=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${a}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(s+` update.rank < ${r}. `);if(e.length<a+(n.rank-r))throw new Error(s+` Output shape length < ${a+(n.rank-r)}`);if(n.rank!==r+e.length-a)throw new Error(s+" update.rank != "+(r+e.length-a));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+a])throw new Error(s+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function Ho(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Go(n,t,e)}function jo(e,t,n){const a=t.shape.length,r=a>1?t.shape[a-1]:1,s=n.length;let i=1;for(let e=r;e<s;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:oe(t.shape)/o,sliceSize:i,strides:[...Fe(n.slice(0,r)),1],outputSize:oe(n)}}const qo=-2,Ko=-1;function Xo(e,t,n){const a=e.shape.length;ae(a===t.length,(()=>`Error in slice${a}D: Length of begin ${t} must match the rank of the array (${a}).`)),ae(a===n.length,(()=>`Error in slice${a}D: Length of size ${n} must match the rank of the array (${a}).`));for(let r=0;r<a;++r)ae(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${a}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function Yo(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Zo(e,t,n){const a=[];for(let r=0;r<e.length;r++)a[r]=Math.ceil((t[r]-e[r])/n[r]);return a}function Jo(e,t,n,a){const r=[...e];for(let e=r.length;e<a.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function Qo(e,t,n){return n<=e?n:n-(t-1)}function eu(e,t){const n=[];for(let a=0;a<e;a++)n.push(t+a);return n}function tu(e,t,n,a,r,s,i,o,u){const l=e.length;let c=new Array(l),h=new Array(l),p=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=nu(i,u,l,a,e),h=au(o,u,l,r,e),p=Jo(s,u,l,e)}else for(let t=0;t<l;t++)c[t]=su(i,a,s,e,t,u),h[t]=iu(o,r,s,e,t,u),p[t]=ru(s,t,u);return{begin:c,end:h,strides:p}}function nu(e,t,n,a,r){const s=[...r],i=eu(n,t);for(let r=0;r<s.length;r++)if(i.indexOf(r)>-1)s[r]=0;else{const i=Qo(t,n,r);let o=a[i];e&1<<i&&(o=0),s[r]=o}return s}function au(e,t,n,a,r){const s=[...r],i=eu(n,t);for(let r=0;r<s.length;r++)if(i.indexOf(r)>-1)s[r]=Number.MAX_SAFE_INTEGER;else{const i=Qo(t,n,r);let o=a[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),s[r]=o}for(let e=0;e<s.length;e++){const t=r[e];s[e]<0&&(s[e]+=t),s[e]=Z(0,s[e],r[e])}return s}function ru(e,t,n){let a=e[t];return(n&1<<t||null==a)&&(a=1),a}function su(e,t,n,a,r,s){let i=t[r];const o=n[r]||1;(e&1<<r||s&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=a[r];return i<0&&(i+=u),i=Z(0,i,u-1),i}function iu(e,t,n,a,r,s){let i=t[r];const o=n[r]||1;(e&1<<r||s&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=a[r];return i<0&&(i+=u),i=o>0?Z(0,i,u):Z(-1,i,u-1),i}function ou(e,t,n){let a=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){a=e;break}for(let r=a+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function uu(e,t){let n=e.length>0?e[e.length-1]:1;for(let a=0;a<e.length-1;a++)n+=e[a]*t[a];return n}function lu(e,t,n){let a;const r=e.shape.length;let s;return a="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),a.forEach((e=>{ae(-1!==e,(()=>"slice() does not support negative begin indexing."))})),s=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,s=s.map(((t,n)=>t>=0?t:(ae(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-a[n]))),[a,s]}function cu(e,t,n,a,r,s,i,o,u){let l;if(null==a?(l=new Array(t.length),l.fill(1)):l=a,null!=i&&i&i-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:r,endMask:s,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};for(let e=0;e<h.dims;e++)c&&1<<e&o&&h.numAddAxisAfterEllipsis++,1<<e&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let a=0;a<e.dims;a++)if(1<<a&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-a)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=a}else if(1<<a&e.newAxisMask)t.finalShapeGatherIndices.push(qo),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[a]),null!=e.end&&(t.end[n]=e.end[a]),t.strides[n]=e.strides[a],e.beginMask&1<<a&&(t.beginMask|=1<<n),e.endMask&1<<a&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<a?(t.finalShapeGatherIndices.push(Ko),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(a)),t.inputShapeGatherIndicesSparse[n]=a,n++}}(h,p);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===p.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(p.shrinkAxisMask&1<<t),a=e[t];if(-1===a){g.push(n?1:-1);continue}const r=[p.beginMask&1<<t,p.endMask&1<<t],s=[p.strides[t]>0?0:-1,p.strides[t]>0?a:a-1];if(n&&p.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[t];const i=!!(p.beginMask&1<<t&&p.endMask&1<<t);if(p.beginValid&&p.endValid){if(n){const e=p.begin[t]<0?a+p.begin[t]:p.begin[t];if(p.begin[t]=e,p.end[t]=p.begin[t]+1,e<0||e>=a)throw Error(`slice index ${p.begin[t]} of dimension ${t} out of bounds.`)}else p.begin[t]=hu(p.begin[t],0,p.strides[t],a,r,s),p.end[t]=hu(p.end[t],1,p.strides[t],a,r,s);const e=1===p.strides[t]&&0===p.begin[t]&&p.end[t]===a;d=d&&e,f=f&&(0===t&&1===p.strides[t]||e)}else d=d&&1===p.strides[t]&&i,f=f&&(0===t&&1===p.strides[t]||i);let o,u=!1;if(p.beginValid&&p.endValid?(o=p.end[t]-p.begin[t],u=!0):n?(o=1,u=!0):i&&a>=0&&(o=p.strides[t]<0?-a:a,u=!0),u){let e;e=0===o||o<0!=p.strides[t]<0?0:Math.trunc(o/p.strides[t])+(o%p.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<p.finalShapeGatherIndices.length;++e){const t=p.finalShapeGatherIndices[e];t>=0?y.push(g[t]):t===qo&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>p.finalShapeGatherIndices[t]!==qo)),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function hu(e,t,n,a,r,s){if(r[t])return n>0?s[t]:s[t+1&1];{const t=e<0?a+e:e;return t<s[0]?s[0]:t>s[1]?s[1]:t}}class pu{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class du{constructor(){this.classNameMap={}}static getMap(){return null==du.instance&&(du.instance=new du),du.instance}static register(e){du.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function fu(e){ae(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),ae("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),ae(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),du.register(e)}const mu=.001,gu=.1;function yu(e,t,n){return null==n&&(n=bu()),xu(e,t,((e,t)=>Iu(e,t,n)))}function bu(){return 32===ks.backend.floatPrecision()?mu:gu}function xu(e,t,n){let a=!0;if((Ne(e)||Ne(t))&&(a=!1),Ne(e)&&Ne(t)&&(a=!0),a){const n=e.constructor.name,a=t.constructor.name;if(n!==a)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${a}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=$s(e),a=$s(t);if(!le(n,a))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${a}]`)}const r=Ne(e)?e:ie(e),s=Ne(t)?t:ie(t);if(r.length!==s.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${s.length}.\nActual:   ${r}.\nExpected: ${s}.`);for(let e=0;e<s.length;++e){const t=r[e],a=s[e];if(!n(t,a))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${a}.\nActual:   ${r}.\nExpected: ${s}.`)}"undefined"!=typeof expect&&expect().nothing()}function wu(e,t){e().then((()=>t.fail()),(()=>t())),"undefined"!=typeof expect&&expect().nothing()}function ku(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Ce(e)||Ce(e[0])||Ce(t)||Ce(t[0])?xu(e,n,((e,t)=>e==t)):xu(e,t,((e,t)=>Iu(e,t,0)))}function vu(e,t,n){if(null==n&&(n=bu()),!Iu(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function Iu(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Nu(e,t,n){for(let a=0;a<e.length;a++)if(e[a]<t||e[a]>n)throw new Error(`Value out of range:${e[a]} low: ${t}, high: ${n}`)}function Su(e,t){const n=new Float32Array(e),a=new Float32Array(t);if(n.length!==a.length)throw new Error(`Expected ArrayBuffer to be of length ${a.length}, but it was ${n.length}`);for(let e=0;e<a.length;e++)if(n[e]!==a[e])throw new Error(`Expected ArrayBuffer value at ${e} to be ${a[e]} but got ${n[e]} instead`)}function Tu(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Tu(n):e[t]=Wr(n)}return e}function Cu(e){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise((e=>{t.addEventListener("loadeddata",(n=>e(t))),t.load()}))}async function $u(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise((t=>{e.requestVideoFrameCallback(t)}))}const Eu="3.21.0",_u=Ds({add_:function(e,t){let n=As(e,"a","add"),a=As(t,"b","add");[n,a]=ps(n,a);const r={a:n,b:a};return ks.runKernel(et,r)}}),Au=Ds({floorDiv_:function(e,t){let n=As(e,"a","floorDiv"),a=As(t,"b","floorDiv");[n,a]=ps(n,a);const r={a:n,b:a};return ks.runKernel(sn,r)}}),Ru=Ds({div_:function(e,t){let n=As(e,"a","div"),a=As(t,"b","div");if([n,a]=ps(n,a),"int32"===n.dtype&&"int32"===a.dtype)return Au(n,a);const r={a:n,b:a};return ks.runKernel(jt,r,{})}}),Fu=Ds({mul_:function(e,t){let n=As(e,"a","mul"),a=As(t,"b","mul");[n,a]=ps(n,a);const r={a:n,b:a};return ks.runKernel(Hn,r)}}),Du=Ds({sqrt_:function(e){const t={x:As(e,"x","sqrt","float32")};return ks.runKernel(_a,t)}}),Ou=Ds({square_:function(e){const t=As(e,"x","square");return ks.runKernel("Square",{x:t},{})}}),Mu=Ds({zerosLike_:function(e){const t={x:As(e,"x","zerosLike")};return ks.runKernel(ar,t)}});function Lu(e){return ae(Ae(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const a=As(t,"x","tf.grad","string_or_numeric"),r=null!=n?As(n,"dy","tf.grad"):null;return ks.tidy((()=>{const{value:t,grads:n}=ks.gradients((()=>e(a)),[a],r);return null!=r&&re(t.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Uu(n),n[0]}))}}function zu(e){return ae(Ae(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{ae(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const a=Rs(t,"args","tf.grads","string_or_numeric"),r=null!=n?As(n,"dy","tf.grads"):null;return ks.tidy((()=>{const{value:t,grads:n}=ks.gradients((()=>e(...a)),a,r);return null!=r&&re(t.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Uu(n),n}))}}function Pu(e){return ae(Ae(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{ae(t instanceof ts,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),ae(null==n||n instanceof ts,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:a,value:r}=ks.gradients((()=>e(t)),[t],n);return Uu(a),{grad:a[0],value:r}}}function Bu(e){return ae(Ae(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{ae(Array.isArray(t)&&t.every((e=>e instanceof ts)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),ae(null==n||n instanceof ts,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const a=ks.gradients((()=>e(...t)),t,n);return null!=n&&re(a.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Uu(a.grads),a}}function Wu(e,t){ae(Ae(e),(()=>"The f passed in variableGrads(f) must be a function")),ae(null==t||Array.isArray(t)&&t.every((e=>e instanceof as)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in ks.registeredVariables)t.push(ks.registeredVariables[e])}const a=n?t.filter((e=>!e.trainable)):null,r=t.length;t=t.filter((e=>e.trainable)),ae(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:s,grads:i}=ks.gradients(e,t,null,!0);ae(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),ae(0===s.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${s.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=a&&a.forEach((e=>o[e.name]=null)),{value:s,grads:o}}function Vu(e){return ks.customGrad(e)}function Uu(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function Gu(e,t){if((Ne(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Ne(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Ms(e,[],[],t)}class Hu extends pu{minimize(e,t=!1,n){const{value:a,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return yo(r),t?a:(a.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Wu(e,t)}dispose(){null!=this.iterations_&&yo(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Gu(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Hu,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class ju extends Hu{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=ks.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const a=ks.registeredVariables[t],r=!1;null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:go((()=>Mu(a).variable(r)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:go((()=>Mu(a).variable(r)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const i=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;go((()=>{const e=_u(Fu(i,this.rho),Fu(Ou(s),1-this.rho)),t=Fu(Ru(Du(_u(o,this.epsilon)),Du(_u(i,this.epsilon))),s),n=_u(Fu(o,this.rho),Fu(Ou(t),1-this.rho));i.assign(e),o.assign(n);const r=_u(Fu(t,-this.learningRate),a);a.assign(r)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(yo(this.accumulatedGrads.map((e=>e.variable))),yo(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2,n=!1;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function qu(e,t,n){const a={shape:e,value:t,dtype:n};return ks.runKernel(nn,{},a)}ju.className="Adadelta",fu(ju);class Ku extends Hu{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const a=ks.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:go((()=>qu(a.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=this.accumulatedGrads[n].variable;go((()=>{const e=_u(s,Ou(r));s.assign(e);const t=_u(Fu(Ru(r,Du(_u(e,ks.backend.epsilon()))),-this.learningRate),a);a.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&yo(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Ku.className="Adagrad",fu(Ku);const Xu=Ds({pow_:function(e,t){let n=As(e,"base","pow"),a=As(t,"exp","pow");[n,a]=ps(n,a);const r={a:n,b:a};return ks.runKernel(na,r)}}),Yu=Ds({sub_:function(e,t){let n=As(e,"a","sub"),a=As(t,"b","sub");[n,a]=ps(n,a);const r={a:n,b:a};return ks.runKernel(ja,r)}});class Zu extends Hu{constructor(e,t,n,a=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=a,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],go((()=>{this.accBeta1=Gu(t).variable(),this.accBeta2=Gu(n).variable()})),null==a&&(this.epsilon=ks.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);go((()=>{const n=Yu(1,this.accBeta1),a=Yu(1,this.accBeta2);t.forEach(((t,r)=>{const s=ks.registeredVariables[t],i=!1;null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:go((()=>Mu(s).variable(i)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:go((()=>Mu(s).variable(i)))});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const u=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,c=_u(Fu(u,this.beta1),Fu(o,1-this.beta1)),h=_u(Fu(l,this.beta2),Fu(Ou(o),1-this.beta2)),p=Ru(c,n),d=Ru(h,a);u.assign(c),l.assign(h);const f=_u(Fu(Ru(p,_u(Du(d),this.epsilon)),-this.learningRate),s);s.assign(f)})),this.accBeta1.assign(Fu(this.accBeta1,this.beta1)),this.accBeta2.assign(Fu(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&yo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&yo(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),go((()=>{this.accBeta1.assign(Xu(this.beta1,this.iterations_+1)),this.accBeta2.assign(Xu(this.beta2,this.iterations_+1))}));const t=e.length/2,n=!1;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Zu.className="Adam",fu(Zu);const Ju=Ds({abs_:function(e){const t=As(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return ks.runKernel(Nt,e)}{const e={x:t};return ks.runKernel(Ze,e)}}}),Qu=Ds({maximum_:function(e,t){let n=As(e,"a","maximum"),a=As(t,"b","maximum");[n,a]=ps(n,a),"bool"===n.dtype&&(n=Mi(n,"int32"),a=Mi(a,"int32")),Mo(n.shape,a.shape);const r={a:n,b:a};return ks.runKernel(Fn,r)}});class el extends Hu{constructor(e,t,n,a=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=a,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],go((()=>{this.iteration=Gu(0).variable(),this.accBeta1=Gu(t).variable()})),null==a&&(this.epsilon=ks.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);go((()=>{const n=Yu(1,this.accBeta1),a=Ru(-this.learningRate,_u(Fu(this.iteration,this.decay),1));t.forEach(((t,r)=>{const s=ks.registeredVariables[t],i=!1;null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Mu(s).variable(i)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:Mu(s).variable(i)});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const u=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,c=_u(Fu(u,this.beta1),Fu(o,1-this.beta1)),h=Fu(l,this.beta2),p=Ju(o),d=Qu(h,p);u.assign(c),l.assign(d);const f=_u(Fu(Ru(a,n),Ru(c,_u(d,this.epsilon))),s);s.assign(f)})),this.iteration.assign(_u(this.iteration,1)),this.accBeta1.assign(Fu(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&yo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&yo(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}el.className="Adamax",fu(el);class tl extends Hu{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=ks.registeredVariables[t];go((()=>{const e=_u(Fu(this.c,a),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=bo(Gu(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}tl.className="SGD",fu(tl);class nl extends tl{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Gu(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const a=ks.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:go((()=>Mu(a).variable(e)))}}const r=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&go((()=>{let e;const t=_u(Fu(this.m,r),s);e=this.useNesterov?_u(Fu(this.c,_u(s,Fu(t,this.m))),a):_u(Fu(this.c,t),a),r.assign(t),a.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&yo(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}nl.className="Momentum",fu(nl);class al extends Hu{constructor(e,t=.9,n=0,a=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=a,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==a&&(this.epsilon=ks.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const a=ks.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:go((()=>Mu(a).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:go((()=>Mu(a).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:go((()=>Mu(a).variable(r)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;go((()=>{const e=_u(Fu(i,this.decay),Fu(Ou(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=_u(Fu(t,this.decay),Fu(s,1-this.decay)),u=Ru(Fu(s,this.learningRate),Du(Yu(e,_u(Ou(r),this.epsilon)))),l=_u(Fu(o,this.momentum),u);i.assign(e),t.assign(r),o.assign(l);const c=Yu(a,l);a.assign(c)}else{const e=_u(Fu(i,this.decay),Fu(Ou(s),1-this.decay)),t=_u(Fu(o,this.momentum),Ru(Fu(s,this.learningRate),Du(_u(e,this.epsilon))));i.assign(e),o.assign(t);const n=Yu(a,t);a.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&yo(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&yo(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&yo(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}al.className="RMSProp",fu(al);class rl{static sgd(e){return new tl(e)}static momentum(e,t,n=!1){return new nl(e,t,n)}static rmsprop(e,t=.9,n=0,a=null,r=!1){return new al(e,t,n,a,r)}static adam(e=.001,t=.9,n=.999,a=null){return new Zu(e,t,n,a)}static adadelta(e=.001,t=.95,n=null){return new ju(e,t,n)}static adamax(e=.002,t=.9,n=.999,a=null,r=0){return new el(e,t,n,a,r)}static adagrad(e,t=.1){return new Ku(e,t)}}const sl=Ds({acos_:function(e){const t={x:As(e,"x","acos")};return ks.runKernel(Je,t)}}),il=Ds({acosh_:function(e){const t={x:As(e,"x","acosh")};return ks.runKernel(Qe,t)}}),ol=Ds({addN_:function(e){ae(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),ae(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>As(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!le(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const a=t;return ks.runKernel(tt,a)}}),ul=Ds({all_:function(e,t=null,n=!1){const a={x:As(e,"x","all","bool")},r={axis:t,keepDims:n};return ks.runKernel(nt,a,r)}}),ll=Ds({any_:function(e,t=null,n=!1){const a={x:As(e,"x","any","bool")},r={axis:t,keepDims:n};return ks.runKernel(at,a,r)}}),cl=Ds({argMax_:function(e,t=0){const n={x:As(e,"x","argMax")},a={axis:t};return ks.runKernel(rt,n,a)}}),hl=Ds({argMin_:function(e,t=0){const n={x:As(e,"x","argMin")},a={axis:t};return ks.runKernel(st,n,a)}}),pl=Ds({asin_:function(e){const t={x:As(e,"x","asin")};return ks.runKernel(it,t)}}),dl=Ds({asinh_:function(e){const t={x:As(e,"x","asinh")};return ks.runKernel(ot,t)}}),fl=Ds({atan_:function(e){const t={x:As(e,"x","atan")};return ks.runKernel(ut,t)}}),ml=Ds({atan2_:function(e,t){let n=As(e,"a","atan2"),a=As(t,"b","atan2");[n,a]=ps(n,a);const r={a:n,b:a};return ks.runKernel(ct,r)}}),gl=Ds({atanh_:function(e){const t={x:As(e,"x","atanh")};return ks.runKernel(lt,t)}});function yl(e,t,n,a,r="NHWC",s){return wl(e,[...t,e[3]],n,s,a,null,null,El(r))}function bl(e,t,n,a,r,s,i="channelsLast"){const[o,u]=Il(t);let l;if("channelsLast"===i)l=[o,u,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);l=[o,u,e[1],e[1]]}return wl(e,l,n,a,r,s,!1,i)}function xl(e,t,n,a,r,s,i="NDHWC"){const[o,u,l]=Nl(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,u,l,e[1],e[1]]}return kl(e,c,n,a,r,!1,h,s)}function wl(e,t,n,a,r,s,i=!1,o="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,h,l,c]=e}const[p,d,,f]=t,[m,g]=Il(n),[y,b]=Il(a),x=Sl(p,y),w=Sl(d,b),{padInfo:k,outHeight:v,outWidth:I}=function(e,t,n,a,r,s,i,o,u){let l,c,h;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,a,r){null==a&&(a=vl(e,t,n));const s=e[1];return[Tl((e[0]-t+2*a)/n+1,r),Tl((s-t+2*a)/n+1,r)]}([t,n],s,a,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/a),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*a+s-t),o=Math.max(0,(h-1)*r+i-n),u=Math.floor(e/2),p=e-u,d=Math.floor(o/2);l={top:u,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/a),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Tl((t-s+p+d)/a+1,o),h=Tl((n-i+f+m)/r+1,o)}}return{padInfo:l,outHeight:c,outWidth:h}}(r,l,c,m,g,x,w,s,o),N=i?f*h:f;let S;return"channelsFirst"===o?S=[u,N,v,I]:"channelsLast"===o&&(S=[u,v,I,N]),{batchSize:u,dataFormat:o,inHeight:l,inWidth:c,inChannels:h,outHeight:v,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function kl(e,t,n,a,r,s=!1,i="channelsLast",o){let[u,l,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=Nl(n),[w,k,v]=Nl(a),I=Sl(d,w),N=Sl(f,k),S=Sl(m,v),{padInfo:T,outDepth:C,outHeight:$,outWidth:E}=function(e,t,n,a,r,s,i,o,u,l,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,a,r,s){null==r&&(r=vl(e,t,a));const i=e[1],o=e[2];return[Tl((e[0]-t+2*r)/a+1,s),Tl((i-t+2*r)/a+1,s),Tl((o-t+2*r)/a+1,s),1]}([t,n,a,1],o,0,r,e,c);p=s[0],d=s[1],f=s[2]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/s),f=Math.ceil(a/i);const e=(p-1)*r+o-t,c=(d-1)*s+u-n,m=(f-1)*i+l-a,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/r),d=Math.ceil((n-u+1)/s),f=Math.ceil((a-l+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,l,c,h,y,b,x,I,N,S,o),_=s?g*p:g;let A;return"channelsFirst"===i?A=[u,_,C,$,E]:"channelsLast"===i&&(A=[u,C,$,E,_]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:h,inChannels:p,outDepth:C,outHeight:$,outWidth:E,outChannels:_,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:A,filterShape:t}}function vl(e,t,n,a=1){const r=Sl(t,a);return Math.floor((e[0]*(n-1)-n+r)/2)}function Il(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Nl(e){return"number"==typeof e?[e,e,e]:e}function Sl(e,t){return t<=1?e:e+(e-1)*(t-1)}function Tl(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Cl(e){const[t,n,a]=Il(e);return 1===t&&1===n&&1===a}function $l(e,t){return Cl(e)||Cl(t)}function El(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function _l(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)ae(ce(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{ae(ce(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const Al=Ds({reshape_:function(e,t){const n={x:As(e,"x","reshape","string_or_numeric")},a={shape:t};return ks.runKernel(ha,n,a)}}),Rl=Ds({avgPool_:function(e,t,n,a,r){const s=As(e,"x","avgPool","float32");ae($l(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=s,o=!1;3===s.rank&&(o=!0,i=Al(s,[1,s.shape[0],s.shape[1],s.shape[2]])),ae(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),_l("avgPool",a,r);const u={x:i},l={filterSize:t,strides:n,pad:a,dimRoundingMode:r};let c=ks.runKernel(ht,u,l);return c=Mi(c,s.dtype),o?Al(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Fl=Ds({avgPool3d_:function(e,t,n,a,r,s="NDHWC"){const i=As(e,"x","avgPool3d","float32");let o=i,u=!1;4===i.rank&&(u=!0,o=Al(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ae(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),ae("NDHWC"===s,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),_l("avgPool3d",a,r);const l={x:o},c={filterSize:t,strides:n,pad:a,dimRoundingMode:r,dataFormat:s};let h=ks.runKernel(dt,l,c);return h=Mi(h,o.dtype),u?Al(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Dl=Ds({concat_:function(e,t=0){ae(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Rs(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Li(n[0]);const a=n,r={axis:t};return ks.runKernel(St,a,r)}}),Ol=Ds({sigmoid_:function(e){const t={x:As(e,"x","sigmoid","float32")};return ks.runKernel($a,t)}}),Ml=Ds({slice_:function(e,t,n){const a=As(e,"x","slice","string_or_numeric");if(0===a.rank)throw new Error("Slicing scalar is not possible");const r={x:a},s={begin:t,size:n};return ks.runKernel(Na,r,s)}}),Ll=Ds({tanh_:function(e){const t={x:As(e,"x","tanh","float32")};return ks.runKernel(Ka,t)}}),zl=Ds({basicLSTMCell_:function(e,t,n,a,r,s){const i=As(e,"forgetBias","basicLSTMCell"),o=As(t,"lstmKernel","basicLSTMCell"),u=As(n,"lstmBias","basicLSTMCell"),l=As(a,"data","basicLSTMCell"),c=As(r,"c","basicLSTMCell"),h=As(s,"h","basicLSTMCell"),p=Dl([l,h],1),d=so(p,o),f=_u(d,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Ml(f,[0,0],y),x=Ml(f,[0,g],y),w=Ml(f,[0,2*g],y),k=Ml(f,[0,3*g],y),v=_u(Fu(Ol(b),Ll(x)),Fu(c,Ol(_u(i,w))));return[v,Fu(Ll(v),Ol(k))]}}),Pl=Ds({batchToSpaceND_:function(e,t,n){const a=As(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));ae(a.rank>=1+t.length,(()=>`input rank is ${a.rank} but should be > than blockShape.length ${t.length}`)),ae(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),ae(a.shape[0]%r==0,(()=>`input tensor batch is ${a.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const s={x:a},i={blockShape:t,crops:n};return ks.runKernel(gt,s,i)}}),Bl=Ds({batchNorm_:function(e,t,n,a,r,s){null==s&&(s=.001);const i=As(e,"x","batchNorm"),o=As(t,"mean","batchNorm"),u=As(n,"variance","batchNorm");let l,c;null!=r&&(l=As(r,"scale","batchNorm")),null!=a&&(c=As(a,"offset","batchNorm")),ae(o.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ae(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ae(null==l||o.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(e){let t;return t=0===e.rank||1===e.rank?Al(e,[1,1,1,e.size]):2===e.rank?Al(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Al(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:l,offset:c,mean:o,variance:u},p={varianceEpsilon:s},d=ks.runKernel(on,h,p);return Al(d,i.shape)}}),Wl=Ds({batchNorm2d_:function(e,t,n,a,r,s){const i=As(e,"x","batchNorm"),o=As(t,"mean","batchNorm"),u=As(n,"variance","batchNorm");let l,c;return null!=r&&(l=As(r,"scale","batchNorm")),null!=a&&(c=As(a,"offset","batchNorm")),ae(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),ae(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),ae(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&ae(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&ae(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Bl(i,o,u,c,l,s)}}),Vl=Ds({batchNorm3d_:function(e,t,n,a,r,s){const i=As(e,"x","batchNorm"),o=As(t,"mean","batchNorm"),u=As(n,"variance","batchNorm");let l,c;return null!=r&&(l=As(r,"scale","batchNorm")),null!=a&&(c=As(a,"offset","batchNorm")),ae(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),ae(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),ae(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&ae(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&ae(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Bl(i,o,u,c,l,s)}}),Ul=Ds({batchNorm4d_:function(e,t,n,a,r,s){const i=As(e,"x","batchNorm"),o=As(t,"mean","batchNorm"),u=As(n,"variance","batchNorm");let l,c;return null!=r&&(l=As(r,"scale","batchNorm")),null!=a&&(c=As(a,"offset","batchNorm")),ae(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),ae(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),ae(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&ae(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&ae(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Bl(i,o,u,c,l,s)}}),Gl=Ds({bincount_:function(e,t,n){const a=As(e,"x","bincount"),r=As(t,"weights","bincount");ae("int32"===a.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${a.dtype}`)),ae(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ae(r.size===a.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${a.shape}, weights shape: ${r.shape}.`));const s={x:a,weights:r},i={size:n};return ks.runKernel(yt,s,i)}}),Hl=Ds({broadcastArgs_:function(e,t){const n=As(e,"s0","broadcastArgs","int32"),a=As(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==a.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${a.rank}`);const r={s0:n,s1:a};return ks.runKernel(xt,r)}}),jl=Ds({broadcastTo_:function(e,t){let n=As(e,"broadcastTo","x");const a=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Al(n,e)}const r=n.shape,s=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])s[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${t}].`);if(0===s.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Li(n);const i={x:n},o={reps:s};return ks.runKernel(Xa,i,o)}}),ql=Ds({ceil_:function(e){const t={x:As(e,"x","ceil","float32")};return ks.runKernel(kt,t)}}),Kl=Ds({clipByValue_:function(e,t,n){const a=As(e,"x","clipByValue");if(ae(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return qu(a.shape,t,a.dtype);const r={x:a},s={clipValueMin:t,clipValueMax:n};return ks.runKernel(vt,r,s)}}),Xl=Ds({concat1d_:function(e){return Dl(e,0)}}),Yl=Ds({concat2d_:function(e,t){return Dl(e,t)}}),Zl=Ds({concat3d_:function(e,t){return Dl(e,t)}}),Jl=Ds({concat4d_:function(e,t){return Dl(e,t)}}),Ql=Ds({conv2d_:function(e,t,n,a,r="NHWC",s=[1,1],i){const o=As(e,"x","conv2d","float32"),u=As(t,"filter","conv2d","float32");let l=o,c=!1;3===o.rank&&(c=!0,l=Al(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ae(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),ae(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),_l("conv2d",a,i);const h="NHWC"===r?l.shape[3]:l.shape[1];ae(h===u.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`)),ae($l(n,s),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`));const p={x:l,filter:u},d={strides:n,pad:a,dataFormat:r,dilations:s,dimRoundingMode:i},f=ks.runKernel(Tt,p,d);return c?Al(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),ec=Ds({conv1d_:function(e,t,n,a,r="NWC",s=1,i){const o=As(e,"x","conv1d"),u=As(t,"filter","conv1d");let l=o,c=!1;2===o.rank&&(c=!0,l=Al(o,[1,o.shape[0],o.shape[1]])),ae(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),ae(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),_l("conv1d",a,i),ae(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),ae($l(n,s),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`)),ae("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=Al(u,[1,u.shape[0],u.shape[1],u.shape[2]]),p=Al(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=Ql(p,h,[1,n],a,"NHWC",[1,s],i);return Al(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),tc=Ds({conv2DBackpropInput_:function(e,t,n,a,r,s="NHWC",i){ae(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,u=t,l=!1;3===t.rank&&(l=!0,u=Al(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),ae(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),ae(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),ae(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===s?o[3]:o[1],h="NHWC"===s?u.shape[3]:u.shape[1];ae(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),ae(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),_l("conv2dDerInput",r,i);const p={dy:u,filter:n},d={strides:a,pad:r,dataFormat:s,dimRoundingMode:i,inputShape:o},f=ks.runKernel($t,p,d);return l?Al(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),nc=Ds({conv2dTranspose_:function(e,t,n,a,r,s){const i=As(e,"x","conv2dTranspose"),o=As(t,"filter","conv2dTranspose");return tc(n,i,o,a,r,"NHWC",s)}}),ac=Ds({conv3d_:function(e,t,n,a,r="NDHWC",s=[1,1,1]){const i=As(e,"x","conv3d"),o=As(t,"filter","conv3d");let u=i,l=!1;4===i.rank&&(l=!0,u=Al(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ae(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),ae(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),ae(u.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),ae($l(n,s),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),ae("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const c={x:u,filter:o},h={strides:n,pad:a,dataFormat:r,dilations:s},p=ks.runKernel(Et,c,h);return l?Al(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),rc=Ds({conv3DBackpropInput_:function(e,t,n,a,r){ae(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let s=e,i=t,o=!1;4===t.rank&&(o=!0,i=Al(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);const u=s[4],l=i.shape[4];ae(5===s.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`)),ae(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),ae(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),ae(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),ae(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:r,strides:a,inputShape:s},p=ks.runKernel(At,c,h);return o?Al(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),sc=Ds({conv3dTranspose_:function(e,t,n,a,r){const s=As(e,"x","conv3dTranspose"),i=As(t,"filter","conv3dTranspose");return rc(n,s,i,a,r)}}),ic=Ds({cos_:function(e){const t={x:As(e,"x","cos","float32")};return ks.runKernel(Rt,t)}}),oc=Ds({cosh_:function(e){const t={x:As(e,"x","cosh","float32")};return ks.runKernel(Ft,t)}}),uc=Ds({cumprod_:function(e,t=0,n=!1,a=!1){const r={x:As(e,"x","cumprod")},s={axis:t,exclusive:n,reverse:a};return ks.runKernel(Dt,r,s)}}),lc=Ds({cumsum_:function(e,t=0,n=!1,a=!1){const r={x:As(e,"x","cumsum")},s={axis:t,exclusive:n,reverse:a};return ks.runKernel(Ot,r,s)}}),cc=Ds({denseBincount_:function(e,t,n,a=!1){const r=As(e,"x","denseBincount"),s=As(t,"weights","denseBincount");ae("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),ae(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),ae(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ae(s.size===r.size||0===s.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${s.shape}.`));const i={x:r,weights:s},o={size:n,binaryOutput:a};return ks.runKernel(Lt,i,o)}}),hc=Ds({depthToSpace_:function(e,t,n="NHWC"){const a=As(e,"x","depthToSpace","float32"),r="NHWC"===n?a.shape[1]:a.shape[2],s="NHWC"===n?a.shape[2]:a.shape[3],i="NHWC"===n?a.shape[3]:a.shape[1];ae(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),ae(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${a.shape}`)),ae(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t} for depthToSpace with input shape\n        ${a.shape}`)),ae(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${a.shape}`));const o={x:a},u={blockSize:t,dataFormat:n};return ks.runKernel(zt,o,u)}}),pc=Ds({depthwiseConv2d_:function(e,t,n,a,r="NHWC",s=[1,1],i){const o=As(e,"x","depthwiseConv2d","float32"),u=As(t,"filter","depthwiseConv2d","float32");let l=o,c=!1;3===o.rank&&(c=!0,l=Al(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ae(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),ae(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`));const h="NHWC"===r?l.shape[3]:l.shape[1];ae(h===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${u.shape[2]}.`)),_l("depthwiseConv2d",a,i);const p={x:l,filter:u},d={strides:n,pad:a,dataFormat:r,dilations:s,dimRoundingMode:i},f=ks.runKernel(Pt,p,d);return c?Al(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),dc=Ds({diag_:function(e){const t={x:As(e,"x","diag")};return ks.runKernel(Vt,t)}}),fc=Ds({dilation2d_:function(e,t,n,a,r=[1,1],s="NHWC"){const i=As(e,"x","dilation2d"),o=As(t,"filter","dilation2d");ae(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),ae(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),ae("NHWC"===s,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`));let u=i,l=!1;3===i.rank&&(u=Al(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=!0);const c={x:u,filter:o},h={strides:n,pad:a,dilations:r},p=ks.runKernel(Ut,c,h);return l?Al(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),mc=Ds({equal_:function(e,t){let n=As(e,"a","equal","string_or_numeric"),a=As(t,"b","equal","string_or_numeric");[n,a]=ps(n,a),Mo(n.shape,a.shape);const r={a:n,b:a};return ks.runKernel(Zt,r)}}),gc=Ds({where_:function(e,t,n){const a=As(t,"a","where"),r=As(n,"b","where"),s=As(e,"condition","where","bool"),i=Mo(Mo(s.shape,a.shape),r.shape),o={condition:jl(s,i),t:jl(a,i),e:jl(r,i)};return ks.runKernel(va,o)}}),yc=Ds({divNoNan_:function(e,t){let n=As(e,"a","div"),a=As(t,"b","div");[n,a]=ps(n,a);const r=Ru(n,a),s=Mu(r),i=mc(a,s);return gc(i,s,r)}}),bc=Ds({dot_:function(e,t){const n=As(e,"t1","dot"),a=As(t,"t2","dot");ae(!(1!==n.rank&&2!==n.rank||1!==a.rank&&2!==a.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${a.rank}.`));const r=1===n.rank?n.size:n.shape[1],s=1===a.rank?a.size:a.shape[0];if(ae(r===s,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${s}.`)),1===n.rank&&1===a.rank){const e=Al(n,[1,-1]),t=Al(a,[-1,1]),r=so(e,t);return Al(r,[])}if(1===n.rank&&2===a.rank){const e=Al(n,[1,-1]),t=Al(a,[a.shape[0],a.shape[1]]),r=so(e,t);return Al(r,[r.size])}if(2===n.rank&&1===a.rank){const e=Al(a,[-1,1]),t=so(n,e);return Al(t,[t.size])}{const e=Al(a,[a.shape[0],a.shape[1]]);return so(n,e)}}}),xc=Ds({einsum_:function(e,...t){const n=t.map(((e,t)=>As(e,`tensors${t}`,"einsum"))),a={equation:e};return ks.runKernel(qt,n,a)}}),wc=Ds({elu_:function(e){const t={x:As(e,"x","elu","float32")};return ks.runKernel(Kt,t)}}),kc=Ds({erf_:function(e){let t=As(e,"x","erf");ae("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Mi(t,"float32"));const n={x:t};return ks.runKernel(Yt,n)}});function vc(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Ic(e,t,n){const a=e.length+t.length,r=[];let s=0,i=0;for(let o=0;o<a;o++)-1===n.indexOf(o)?r.push(e[s++]):r.push(t[i++]);return r}function Nc(e,t){const n=[],a=e.length;for(let r=0;r<a;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function Sc(e,t){return Ic(e,t.map((e=>1)),t)}function Tc(e,t,n){ae(vc(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Cc(e,t){if(vc(e,t))return null;const n=[];for(let a=0;a<t;++a)-1===e.indexOf(a)&&n.push(a);return e.forEach((e=>n.push(e))),n}function $c(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Ec(e,t){const n=[];for(let a=t-e;a<t;++a)n.push(a);return n}const _c=Ds({max_:function(e,t=null,n=!1){const a={x:As(e,"x","max")},r={reductionIndices:t,keepDims:n};return ks.runKernel(Rn,a,r)}}),Ac=Ds({min_:function(e,t=null,n=!1){const a={x:As(e,"x","min")},r={axis:t,keepDims:n};return ks.runKernel(Bn,a,r)}}),Rc=Ds({sum_:function(e,t=null,n=!1){let a=As(e,"x","sum");"bool"===a.dtype&&(a=Mi(a,"int32"));const r={x:a},s={axis:t,keepDims:n};return ks.runKernel(Aa,r,s)}});function Fc(e,t,n=null){if(0===e.rank)return Ju(e);if(1!==e.rank&&null===n)return Fc(Al(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Rc(Ju(e),n);if(t===1/0)return _c(Ju(e),n);if(t===-1/0)return Ac(Ju(e),n);if("euclidean"===t||2===t)return Du(Rc(Xu(Ju(e),Gu(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return _c(Rc(Ju(e),n[0]),n[1]-1);if(t===1/0)return _c(Rc(Ju(e),n[1]),n[0]);if(t===-1/0)return Ac(Rc(Ju(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Du(Rc(Ou(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Dc=Ds({norm_:function(e,t="euclidean",n=null,a=!1){const r=Fc(e=As(e,"x","norm"),t,n);let s=r.shape;if(a){const t=ye(n,e.shape);s=Sc(r.shape,t)}return Al(r,s)}}),Oc=Ds({euclideanNorm_:function(e,t=null,n=!1){return Dc(e,"euclidean",t,n)}}),Mc=Ds({exp_:function(e){const t={x:As(e,"x","exp")};return ks.runKernel(Jt,t)}}),Lc=Ds({expandDims_:function(e,t=0){const n=As(e,"x","expandDims","string_or_numeric");ae(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const a={input:n},r={dim:t};return ks.runKernel(Qt,a,r)}}),zc=Ds({expm1_:function(e){const t={x:As(e,"x","expm1")};return ks.runKernel(en,t)}}),Pc=Ds({tile_:function(e,t){const n=As(e,"x","tile","string_or_numeric");ae(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const a={x:n},r={reps:t};return ks.runKernel(Xa,a,r)}}),Bc=Ds({eye_:function(e,t,n,a="float32"){null==t&&(t=e);const r=Oi([e,t],a),s=e<=t?e:t;for(let e=0;e<s;++e)r.set(1,e,e);const i=Al(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Pc(Lc(i,0),[n[0],1,1]);if(2===n.length)return Pc(Lc(Lc(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Pc(Lc(Lc(Lc(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),Wc=Ds({floor_:function(e){const t={x:As(e,"x","floor","float32")};return ks.runKernel(rn,t)}}),Vc=Ds({gather_:function(e,t,n=0,a=0){const r={x:As(e,"x","gather"),indices:As(t,"indices","gather","int32")},s={axis:n,batchDims:a};return ks.runKernel(un,r,s)}}),Uc=Ds({greater_:function(e,t){let n=As(e,"a","greater","string_or_numeric"),a=As(t,"b","greater","string_or_numeric");[n,a]=ps(n,a),Mo(n.shape,a.shape);const r={a:n,b:a};return ks.runKernel(cn,r)}}),Gc=Ds({greaterEqual_:function(e,t){let n=As(e,"a","greaterEqual","string_or_numeric"),a=As(t,"b","greaterEqual","string_or_numeric");[n,a]=ps(n,a),Mo(n.shape,a.shape);const r={a:n,b:a};return ks.runKernel(hn,r)}}),Hc=Ds({isFinite_:function(e){const t={x:As(e,"x","isFinite")};return ks.runKernel(mn,t)}}),jc=Ds({isInf_:function(e){const t={x:As(e,"x","isInf")};return ks.runKernel(gn,t)}}),qc=Ds({isNaN_:function(e){const t={x:As(e,"x","isNaN")};return ks.runKernel(yn,t)}}),Kc=Ds({leakyRelu_:function(e,t=.2){const n={x:As(e,"x","leakyRelu")},a={alpha:t};return ks.runKernel(bn,n,a)}}),Xc=Ds({less_:function(e,t){let n=As(e,"a","less","string_or_numeric"),a=As(t,"b","less","string_or_numeric");[n,a]=ps(n,a),Mo(n.shape,a.shape);const r={a:n,b:a};return ks.runKernel(xn,r)}}),Yc=Ds({lessEqual_:function(e,t){let n=As(e,"a","lessEqual","string_or_numeric"),a=As(t,"b","lessEqual","string_or_numeric");[n,a]=ps(n,a),Mo(n.shape,a.shape);const r={a:n,b:a};return ks.runKernel(wn,r)}});function Zc(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const a={start:e,stop:t,num:n};return ks.runKernel(kn,{},a)}const Jc=Ds({localResponseNormalization_:function(e,t=5,n=1,a=1,r=.5){const s=As(e,"x","localResponseNormalization");ae(4===s.rank||3===s.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${s.rank}.`)),ae(ce(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=s,o=!1;3===s.rank&&(o=!0,i=Al(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const u={x:i},l={depthRadius:t,bias:n,alpha:a,beta:r},c=ks.runKernel(_n,u,l);return o?Al(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Qc=Ds({log_:function(e){const t={x:As(e,"x","log","float32")};return ks.runKernel(vn,t)}}),eh=Ds({log1p_:function(e){const t={x:As(e,"x","log1p")};return ks.runKernel(In,t)}}),th=Ds({softplus_:function(e){const t={x:As(e,"x","softplus")};return ks.runKernel(Ea,t)}}),nh=Ds({logSigmoid_:function(e){const t=As(e,"x","logSigmoid");return Vu((e=>({value:_o(th(_o(e))),gradFunc:t=>Fu(t,Ol(_o(e)))})))(t)}}),ah=Ds({logSoftmax_:function(e,t=-1){const n=As(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const a=Vu(((e,n)=>{const a=_c(e,t,!0),r=Yu(e,a),s=Yu(Mi(r,"float32"),Qc(Rc(Mc(r),t,!0)));return n([s]),{value:s,gradFunc:(e,n)=>{const[a]=n,r=Mc(a);return Yu(e,Fu(Rc(e,t,!0),r))}}}));return a(n)}}),rh=Ds({logSumExp_:function(e,t=null,n=!1){const a=As(e,"x","logSumExp"),r=ye(t,a.shape),s=_c(a,r,!0),i=Yu(a,s),o=Mc(i),u=Rc(o,r),l=Qc(u),c=_u(Al(s,l.shape),l);if(n){const e=Sc(c.shape,r);return Al(c,e)}return c}}),sh=Ds({logicalAnd_:function(e,t){const n=As(e,"a","logicalAnd","bool"),a=As(t,"b","logicalAnd","bool");Mo(n.shape,a.shape);const r={a:n,b:a};return ks.runKernel(Nn,r)}}),ih=Ds({logicalNot_:function(e){const t={x:As(e,"x","logicalNot","bool")};return ks.runKernel(Sn,t)}}),oh=Ds({logicalOr_:function(e,t){const n=As(e,"a","logicalOr","bool"),a=As(t,"b","logicalOr","bool");Mo(n.shape,a.shape);const r={a:n,b:a};return ks.runKernel(Tn,r)}}),uh=Ds({logicalXor_:function(e,t){const n=As(e,"a","logicalXor","bool"),a=As(t,"b","logicalXor","bool");return Mo(n.shape,a.shape),sh(oh(e,t),ih(sh(e,t)))}}),lh=2147483648,ch=Ds({searchSorted_:function(e,t,n="left"){const a=As(e,"sortedSequence","searchSorted"),r=As(t,"values","searchSorted"),s=a.shape[a.shape.length-1],i=r.shape[r.shape.length-1],o=Al(a,[-1,s]),u=Al(r,[-1,i]);if(o.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(oe(u.shape)>=lh)throw new Error("values tensor size must less than 2147483648");if(o.shape[1]>=lh)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);const l={sortedSequence:o,values:u},c={side:n};return ks.runKernel(ka,l,c)}});function hh(e,t){return ch(e,t,"left")}const ph=Ds({maxPool_:function(e,t,n,a,r){const s=As(e,"x","maxPool");let i=s,o=!1;3===s.rank&&(o=!0,i=Al(s,[1,s.shape[0],s.shape[1],s.shape[2]])),ae(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),ae($l(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),_l("maxPool",a,r);const u={x:i},l={filterSize:t,strides:n,pad:a,dimRoundingMode:r},c=ks.runKernel(Dn,u,l);return o?Al(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),dh=Ds({maxPool3d_:function(e,t=[1,1,1],n,a,r,s="NDHWC"){const i=As(e,"x","maxPool3d");let o=i,u=!1;4===i.rank&&(u=!0,o=Al(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ae(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),ae("NDHWC"===s,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),_l("maxPool3d",a,r);const l={x:o},c={filterSize:t,strides:n,pad:a,dimRoundingMode:r,dataFormat:s},h=ks.runKernel(Mn,l,c);return u?Al(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),fh=Ds({maxPoolWithArgmax_:function(e,t,n,a,r=!1){const s={x:As(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:a,includeBatchInIndex:r},o=ks.runKernel(zn,s,i);return{result:o[0],indexes:o[1]}}}),mh=Ds({mean_:function(e,t=null,n=!1){const a={x:As(e,"x","mean")},r={axis:t,keepDims:n};return ks.runKernel(Pn,a,r)}});function gh(e,t="float32"){if("complex64"===t){const t=gh(e,"float32"),n=gh(e,"float32");return Os(t,n)}const n=Le(oe(e),t);return ks.makeTensor(n,e,t)}function yh(e,t="float32"){if("complex64"===t){const t=yh(e,"float32"),n=gh(e,"float32");return Os(t,n)}const n=Me(oe(e),t);return ks.makeTensor(n,e,t)}function bh(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let a=As(e,"x","meshgrid",e instanceof ts?e.dtype:"float32");if(void 0===t)return[a];let r=As(t,"y","meshgrid",t instanceof ts?t.dtype:"float32");const s=oe(a.shape),i=oe(r.shape);return"xy"===n?(a=Al(a,[1,-1]),r=Al(r,[-1,1]),[so(yh([i,1],a.dtype),a),so(r,yh([1,s],r.dtype))]):(a=Al(a,[-1,1]),r=Al(r,[1,-1]),[so(a,yh([1,i],a.dtype)),so(yh([s,1],r.dtype),r)])}const xh=Ds({minimum_:function(e,t){let n=As(e,"a","minimum"),a=As(t,"b","minimum");[n,a]=ps(n,a),"bool"===n.dtype&&(n=Mi(n,"int32"),a=Mi(a,"int32")),Mo(n.shape,a.shape);const r={a:n,b:a};return ks.runKernel(Wn,r)}}),wh=Ds({mirrorPad_:function(e,t,n){ae("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const a=As(e,"x","mirrorPad");if(0===a.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");ae(t.length===a.rank,(()=>`Padding doesn't match input. Must be ${a.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<a.rank;e++)ae(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ae(t[e][0]>=0&&t[e][0]<=a.shape[e]-r&&t[e][1]>=0&&t[e][1]<=a.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${a.shape[e]-r} or less than 0 for input of shape ${a.shape}`));const s={paddings:t,mode:n},i={x:a};return ks.runKernel(Vn,i,s)}}),kh=Ds({mod_:function(e,t){let n=As(e,"a","mod"),a=As(t,"b","mod");[n,a]=ps(n,a);const r={a:n,b:a};return ks.runKernel(Un,r)}}),vh=Ds({moments_:function(e,t=null,n=!1){const a=ye(t,(e=As(e,"x","moments")).shape),r=mh(e,a,n);let s=r.shape;n||(s=Sc(r.shape,a));const i=Ou(Yu(Mi(e,"float32"),Al(r,s)));return{mean:r,variance:mh(i,a,n)}}}),Ih=Ds({multiRNNCell_:function(e,t,n,a){const r=As(t,"data","multiRNNCell"),s=Rs(n,"c","multiRNNCell"),i=Rs(a,"h","multiRNNCell");let o=r;const u=[];for(let t=0;t<e.length;t++){const n=e[t](o,s[t],i[t]);u.push(n[0]),u.push(n[1]),o=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}}),Nh=Ds({multinomial_:function(e,t,n,a=!1){const r=As(e,"logits","multinomial"),s=r.size,i=r.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?Al(r,[1,-1]):r},u={numSamples:t,seed:n,normalized:a},l=ks.runKernel(Gn,o,u);return 1===i?Al(l,[l.size]):l}}),Sh=Ds({notEqual_:function(e,t){let n=As(e,"a","notEqual","string_or_numeric"),a=As(t,"b","notEqual","string_or_numeric");[n,a]=ps(n,a),Mo(n.shape,a.shape);const r={a:n,b:a};return ks.runKernel(qn,r)}}),Th=Ds({onesLike_:function(e){const t={x:As(e,"x","onesLike")};return ks.runKernel(Zn,t)}}),Ch=Ds({outerProduct_:function(e,t){const n=As(e,"v1","outerProduct"),a=As(t,"v2","outerProduct");ae(1===n.rank&&1===a.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${a.rank}.`));const r=Al(n,[-1,1]),s=Al(a,[1,-1]);return so(r,s)}}),$h=Ds({pad_:function(e,t,n=0){const a=As(e,"x","pad");if(0===a.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},s={x:a};return ks.runKernel(ea,s,r)}}),Eh=Ds({pad1d_:function(e,t,n=0){return ae(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),$h(e,[t],n)}}),_h=Ds({pad2d_:function(e,t,n=0){return ae(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),$h(e,t,n)}}),Ah=Ds({pad3d_:function(e,t,n=0){return ae(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),$h(e,t,n)}}),Rh=Ds({pad4d_:function(e,t,n=0){return ae(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),$h(e,t,n)}}),Fh=Ds({spaceToBatchND_:function(e,t,n){const a=As(e,"x","spaceToBatchND");ae(a.rank>=1+t.length,(()=>`input rank ${a.rank} should be > than [blockShape] ${t.length}`)),ae(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),ae(a.shape.reduce(((e,a,r)=>r>0&&r<=t.length?e&&(a+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${a.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:a},s={blockShape:t,paddings:n};return ks.runKernel(Ra,r,s)}}),Dh=Ds({pool_:function(e,t,n,a,r,s,i){null==r&&(r=[1,1]),null==s&&(s=1),0===a&&(a="valid");const o=As(e,"x","maxPool");let u=o,l=!1;3===o.rank&&(l=!0,u=Al(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ae($l(s,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${r}'`));const c=bl(u.shape,t,s,r,a),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===a?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),a=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-a[t]));return n.map(((e,t)=>[a[t],r[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const a=n.map((e=>e[0])),r=n.map((e=>e[1])),s=e.concat(a,r),i=t.map(((e,t)=>(e-s[t]%e)%e)),o=r.map(((e,t)=>e+i[t]));return[t.map(((e,t)=>[a[t],o[t]])),t.map(((e,t)=>[0,i[t]]))]}([c.inHeight,c.inWidth],h,p),g=d?a:"valid",y=d?u:Fh(u,h,f),b=("avg"===n?()=>Rl(y,t,s,g,i):()=>ph(y,t,s,g,i))(),x=d?b:Pl(b,h,m);return l?Al(x,[x.shape[1],x.shape[2],x.shape[3]]):x}}),Oh=Ds({prelu_:function(e,t){const n={x:As(e,"x","prelu"),alpha:As(t,"alpha","prelu")};return ks.runKernel(aa,n)}}),Mh=Ds({prod_:function(e,t=null,n=!1){let a=As(e,"x","prod");"bool"===a.dtype&&(a=Mi(a,"int32"));const r={x:a},s={axis:t,keepDims:n};return ks.runKernel(ra,r,s)}}),Lh=Ds({raggedGather_:function(e,t,n,a){const r={paramsNestedSplits:e.map(((e,t)=>As(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:As(t,"paramsDenseValues","raggedGather"),indices:As(n,"indices","raggedGather","int32")},s={outputRaggedRank:a},i=ks.runKernel(sa,r,s);return{outputNestedSplits:i.slice(0,i.length-1),outputDenseValues:i[i.length-1]}}}),zh=Ds({raggedTensorToTensor_:function(e,t,n,a,r){const s=As(e,"shape","raggedTensorToTensor","int32"),i=As(t,"values","raggedTensorToTensor"),o={shape:s,values:i,defaultValue:As(n,"defaultValue","raggedTensorToTensor",i.dtype),rowPartitionTensors:a.map(((e,t)=>As(e,`tensors${t}`,"raggedTensorToTensor","int32")))},u={rowPartitionTypes:r};return ks.runKernel(ia,o,u)}}),Ph=Ds({rand_:function(e,t,n){const a=oe(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(a);else if("int32"===n)r=new Int32Array(a);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(a)}for(let e=0;e<a;e++)r[e]=t();return ks.makeTensor(r,e,n)}});var Bh=n(391);class Wh{constructor(e,t,n,a,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=a,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const s=r||Math.random();this.random=Bh.alea(s.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let a,r,s;do{a=2*this.random()-1,r=2*this.random()-1,s=a*a+r*r}while(s>=1||0===s);const i=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*a*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Vh{constructor(e,t,n,a){this.alpha=e,this.beta=1/t,this.dtype=n;const r=a||Math.random();this.randu=Bh.alea(r.toString()),this.randn=new Wh(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,a,r,s;for(;;){do{a=this.randn.nextValue(),s=1+this.c*a}while(s<=0);if(s*=s*s,e=a*a,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),r=this.randu(),r<t||Math.log(r)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Uh{constructor(e=0,t=1,n,a){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==a&&(a=Math.random()),"number"==typeof a&&(a=a.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Bh.alea(a)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Gh=Ds({randomGamma_:function(e,t,n=1,a="float32",r){if(null==n&&(n=1),null==a&&(a="float32"),"float32"!==a&&"int32"!==a)throw new Error(`Unsupported data type ${a}`);const s=new Vh(t,n,a,r),i=Oi(e,a);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),Hh=Ds({randomNormal_:function(e,t=0,n=1,a,r){if(null!=a&&"bool"===a)throw new Error(`Unsupported data type ${a}`);const s=new Wh(t,n,a,!1,r),i=Oi(e,a);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),jh=Ds({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Hh(e,0,1,t,n)}}),qh=Ds({randomUniform_:function(e,t=0,n=1,a="float32",r){const s=Oi(e,a),i=new Uh(t,n,null,r);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}});function Kh(e,t,n=1,a="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:a};return ks.runKernel(oa,{},r)}const Xh=Ds({reciprocal_:function(e){const t={x:As(e,"x","reciprocal")};return ks.runKernel(la,t)}}),Yh=Ds({relu_:function(e){const t={x:As(e,"x","relu")};return ks.runKernel(ca,t)}}),Zh=Ds({relu6_:function(e){const t={x:As(e,"x","relu6")};return ks.runKernel(ga,t)}}),Jh=Ds({reverse_:function(e,t){const n={x:As(e,"x","reverse")},a={dims:t};return ks.runKernel(ya,n,a)}}),Qh=Ds({reverse1d_:function(e){const t=As(e,"x","reverse");return ae(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Jh(t,0)}}),ep=Ds({reverse2d_:function(e,t){const n=As(e,"x","reverse");return ae(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Jh(n,t)}}),tp=Ds({reverse3d_:function(e,t){const n=As(e,"x","reverse");return ae(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Jh(n,t)}}),np=Ds({reverse4d_:function(e,t){const n=As(e,"x","reverse");return ae(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Jh(n,t)}}),ap=Ds({round_:function(e){const t={x:As(e,"x","round")};return ks.runKernel(ba,t)}}),rp=Ds({rsqrt_:function(e){const t={x:As(e,"x","rsqrt","float32")};return ks.runKernel(xa,t)}}),sp=Ds({selu_:function(e){const t={x:As(e,"x","selu")};return ks.runKernel(Ia,t)}}),ip=Ds({separableConv2d_:function(e,t,n,a,r,s=[1,1],i="NHWC"){const o=As(e,"x","separableConv2d"),u=As(t,"depthwiseFilter","separableConv2d"),l=As(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=Al(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");ae(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),ae(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),ae(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),ae(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),ae(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const p=u.shape[2],d=u.shape[3];ae(l.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${l.shape[2]}.`));const f=pc(c,u,a,r,i,s),m=Ql(f,l,1,"valid",i);return h?Al(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),op=async function(e,t){const n=As(e,"x","setdiff1d"),a=As(t,"y","setdiff1d");ae(n.dtype===a.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${a.dtype}).`)),ae(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),ae(1===a.rank,(()=>`y should be 1D tensor, but got y (${a.shape}).`));const r=await n.data(),s=await a.data(),i=new Set(s);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const u=new Zr([o],n.dtype),l=new Zr([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(u.values[t]=r[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]},up=Ds({sign_:function(e){const t={x:As(e,"x","sign")};return ks.runKernel(Ca,t)}}),lp=Ds({sin_:function(e){const t={x:As(e,"x","sin","float32")};return ks.runKernel(Sa,t)}}),cp=Ds({sinh_:function(e){const t={x:As(e,"x","sinh")};return ks.runKernel(Ta,t)}}),hp=Ds({slice1d_:function(e,t,n){const a=As(e,"x","slice1d");return ae(1===a.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${a.rank} tensor`)),Ml(a,[t],[n])}}),pp=Ds({slice2d_:function(e,t,n){const a=As(e,"x","slice2d");return ae(2===a.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${a.rank} tensor`)),Ml(a,t,n)}}),dp=Ds({slice3d_:function(e,t,n){const a=As(e,"x","slice3d");return ae(3===a.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${a.rank} tensor`)),Ml(a,t,n)}}),fp=Ds({slice4d_:function(e,t,n){const a=As(e,"x","slice4d");return ae(4===a.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${a.rank} tensor`)),Ml(a,t,n)}}),mp=Ds({softmax_:function(e,t=-1){const n=As(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const a={logits:n},r={dim:t};return ks.runKernel(Da,a,r)}}),gp=Ds({fft_:function(e){ae("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return ks.runKernel(tn,t)}}),yp=Ds({ifft_:function(e){ae("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return ks.runKernel(dn,t)}}),bp=Ds({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let a;if(t<=2){const r=Al(e,[n,t]);a=yp(r)}else{const r=[n,2*(t-1)],s=Al(Ao(e),[n,t]),i=Al(Eo(e),[n,t]),o=Jh(Ml(s,[0,1],[n,t-2]),1),u=Fu(Jh(Ml(i,[0,1],[n,t-2]),1),Gu(-1)),l=Dl([s,o],1),c=Dl([i,u],1),h=Al(Os(l,c),[r[0],r[1]]);a=yp(h)}if(a=Ao(a),3===e.rank&&0!==e.shape[0]){const t=a,n=e.shape[0];a=Al(a,[n,a.shape[0]/n,a.shape[1]]),t.dispose()}return a}}),xp=Ds({split_:function(e,t,n=0){const a={x:As(e,"x","split")},r={numOrSizeSplits:t,axis:n};return ks.runKernel(Fa,a,r)}}),wp=Ds({rfft_:function(e,t){ae("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const a=e.size/n;let r;if(null!=t&&t<n){const a=e.shape.map((e=>0)),s=e.shape.map((e=>e));s[e.shape.length-1]=t,r=Ml(e,a,s),n=t}else if(null!=t&&t>n){const a=e.shape.map((e=>e));a[e.shape.length-1]=t-n,r=Dl([e,gh(a)],e.shape.length-1),n=t}else r=e;const s=Mu(r),i=Al(Os(r,s),[a,n]),o=gp(i),u=Math.floor(n/2)+1,l=Ao(o),c=Eo(o),h=xp(l,[u,n-u],l.shape.length-1),p=xp(c,[u,n-u],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=u,Al(Os(h[0],p[0]),d)}}),kp=Ds({squaredDifference_:function(e,t){let n=As(e,"a","squaredDifference"),a=As(t,"b","squaredDifference");[n,a]=ps(n,a),Mo(n.shape,a.shape);const r={a:n,b:a};return ks.runKernel(Ba,r,{})}}),vp=Ds({squeeze_:function(e,t){const n=As(e,"x","squeeze","string_or_numeric");return Al(n,be(n.shape,t).newShape)}}),Ip=Ds({stack_:function(e,t=0){const n=Rs(e,"tensors","stack","string_or_numeric");ae(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&ae(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const a=n,r={axis:t};return ks.runKernel(Qn,a,r)}}),Np=Ds({step_:function(e,t=0){const n={x:As(e,"x","step")},a={alpha:t};return ks.runKernel(rr,n,a)}}),Sp=Ds({stridedSlice_:function(e,t,n,a,r=0,s=0,i=0,o=0,u=0){const l={x:As(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:a,beginMask:r,endMask:s,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};return ks.runKernel(Va,l,c)}}),Tp=Ds({tan_:function(e){const t={x:As(e,"x","tan","float32")};return ks.runKernel(qa,t)}});function Cp(e,t){se(e);const n=$s(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Ms(e,null,n,t)}function $p(e,t,n){if(se(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const a=$s(e,n);if(2!==a.length&&1!==a.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Ms(e,t,a,n)}function Ep(e,t,n){if(se(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const a=$s(e,n);if(4!==a.length&&1!==a.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Ms(e,t,a,n)}function _p(e,t,n){if(se(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const a=$s(e,n);if(5!==a.length&&1!==a.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Ms(e,t,a,n)}function Ap(e,t,n){if(se(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const a=$s(e,n);if(6!==a.length&&1!==a.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Ms(e,t=t||a,a,n)}const Rp=Ds({topk_:function(e,t=1,n=!0){const a=As(e,"x","topk");if(0===a.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=a.shape[a.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const s={x:a},i={k:t,sorted:n},[o,u]=ks.runKernel(Ya,s,i);return{values:o,indices:u}}}),Fp=Ds({truncatedNormal_:function(e,t=0,n=1,a,r){if(null!=a&&"bool"===a)throw new Error("Unsupported data type $ { dtype }");const s=new Wh(t,n,a,!0,r),i=Oi(e,a);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),Dp=Ds({unique_:function(e,t=0){const n=As(e,"x","unique","string_or_numeric");ae(n.rank>0,(()=>"The input tensor must be at least 1D"));const a={x:n},r={axis:t},[s,i]=ks.runKernel(Qa,a,r);return{values:s,indices:i}}}),Op=Ds({unsortedSegmentSum_:function(e,t,n){const a=As(e,"x","unsortedSegmentSum"),r=As(t,"segmentIds","unsortedSegmentSum","int32");ae(ce(n),(()=>"numSegments must be of dtype int"));const s={x:a,segmentIds:r},i={numSegments:n};return ks.runKernel(tr,s,i)}}),Mp=Ds({unstack_:function(e,t=0){const n=As(e,"x","unstack","string_or_numeric");ae(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const a={value:n},r={axis:t};return ks.runKernel(er,a,r)}});function Lp(e,t){return ch(e,t,"right")}function zp(e,t=!0,n,a){return ks.makeVariable(e,t,n,a)}function Pp(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const a=Oi(e,"int32"),r=Oi([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const s=a.indexToLoc(n[t]),i=t*e.length;r.values.set(s,i)}return r.toTensor()}const Bp=async function(e){const t=As(e,"condition","whereAsync","bool"),n=await t.data(),a=Pp(t.shape,n);return e!==t&&t.dispose(),a},Wp=async function(e,t,n){const a=As(e,"tensor","boolMask"),r=As(t,"mask","boolMask","bool"),s=null==n?0:n,i=r.rank,o=a.shape;ae(i>0,(()=>"mask cannot be scalar")),re(o.slice(s,s+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=s;e<s+i;e++)u*=o[e];const l=o.slice(0,s).concat([u],o.slice(s+i)),c=Al(a,l),h=Al(r,[-1]),p=await Bp(h),d=vp(p,[1]),f=Vc(c,d,s);return e!==a&&a.dispose(),t!==r&&r.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f},Vp=Ds({movingAverage_:function(e,t,n,a,r=!0){const s=As(e,"v","movingAverage"),i=As(t,"x","movingAverage"),o=As(n,"decay","movingAverage");ds(s,i),ae(le(s.shape,i.shape),(()=>"Shape mismatch in v and x"));const u=Gu(1),l=Yu(u,o);let c=Fu(Yu(i,s),l);if(r){ae(null!=a,(()=>"When using zeroDebias: true, step is required."));const e=As(a,"step","movingAverage");c=Ru(c,Yu(u,Xu(o,e)))}return _u(s,c)}}),Up=Ds({scatterND_:function(e,t,n){const a=As(e,"indices","scatterND","int32"),r=As(t,"updates","scatterND");Ho(r,a,n);const s={indices:a,updates:r},i={shape:n};return ks.runKernel(wa,s,i)}}),Gp=Ds({sparseToDense_:function(e,t,n,a=0){const r=As(e,"sparseIndices","sparseToDense","int32"),s=As(t,"sparseValues","sparseToDense","string_or_numeric"),i=As(a,"defaultValue","sparseToDense",s.dtype);!function(e,t,n,a){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==a.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,s,n,i);const o={sparseIndices:r,sparseValues:s,defaultValue:i},u={outputShape:n};return ks.runKernel(Pa,o,u)}}),Hp=Ds({gatherND_:function(e,t){const n=As(t,"indices","gatherND","int32"),a={params:As(e,"x","gatherND","string_or_numeric"),indices:n};return ks.runKernel(ln,a)}}),jp=Ds({dropout_:function(e,t,n,a){const r=As(e,"x","dropout");if(ae("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),ae(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof ts?r.clone():r;const s=function(e,t){if(null==t)return e.shape.slice();if(le(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let a=0;a<e.shape.length;a++)null==t[a]&&null!=e.shape[a]?n.push(e.shape[a]):n.push(t[a]);return n}return t}(r,n),i=1-t,o=Ru(Wc(_u(qh(s,0,1,"float32",a),i)),i);return Fu(r,o)}});function qp(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Kp(e,t,n){const a=1-e%2,r=new Float32Array(e);for(let s=0;s<e;++s){const i=2*Math.PI*s/(e+a-1);r[s]=t-n*Math.cos(i)}return Cp(r,"float32")}const Xp=async function(e,t,n=1){const a=As(e,"predictions","inTopK"),r=As(t,"targets","inTopK");ae(a.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${a.rank}`)),ae(a.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${a.rank} and targets rank ${r.rank}`)),re(a.shape.slice(0,a.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=a.shape[a.shape.length-1];ae(n>0&&n<=s,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`));const i=await a.data(),o=await r.data(),[u,l]=[i.length/s,s],c=xe("bool",u);for(let e=0;e<u;e++){const t=e*l,a=i.subarray(t,t+l),r=[];for(let e=0;e<a.length;e++)r.push({value:a[e],index:e});r.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(r[t].index===o[e]){c[e]=1;break}}return e!==a&&a.dispose(),t!==r&&r.dispose(),Ls(c,r.shape,"bool")},Yp=Ds({conv2DBackpropFilter_:function(e,t,n,a,r,s="NHWC",i){let o=e;3===e.rank&&(o=Al(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Al(t,[1,t.shape[0],t.shape[1],t.shape[2]])),ae(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),ae(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),ae(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===s?o.shape[3]:o.shape[1],c="NHWC"===s?u.shape[3]:u.shape[1];ae(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),ae(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),_l("conv2dDerFilter",r,i);const h={x:o,dy:u},p={strides:a,pad:r,dataFormat:s,dimRoundingMode:i,filterShape:n};return ks.runKernel(Ct,h,p)}});function Zp(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Fu(e,Np(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Jp(e,t){let n=t;const a=Oo(e.shape,t.shape);return a.length>0&&(n=Rc(n,a)),Al(n,e.shape)}function Qp(e,t,n,a){if("linear"===t)return e;if("relu"===t)return Yh(e);if("elu"===t)return wc(e);if("relu6"===t)return Zh(e);if("prelu"===t)return Oh(e,n);if("leakyrelu"===t)return Kc(e,a);if("sigmoid"===t)return Ol(e);throw new Error(`Unknown fused activation ${t}.`)}const ed=(e,t)=>!(e>0)||"linear"===t,td=Ds({fusedConv2d_:function({x:e,filter:t,strides:n,pad:a,dataFormat:r="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(u=u||"linear",!1===ed(ks.state.gradientDepth,u)){ae("NHWC"===r,(()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let h=Ql(e,t,n,a,r,s,i);return null!=o&&(h=_u(h,o)),Qp(h,u,l,c)}const h=As(e,"x","conv2d","float32"),p=As(t,"filter","conv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=Al(h,[1,h.shape[0],h.shape[1],h.shape[2]])),ae(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),ae(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),_l("fused conv2d",a,i);const m="NHWC"===r?d.shape[3]:d.shape[1];ae(p.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${p.shape[2]}.`)),ae($l(n,s),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`));const g=wl(d.shape,p.shape,n,s,a,i);let y,b;if(null!=o&&(y=As(o,"bias","fused conv2d"),[y]=ps(y,h),"NHWC"===r?Mo(g.outShape,y.shape):(ae(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),ae(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=l){const e=l.shape;if(ae(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)ae(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{Mo(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=As(l,"prelu weights","fused conv2d")}const x=(e,t)=>{ae("NHWC"===r,(()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`));const[i,o,l,c]=t,h=Zp(e,l,u);ae(Cl(s),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const p=[tc(o.shape,h,i,n,a),Yp(o,h,i.shape,n,a)];if(null!=c){const e=Jp(c,h);p.push(e)}return p},w={x:d,filter:p,bias:y,preluActivationWeights:b},k={strides:n,pad:a,dataFormat:r,dilations:s,dimRoundingMode:i,activation:u,leakyreluAlpha:c};if(null==o){const e=Vu(((e,t,n)=>{let a=ks.runKernel(ur,w,k);return n([t,e,a]),f&&(a=Al(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}}));return e(d,p)}{const e=Vu(((e,t,n,a)=>{let r=ks.runKernel(ur,w,k);return a([t,e,r,n]),f&&(r=Al(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}));return e(d,p,y)}}}),nd=Ds({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,a,r,s=[1,1],i){let o=e;3===e.rank&&(o=Al(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Al(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:o,dy:u},c={strides:a,pad:r,dimRoundingMode:i,dilations:s,filterShape:n};return ks.runKernel(Bt,l,c)}}),ad=Ds({depthwiseConv2dNativeBackpropInput_:function(e,t,n,a,r,s=[1,1],i){let o=t,u=!1;3===t.rank&&(u=!0,o=Al(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:o,filter:n},c={strides:a,pad:r,dimRoundingMode:i,dilations:s,inputShape:e},h=ks.runKernel(Wt,l,c);return u?Al(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),rd=Ds({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:a,dataFormat:r="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===ed(ks.state.gradientDepth,u)){let h=pc(e,t,n,a,r,s,i);return null!=o&&(h=_u(h,o)),Qp(h,u,l,c)}const h=As(e,"x","depthwiseConv2d","float32"),p=As(t,"filter","depthwiseConv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=Al(h,[1,h.shape[0],h.shape[1],h.shape[2]])),ae(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),ae(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),ae(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==s&&(s=[1,1]),ae($l(n,s),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),_l("fused depthwiseConv2d",a,i);const m=wl(d.shape,p.shape,n,s,a,i,!0);let g,y;null!=o&&(g=As(o,"bias","fused conv2d"),[g]=ps(g,h),Mo(m.outShape,g.shape)),null!=l&&(y=As(l,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{ae(Cl(s),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`));const[r,o,l,c]=t,h=Zp(e,l,u),p=ad(o.shape,h,r,n,a,s,i),d=nd(o,h,r.shape,n,a,s,i);return null!=c?[p,d,Jp(g,h)]:[p,d]},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:a,dataFormat:r,dilations:s,dimRoundingMode:i,activation:u,leakyreluAlpha:c};if(null==o){const e=Vu(((e,t,n)=>{let a=ks.runKernel(lr,x,w);return n([t,e,a]),f&&(a=Al(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:b}}));return e(d,p)}{const e=Vu(((e,t,n,a)=>{let r=ks.runKernel(lr,x,w);return a([t,e,r,n]),f&&(r=Al(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,p,g)}}}),sd=Ds({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:a=!1,bias:r,activation:s="linear",preluActivationWeights:i,leakyreluAlpha:o=.2}){if(!1===ed(ks.state.gradientDepth,s)){let u=so(e,t,n,a);return null!=r&&(u=_u(u,r)),Qp(u,s,i,o)}let u=As(e,"a","fused matMul"),l=As(t,"b","fused matMul");[u,l]=ps(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],h=a?l.shape[l.rank-1]:l.shape[l.rank-2],p=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=a?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=oe(f),y=oe(m);ae(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${a} must match.`));const b=Mo(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([p,d]),x=Al(u,n?[g,c,p]:[g,p,c]),w=Al(l,a?[y,d,h]:[y,h,d]);let k,v;null!=r&&(k=As(r,"bias","fused matMul"),[k]=ps(k,u),Mo(b,k.shape)),null!=i&&(v=As(i,"prelu weights","fused matMul"));const I=(e,t)=>{const[i,o,u,l]=t,c=Zp(Al(e,u.shape),u,s);let h,p;return n||a?!n&&a?(h=so(c,o,!1,!1),p=so(c,i,!0,!1)):n&&!a?(h=so(o,c,!1,!0),p=so(i,c,!1,!1)):(h=so(o,c,!0,!0),p=so(c,i,!0,!0)):(h=so(c,o,!1,!0),p=so(i,c,!0,!1)),null!=r?[h,p,Jp(l,c)]:[h,p]},N={a:x,b:w,bias:k,preluActivationWeights:v},S={transposeA:n,transposeB:a,activation:s,leakyreluAlpha:o};if(null==r){const e=Vu(((e,t,n)=>{const a=ks.runKernel(or,N,S);return n([e,t,a]),{value:Al(a,b),gradFunc:I}}));return e(x,w)}{const e=Vu(((e,t,n,a)=>{const r=ks.runKernel(or,N,S);return a([e,t,r,n]),{value:Al(r,b),gradFunc:I}}));return e(x,w,k)}}}),id=Ds({hammingWindow_:function(e){return Kp(e,.54,.46)}}),od=Ds({hannWindow_:function(e){return Kp(e,.5,.5)}}),ud=Ds({frame_:function(e,t,n,a=!1,r=0){let s=0;const i=[];for(;s+t<=e.size;)i.push(Ml(e,s,t)),s+=n;if(a)for(;s<e.size;){const a=s+t-e.size,o=Dl([Ml(e,s,t-a),qu([a],r)]);i.push(o),s+=n}return 0===i.length?$p([],[0,t]):Al(Dl(i),[i.length,t])}}),ld=Ds({stft_:function(e,t,n,a,r=od){null==a&&(a=qp(t));const s=ud(e,t,n),i=Fu(s,r(t));return wp(i,a)}}),cd=Ds({cropAndResize_:function(e,t,n,a,r="bilinear",s=0){const i=As(e,"image","cropAndResize"),o=As(t,"boxes","cropAndResize","float32"),u=As(n,"boxInd","cropAndResize","int32"),l=o.shape[0];ae(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),ae(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${o.shape}.`)),ae(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${o.shape}.`)),ae(2===a.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${a.length}.`)),ae(a[0]>=1&&a[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${a}`)),ae("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:i,boxes:o,boxInd:u},h={method:r,extrapolationValue:s,cropSize:a};return ks.runKernel(Mt,c,h)}}),hd=Ds({flipLeftRight_:function(e){const t=As(e,"image","flipLeftRight","float32");ae(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return ks.runKernel(an,n,{})}}),pd=Ds({grayscaleToRGB_:function(e){const t=As(e,"image","grayscaleToRGB"),n=t.rank-1,a=t.shape[n];ae(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),ae(1===a,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${a}.`));const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,Pc(t,r)}}),dd=Ds({rotateWithOffset_:function(e,t,n=0,a=.5){const r=As(e,"image","rotateWithOffset","float32");ae(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const s={image:r},i={radians:t,fillValue:n,center:a};return ks.runKernel(ir,s,i)}});function fd(e,t,n,a,r,s){null==a&&(a=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==s&&(s=0);const i=e.shape[0];return n=Math.min(n,i),ae(0<=a&&a<=1,(()=>`iouThreshold must be in [0, 1], but was '${a}'`)),ae(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),ae(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),ae(1===t.rank,(()=>"scores must be a 1D tensor")),ae(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),ae(0<=s&&s<=1,(()=>`softNmsSigma must be in [0, 1], but was '${s}'`)),{maxOutputSize:n,iouThreshold:a,scoreThreshold:r,softNmsSigma:s}}const md=Ds({nonMaxSuppression_:function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY){const s=As(e,"boxes","nonMaxSuppression","float32"),i=As(t,"scores","nonMaxSuppression","float32"),o=fd(s,i,n,a,r),u={maxOutputSize:n=o.maxOutputSize,iouThreshold:a=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return ks.runKernel(Kn,{boxes:s,scores:i},u)}});function gd(e,t,n){const a=function(e,t,n){return function(e,t,n){let a=0,r=e.length,s=0,i=!1;for(;a<r;){s=a+(r-a>>>1);const o=n(t,e[s]);o>0?a=s+1:(r=s,i=!o)}return i?a:-a-1}(e,t,n||yd)}(e,t,n),r=a<0?-(a+1):a;e.splice(r,0,t)}function yd(e,t){return e>t?1:e<t?-1:0}function bd(e,t,n,a,r){return kd(e,t,n,a,r,0)}function xd(e,t,n,a,r,s){return kd(e,t,n,a,r,0,!1,s,!0)}function wd(e,t,n,a,r,s){return kd(e,t,n,a,r,s,!0)}function kd(e,t,n,a,r,s,i=!1,o=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>r&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(Nd);const c=s>0?-.5/s:0,h=[],p=[];for(;h.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:s,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=vd(e,s,h[n]);if(i>=a){o=!0;break}if(t.score=t.score*Id(a,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(s),p.push(t.score)):t.score>r&&gd(l,t,Nd))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),u&&(m.validOutputs=d),m}function vd(e,t,n){const a=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),s=Math.min(a[0],a[2]),i=Math.min(a[1],a[3]),o=Math.max(a[0],a[2]),u=Math.max(a[1],a[3]),l=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-s)*(u-i),f=(h-l)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(s,l),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Id(e,t,n){const a=Math.exp(t*n*n);return n<=e?a:0}function Nd(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Sd=Ds({nonMaxSuppressionWithScore_:function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,s=0){const i=As(e,"boxes","nonMaxSuppression"),o=As(t,"scores","nonMaxSuppression"),u=fd(i,o,n,a,r,s),l={boxes:i,scores:o},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:a=u.iouThreshold,scoreThreshold:r=u.scoreThreshold,softNmsSigma:s=u.softNmsSigma},h=ks.runKernel(Yn,l,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),Td=Ds({nonMaxSuppressionPadded_:function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,s=!1){const i=As(e,"boxes","nonMaxSuppression"),o=As(t,"scores","nonMaxSuppression"),u=fd(i,o,n,a,r,null),l={boxes:i,scores:o},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:s},h=ks.runKernel(Xn,l,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),Cd=Ds({resizeBilinear_:function(e,t,n=!1,a=!1){const r=As(e,"images","resizeBilinear");ae(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),ae(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),ae(!1===a||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let s=r,i=!1;3===r.rank&&(i=!0,s=Al(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:s},u={alignCorners:n,halfPixelCenters:a,size:t},l=ks.runKernel(fa,o,u);return i?Al(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),$d=Ds({resizeNearestNeighbor_:function(e,t,n=!1,a=!1){const r=As(e,"images","resizeNearestNeighbor");ae(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),ae(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),ae("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),ae(!1===a||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let s=r,i=!1;3===r.rank&&(i=!0,s=Al(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:s},u={alignCorners:n,halfPixelCenters:a,size:t},l=ks.runKernel(pa,o,u);return i?Al(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),Ed=Ds({threshold_:function(e,t="binary",n=!1,a=.5){const r=As(e,"image","threshold"),s=r.shape[0]*r.shape[1];let i,o,u,l,c=Fu(Cp([a]),255);if(ae(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),ae(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),ae("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),ae("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[i,o,u]=xp(r,[1,1,1],-1);const e=Fu(i,.2989),t=Fu(o,.587),n=Fu(u,.114);l=_u(_u(e,t),n)}else l=e;"otsu"===t&&(c=function(e,t){let n,a,r,s,i,o,u=Cp([-1]),l=Cp([0]),c=Cp([0]);for(let h=0;h<e.size-1;h++){n=Ml(e,0,h+1),a=Ml(e,h+1),i=Ru(Rc(n),t),o=Ru(Rc(a),t);const p=Rc(Fu(n,Kh(0,n.size)));r=Ru(p,Rc(n));const d=qu(a.shape,n.size),f=_u(Kh(0,a.size),d),m=Fu(a,f);s=Ru(Rc(m),Rc(a));const g=Yu(r,s),y=Yu(r,s),b=Fu(i,o);c=Fu(Fu(b,g),y);const x=Uc(c,l);l=gc(x,c,l),u=gc(x,Cp([h]),u)}return u}(Gl(Mi(ap(l),"int32"),Ls([]),256),s));const h=n?Yc(l,c):Uc(l,c);return Mi(Fu(h,255),"int32")}}),_d=Ds({transform_:function(e,t,n="nearest",a="constant",r=0,s){const i=As(e,"image","transform","float32"),o=As(t,"transforms","transform","float32");ae(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),ae(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),ae(null==s||2===s.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`));const u={image:i,transforms:o},l={interpolation:n,fillMode:a,fillValue:r,outputShape:s};return ks.runKernel(Za,u,l)}}),Ad=Ds({bandPart_:function(e,t,n){ae(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),ae(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const a=As(e,"a","bandPart");ae(a.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${a.rank}.`));const r=a.shape,[s,i]=a.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=s),n<0&&(n=i);const o=Al(Kh(0,s,1,"int32"),[-1,1]),u=Kh(0,i,1,"int32"),l=Yu(o,u),c=sh(Yc(l,Gu(+t,"int32")),Gc(l,Gu(-n,"int32"))),h=gh([s,i],a.dtype);return Al(Ip(Mp(Al(a,[-1,s,i])).map((e=>gc(c,e,h)))),r)}}),Rd=Ds({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,ae(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)ae(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=xp(e,e.shape[0],0).map((e=>vp(e,[0])));ae(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],a=e;for(let t=0;t<e.length;++t)n.push(ks.tidy((()=>{let e=a[t];if(t>0)for(let a=0;a<t;++a){const t=Fu(Rc(Fu(n[a],e)),n[a]);e=Yu(e,t)}return Ru(e,Dc(e,"euclidean"))})));return t?Ip(n,0):n}});function Fd(e,t=!1){return ks.tidy((()=>{ae(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],a=e.shape[1];let r=Bc(n),s=Li(e);const i=$p([[1]],[1,1]);let o=Li(i);const u=n>=a?a:n;for(let e=0;e<u;++e){const t=s,u=o,l=r;[o,s,r]=ks.tidy((()=>{const t=Ml(s,[e,e],[n-e,1]),u=Dc(t),l=Ml(s,[e,e],[1,1]),c=gc(Uc(l,0),$p([[-1]]),$p([[1]])),h=Yu(l,Fu(c,u)),p=Ru(t,h);o=1===p.shape[0]?Li(i):Dl([i,Ml(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=_o(Ru(so(c,h),u)),f=Ml(s,[e,0],[n-e,a]),m=Fu(d,o),g=Ro(o);if(0===e)s=Yu(f,so(m,so(g,f)));else{const t=Yu(f,so(m,so(g,f)));s=Dl([Ml(s,[0,0],[e,a]),t],0)}const y=Ro(m),b=Ml(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Yu(b,so(so(b,o),y));else{const t=Yu(b,so(so(b,o),y));r=Dl([Ml(r,[0,0],[n,e]),t],1)}return[o,s,r]})),yo([t,u,l])}return!t&&n>a&&(r=Ml(r,[0,0],[n,a]),s=Ml(s,[0,0],[a,a])),[r,s]}))}const Dd=Ds({qr_:function(e,t=!1){if(ae(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Fd(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),a=Mp(Al(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],s=[];return a.forEach((e=>{const[n,a]=Fd(e,t);r.push(n),s.push(a)})),[Al(Ip(r,0),e.shape),Al(Ip(s,0),e.shape)]}}});var Od;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Od||(Od={}));const Md=Ds({computeWeightedLoss_:function(e,t,n=Od.SUM_BY_NONZERO_WEIGHTS){const a=As(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=As(t,"weights","computeWeightedLoss"));const s=null==r?a:Fu(a,r);if(n===Od.NONE)return s;if(n===Od.SUM)return Rc(s);if(n===Od.MEAN){if(null==r)return mh(s);{const e=a.size/r.size,t=Ru(Rc(s),Rc(r));return e>1?Ru(t,Gu(e)):t}}if(n===Od.SUM_BY_NONZERO_WEIGHTS){if(null==r)return Ru(Rc(s),Gu(a.size));{const e=Fu(r,yh(a.shape)),t=Mi(Rc(Sh(e,Gu(0))),"float32");return Ru(Rc(s),t)}}throw Error(`Unknown reduction: ${n}`)}}),Ld=Ds({absoluteDifference_:function(e,t,n,a=Od.SUM_BY_NONZERO_WEIGHTS){const r=As(e,"labels","absoluteDifference"),s=As(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=As(n,"weights","absoluteDifference")),re(r.shape,s.shape,"Error in absoluteDifference: ");const o=Ju(Yu(r,s));return Md(o,i,a)}}),zd=Ds({cosineDistance_:function(e,t,n,a,r=Od.SUM_BY_NONZERO_WEIGHTS){const s=As(e,"labels","cosineDistance"),i=As(t,"predictions","cosineDistance");let o=null;null!=a&&(o=As(a,"weights","cosineDistance")),re(s.shape,i.shape,"Error in cosineDistance: ");const u=Gu(1),l=Yu(u,Rc(Fu(s,i),n,!0));return Md(l,o,r)}}),Pd=Ds({hingeLoss_:function(e,t,n,a=Od.SUM_BY_NONZERO_WEIGHTS){let r=As(e,"labels","hingeLoss");const s=As(t,"predictions","hingeLoss");let i=null;null!=n&&(i=As(n,"weights","hingeLoss")),re(r.shape,s.shape,"Error in hingeLoss: ");const o=Gu(1);r=Yu(Fu(Gu(2),r),o);const u=Yh(Yu(o,Fu(r,s)));return Md(u,i,a)}}),Bd=Ds({huberLoss_:function(e,t,n,a=1,r=Od.SUM_BY_NONZERO_WEIGHTS){const s=As(e,"labels","huberLoss"),i=As(t,"predictions","huberLoss");let o=null;null!=n&&(o=As(n,"weights","huberLoss")),re(s.shape,i.shape,"Error in huberLoss: ");const u=Gu(a),l=Ju(Yu(i,s)),c=xh(l,u),h=Yu(l,c),p=_u(Fu(Gu(.5),Ou(c)),Fu(u,h));return Md(p,o,r)}}),Wd=Ds({logLoss_:function(e,t,n,a=1e-7,r=Od.SUM_BY_NONZERO_WEIGHTS){const s=As(e,"labels","logLoss"),i=As(t,"predictions","logLoss");let o=null;null!=n&&(o=As(n,"weights","logLoss")),re(s.shape,i.shape,"Error in logLoss: ");const u=Gu(1),l=Gu(a),c=_o(Fu(s,Qc(_u(i,l)))),h=Fu(Yu(u,s),Qc(_u(Yu(u,i),l))),p=Yu(c,h);return Md(p,o,r)}}),Vd=Ds({meanSquaredError_:function(e,t,n,a=Od.SUM_BY_NONZERO_WEIGHTS){const r=As(e,"labels","meanSquaredError"),s=As(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=As(n,"weights","meanSquaredError")),re(r.shape,s.shape,"Error in meanSquaredError: ");const o=kp(r,s);return Md(o,i,a)}}),Ud=Ds({sigmoidCrossEntropy_:function(e,t,n,a=0,r=Od.SUM_BY_NONZERO_WEIGHTS){let s=As(e,"multiClassLabels","sigmoidCrossEntropy");const i=As(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=As(n,"weights","sigmoidCrossEntropy")),re(s.shape,i.shape,"Error in sigmoidCrossEntropy: "),a>0){const e=Gu(a),t=Gu(1),n=Gu(.5);s=_u(Fu(s,Yu(t,e)),Fu(n,e))}const u=function(e,t){const n=As(e,"labels","sigmoidCrossEntropyWithLogits"),a=As(t,"logits","sigmoidCrossEntropyWithLogits");re(n.shape,a.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Yh(a),s=Fu(a,n),i=eh(Mc(_o(Ju(a))));return _u(Yu(r,s),i)}(s,i);return Md(u,o,r)}}),Gd=Ds({softmaxCrossEntropy_:function(e,t,n,a=0,r=Od.SUM_BY_NONZERO_WEIGHTS){let s=As(e,"onehotLabels","softmaxCrossEntropy");const i=As(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=As(n,"weights","softmaxCrossEntropy")),re(s.shape,i.shape,"Error in softmaxCrossEntropy: "),a>0){const e=Gu(a),t=Gu(1),n=Gu(s.shape[1]);s=_u(Fu(s,Yu(t,e)),Ru(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const a=Vu(((e,t,a)=>{const r=rh(t,[n],!0),s=Yu(Mi(t,"float32"),r);a([e,s]);const i=_o(Fu(s,e));return{value:Rc(i,[n]),gradFunc:(e,t)=>{const[a,r]=t,s=Sc(e.shape,[n]);return[Fu(Al(e,s),Yu(Mi(a,"float32"),Mc(r))),Fu(Al(e,s),Yu(Mc(r),Mi(a,"float32")))]}}}));return a(e,t)}(s,i);return Md(u,o,r)}}),Hd=Ds({sparseFillEmptyRows_:function(e,t,n,a){const r=As(e,"indices","sparseFillEmptyRows","int32"),s=As(t,"values","sparseFillEmptyRows"),i=As(n,"denseShape","sparseFillEmptyRows","int32"),o=As(a,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const u={indices:r,values:s,denseShape:i,defaultValue:o},l=ks.runKernel(Oa,u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}}),jd=Ds({sparseReshape_:function(e,t,n){const a=As(e,"inputIndices","sparseReshape","int32"),r=As(t,"inputShape","sparseReshape","int32"),s=As(n,"newShape","sparseReshape","int32");if(2!==a.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==s.rank)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);const i={inputIndices:a,inputShape:r,newShape:s},o=ks.runKernel(Ma,i);return{outputIndices:o[0],outputShape:o[1]}}}),qd=Ds({sparseSegmentMean_:function(e,t,n){const a=As(e,"data","sparseSegmentMean"),r=As(t,"indices","sparseSegmentMean","int32"),s=As(n,"segmentIds","sparseSegmentMean","int32");if(a.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${s.shape}`);const i={data:a,indices:r,segmentIds:s};return ks.runKernel(La,i)}}),Kd=Ds({sparseSegmentSum_:function(e,t,n){const a=As(e,"data","sparseSegmentSum"),r=As(t,"indices","sparseSegmentSum","int32"),s=As(n,"segmentIds","sparseSegmentSum","int32");if(a.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${s.shape}`);const i={data:a,indices:r,segmentIds:s};return ks.runKernel(za,i)}}),Xd=Ds({stringNGrams_:function(e,t,n,a,r,s,i,o){const u=As(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=As(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:a,leftPad:r,rightPad:s,padWidth:i,preserveShortSequences:o},h={data:u,dataSplits:l},p=ks.runKernel(Ua,h,c);return{nGrams:p[0],nGramsSplits:p[1]}}}),Yd=Ds({stringSplit_:function(e,t,n=!0){const a=As(e,"input","stringSplit","string"),r=As(t,"delimiter","stringSplit","string");if(1!==a.rank)throw new Error(`Input should be Tensor1D but received shape ${a.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const s={skipEmpty:n},i={input:a,delimiter:r},o=ks.runKernel(Ga,i,s);return{indices:o[0],values:o[1],shape:o[2]}}}),Zd=Ds({stringToHashBucketFast_:function(e,t){const n=As(e,"input","stringToHashBucketFast","string"),a={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return ks.runKernel(Ha,r,a)}}),Jd={fft:gp,ifft:yp,rfft:wp,irfft:bp},Qd={hammingWindow:id,hannWindow:od,frame:ud,stft:ld},ef={flipLeftRight:hd,grayscaleToRGB:pd,resizeNearestNeighbor:$d,resizeBilinear:Cd,rotateWithOffset:dd,cropAndResize:cd,nonMaxSuppression:md,nonMaxSuppressionAsync:async function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY){const s=As(e,"boxes","nonMaxSuppressionAsync"),i=As(t,"scores","nonMaxSuppressionAsync"),o=fd(s,i,n,a,r);n=o.maxOutputSize,a=o.iouThreshold,r=o.scoreThreshold;const u=await Promise.all([s.data(),i.data()]),l=u[0],c=u[1],{selectedIndices:h}=bd(l,c,n,a,r);return s!==e&&s.dispose(),i!==t&&i.dispose(),Cp(h,"int32")},nonMaxSuppressionWithScore:Sd,nonMaxSuppressionWithScoreAsync:async function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,s=0){const i=As(e,"boxes","nonMaxSuppressionAsync"),o=As(t,"scores","nonMaxSuppressionAsync"),u=fd(i,o,n,a,r,s);n=u.maxOutputSize,a=u.iouThreshold,r=u.scoreThreshold,s=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=l[0],h=l[1],{selectedIndices:p,selectedScores:d}=wd(c,h,n,a,r,s);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Cp(p,"int32"),selectedScores:Cp(d)}},nonMaxSuppressionPadded:Td,nonMaxSuppressionPaddedAsync:async function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,s=!1){const i=As(e,"boxes","nonMaxSuppressionAsync"),o=As(t,"scores","nonMaxSuppressionAsync"),u=fd(i,o,n,a,r,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=xd(p,d,l,c,h,s);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Cp(f,"int32"),validOutputs:Gu(m,"int32")}},threshold:Ed,transform:_d},tf={bandPart:Ad,gramSchmidt:Rd,qr:Dd},nf={absoluteDifference:Ld,computeWeightedLoss:Md,cosineDistance:zd,hingeLoss:Pd,huberLoss:Bd,logLoss:Wd,meanSquaredError:Vd,sigmoidCrossEntropy:Ud,softmaxCrossEntropy:Gd},af={sparseFillEmptyRows:Hd,sparseReshape:jd,sparseSegmentMean:qd,sparseSegmentSum:Kd},rf={stringNGrams:Xd,stringSplit:Yd,stringToHashBucketFast:Zd},sf={sgd:rl.sgd,momentum:rl.momentum,adadelta:rl.adadelta,adagrad:rl.adagrad,rmsprop:rl.rmsprop,adamax:rl.adamax,adam:rl.adam},of="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function uf(){return new Promise((e=>of((()=>e()))))}function lf(e,t){const n=e[0].length;e.forEach(((e,t)=>{ae(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),ae(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const a=e[0];e.forEach(((e,r)=>{for(let s=0;s<n;s++)ae(s===t||e[s]===a[s],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${a}) along the non-concatenated axis ${r}.`))}))}function cf(e,t){const n=e[0].slice();for(let a=1;a<e.length;a++)n[t]+=e[a][t];return n}var hf;function pf(e,t,n){let a=new Array;if(null==n&&null==t)return a;if(null==t)for(;a.length<e+n.length;)a.push(-1);else a=t.slice();if(null==n)return a;if(e+n.length!==a.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${a.length}`);for(let r=1;r<n.length;++r){const s=n[r],i=a[a.length-n.length+r],o=a[i];if(s>=0)if(o>=0){if(o!==s)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+e}] = ${s} but shape[${r+e}] = ${o}`)}else a[i]=s}return a}function df(e){const t={FIRST_DIM_SIZE:hf.FIRST_DIM_SIZE,VALUE_ROWIDS:hf.VALUE_ROWIDS,ROW_LENGTHS:hf.ROW_LENGTHS,ROW_SPLITS:hf.ROW_SPLITS,ROW_LIMITS:hf.ROW_LIMITS,ROW_STARTS:hf.ROW_STARTS},n=[];for(const a of e){if(!(a in t))break;n.push(t[a])}return n}function ff(e){return 0===e.length?0:e[0]===hf.FIRST_DIM_SIZE?e.length-1:e.length}function mf(e,t){if(null==e||null==t)return;const n=e.length,a=t.length;if(n>=a)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${a})`);for(let r=0;r<Math.min(n,a-1);++r){const n=e[r],a=t[r+1];if(n>=0&&a>=0&&1!==n&&n!==a)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-e.length}] = ${n} but ragged tensor input.flatValues.shape[${r-e.length}] = ${a}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(hf||(hf={}));const gf=30;function yf(e){return e<=gf?e:Re(e,Math.floor(Math.sqrt(e)))}function bf(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function xf(e,t,n,a=!0){let r=[];if(a)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let a=0;a<n;++a)r=r.concat([e[a+1]/t[a],t[a]]);r=r.concat(e.slice(n+1))}return r}function wf(e,t,n=!0){const a=[];if(n){a.push(t);for(let n=t+1;n<e;++n)n<=2*t?(a.push(n),a.push(n-(t+1))):a.push(n)}else{const n=[],r=[];for(let a=1;a<e;++a)a>=2*t+1||a%2==1?r.push(a):n.push(a);a.push(...n),a.push(0),a.push(...r)}return a}function kf(e,t,n,a=!0){const r=[];a?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?a?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function vf(e,t){const n=[0];for(let a=0;a<t;++a)n.push(e[a][0]);return n}function If(e,t,n){const a=e.slice(0,1);for(let r=0;r<n;++r)a.push(e[r+1]-t[r][0]-t[r][1]);return a}const Nf=1.7580993408473768,Sf=1.0507009873554805,Tf=.3275911,Cf=.254829592,$f=-.284496736,Ef=1.421413741,_f=-1.453152027,Af=1.061405429;function Rf(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let a=0;a<n.length;a+=2)n[a]=e[a/2],n[a+1]=t[a/2];return n}function Ff(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let a=0;a<e.length;a+=2)t[a/2]=e[a],n[a/2]=e[a+1];return{real:t,imag:n}}function Df(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),a=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],a[Math.floor(t/4)]=e[t+1];return{real:n,imag:a}}function Of(e){const t=Math.floor(e.length/4),n=new Float32Array(t),a=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],a[Math.floor(t/4)]=e[t+1];return{real:n,imag:a}}function Mf(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Lf(e,t,n,a){e[2*a]=t,e[2*a+1]=n}function zf(e,t){const n=new Float32Array(e/2),a=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const s=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(s),a[r]=Math.sin(s)}return{real:n,imag:a}}function Pf(e,t,n){const a=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(a),imag:Math.sin(a)}}const Bf="->",Wf=/->/g,Vf=",",Uf="...";function Gf(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Wf,"").length)/Bf.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${Bf}").`);const[a,r]=e.split(Bf);ae(-1===a.indexOf(Uf),(()=>`The ellipsis notation ("${Uf}") is not supported yet.`));const s=a.split(Vf),i=s.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<r.length;++e){const t=r[e];if(!s.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<a.length;++e){const t=a[e];-1===o.indexOf(t)&&t!==Vf&&o.push(t)}const u=new Array(s.length);for(let e=0;e<i;++e){if(new Set(s[e].split("")).size!==s[e].length)throw new Error(`Found duplicate axes in input component ${s[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<s[e].length;++t)u[e].push(o.indexOf(s[e][t]))}const l=o.length,c=[];for(let e=r.length;e<l;++e)c.push(e);return{allDims:o,summedDims:c,idDims:u}}function Hf(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const a=[];for(let t=0;t<e;++t)-1===n[t]&&a.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:a}}function jf(e,t,n){const a=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===a[t[e][n]]?a[t[e][n]]=r[n]:ae(a[t[e][n]]===r[n],(()=>`Expected dimension ${a[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function qf(e,t){const n=e,a=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)a.push([]);const s=[];for(let e=0;e<n.length;++e){const r=Xf(t,n[e]);for(const t of r)-1===s.indexOf(t)&&(a[e].push(t),s.push(t))}return{path:n,steps:a}}function Kf(e){return e.every(((e,t)=>e===t))}function Xf(e,t){const n=[];for(let a=0;a<e.length;++a)0!==e[a].length&&-1===e[a].indexOf(t)&&-1!==t||n.push(a);return n}function Yf(e,t,n=0){let a=[];if("number"==typeof t)ae(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),a=new Array(t).fill(e.shape[n]/t);else{const r=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);ae(r<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const a=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-a}ae(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),a=t}return a}function Zf(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Jf(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Qf(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function em(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function tm(e,t){return`size ${e} must be non-negative, not ${t}`}function nm(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function am(e,t){return`Input to reshape is a SparseTensor with ${oe(e)}\n  dense values, but the requested shape requires a multiple of ${oe(t)}. inputShape=${e} outputShape= ${t}`}function rm(e,t){return`Input to reshape is a tensor with ${oe(e)} dense values, but the requested shape has ${oe(t)}. inputShape=${e} outputShape=${t}`}function sm(){return"segment ids must be >= 0"}function im(){return"segment ids are not increasing"}function om(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function um(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function lm(e,t){let n,a=!1;for(e<=gf?(n=e,a=!0):n=Re(e,Math.floor(Math.sqrt(e)));!a;)n>t||n===e?a=!0:n=Re(e,n+1);return n}function cm(e,t,n){const a=[],r=e.length;for(let s=0;s<r;s++)s!==t?a.push(e[s]):a.push(n);return a}function hm(e,t,n,a){const r=t.shape.length,s=e.shape.length;if(0!==a&&(a<-r||a>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${a}`);if(a<0&&(a+=r),a>s)throw new Error(`batchDims (${a}) must be less than rank(x) (\n    ${s}).`);if(n<a)throw new Error(`batchDims (${a}) must be less than or equal to axis (${n}).`);for(let n=0;n<a;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let u=1,l=1,c=1;for(let t=0;t<a;++t)o.push(e.shape[t]),u*=e.shape[t];for(let t=a;t<n;t++)o.push(e.shape[t]),l*=e.shape[t];for(let e=a;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<s;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:i,outputShape:o}}function pm(e){try{return e.map((e=>Vr(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function dm(e){return e.map((e=>Wr(e)))}const fm={kernelName:Ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(e,Np(Mi(n,"float32"),-1))}}},mm={kernelName:Je,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ou(Mi(n,"float32")),a=Du(Yu(Gu(1),t));return _o(Ru(e,a))}}}},gm={kernelName:Qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Du(Yu(Ou(Mi(n,"float32")),1));return Ru(e,t)}}}},ym={kernelName:et,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t,r=Mo(n.shape,a.shape);return{a:()=>{let t=e;const a=Oo(n.shape,r);return a.length>0&&(t=Rc(t,a)),Al(t,n.shape)},b:()=>{let t=e;const n=Oo(a.shape,r);return n.length>0&&(t=Rc(t,n)),Al(t,a.shape)}}}},bm={kernelName:tt,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,a)=>{n[a]=()=>e.clone()})),n}},xm={kernelName:rt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Mu(n)}}},wm={kernelName:st,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Mu(n)}}},km={kernelName:it,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ru(e,Du(Yu(Gu(1),Ou(Mi(n,"float32")))))}}},vm={kernelName:ot,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Du(_u(Gu(1),Ou(Mi(n,"float32"))));return Ru(e,t)}}}},Im={kernelName:ct,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t,r=Mo(n.shape,a.shape);return{a:()=>{const t=_u(Ou(n),Ou(a));let s=Fu(e,Ru(a,t));const i=Oo(n.shape,r);return i.length>0&&(s=Rc(s,i)),Al(s,n.shape)},b:()=>{const t=_u(Ou(n),Ou(a));let s=_o(Fu(e,Ru(n,t)));const i=Oo(a.shape,r);return i.length>0&&(s=Rc(s,i)),Al(s,a.shape)}}}},Nm={kernelName:ut,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ru(e,_u(Ou(Mi(n,"float32")),1))}}},Sm={kernelName:lt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ru(e,Yu(Gu(1),Ou(Mi(n,"float32"))))}}},Tm=Ds({avgPool3dGrad_:function(e,t,n,a,r,s){const i=As(e,"dy","avgPool3dGrad"),o=As(t,"input","avgPool3dGrad");let u=i,l=o,c=!1;4===o.rank&&(c=!0,u=Al(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),l=Al(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ae(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),ae(5===l.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${l.rank}.`)),_l("avgPool3dGrad",r,s);const h={dy:u,input:l},p={filterSize:n,strides:a,pad:r,dimRoundingMode:s},d=ks.runKernel(ft,h,p);return c?Al(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Cm={kernelName:dt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[a]=t,{filterSize:r,strides:s,pad:i,dimRoundingMode:o}=n;return{x:()=>Tm(e,a,r,s,i,o)}}},$m=Ds({avgPoolGrad_:function(e,t,n,a,r){const s=As(e,"dy","avgPoolGrad"),i=As(t,"input","avgPoolGrad");ae(i.rank===s.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${s.rank})`));let o=i,u=s,l=!1;3===i.rank&&(l=!0,o=Al(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=Al(s,[1,s.shape[0],s.shape[1],s.shape[2]])),ae(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),ae(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:u,input:o},h={filterSize:n,strides:a,pad:r},p=ks.runKernel(pt,c,h);return l?Al(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Em={kernelName:ht,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[a]=t,{filterSize:r,strides:s,pad:i}=n;return{x:()=>$m(e,a,r,s,i)}}},_m={kernelName:mt,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[a,r]=t,{transposeA:s,transposeB:i}=n;return s||i?!s&&i?{a:()=>so(e,r,!1,!1),b:()=>so(e,a,!0,!1)}:s&&!i?{a:()=>so(r,e,!1,!0),b:()=>so(a,e,!1,!1)}:{a:()=>so(r,e,!0,!0),b:()=>so(e,a,!0,!0)}:{a:()=>so(e,r,!1,!0),b:()=>so(a,e,!0,!1)}}},Am={kernelName:gt,gradFunc:(e,t,n)=>{const{blockShape:a,crops:r}=n;return{x:()=>Fh(e,a,r)}}},Rm={kernelName:bt,gradFunc:(e,t,n)=>{const a=n,r=a.inputShape,s=a.shape,i=Array.from(s);for(let e=r.length-1;e>=0;e--)if(r[e]===s[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${s}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>Rc(e,o,!0)}}},Fm={kernelName:wt,gradFunc:e=>({x:()=>e.clone()})},Dm={kernelName:kt,gradFunc:e=>({x:()=>Mu(e)})},Om={kernelName:vt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[a]=t,{clipValueMin:r,clipValueMax:s}=n;return{x:()=>gc(sh(Gc(a,r),Yc(a,s)),e,Mu(e))}}},Mm={kernelName:Nt,inputsToSave:["x"],gradFunc:fm.gradFunc},Lm={kernelName:St,saveAllInputs:!0,gradFunc:(e,t,n)=>{const a=t.map((e=>e.shape)),{axis:r}=n,s=ye(r,t[0].shape)[0],i=a.map((e=>e[s]));return xp(e,i,s).map((e=>()=>e))}},zm={kernelName:Tt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[a,r]=t,{dilations:s,strides:i,pad:o,dataFormat:u}=n;return ae(Cl(s),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`)),{x:()=>tc(a.shape,e,r,i,o,u),filter:()=>Yp(a,e,r.shape,i,o,u)}}},Pm={kernelName:$t,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[a,r]=t,{strides:s,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>Ql(e,r,s,i,o,1,u),filter:()=>Yp(e,a,r.shape,s,i,o,u)}}},Bm=Ds({conv3DBackpropFilter_:function(e,t,n,a,r){let s=e;4===e.rank&&(s=Al(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=Al(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),ae(5===s.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`)),ae(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),ae(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),ae(s.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${n[3]}.`)),ae(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:s,dy:i},u={strides:a,pad:r,filterShape:n};return ks.runKernel(_t,o,u)}}),Wm={kernelName:Et,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:a,strides:r,pad:s}=n;ae(Cl(a),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const[i,o]=t;return{x:()=>rc(i.shape,e,o,r,s),filter:()=>Bm(i,e,o.shape,r,s)}}},Vm={kernelName:Rt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(_o(lp(Mi(n,"float32"))),e)}}},Um={kernelName:Ft,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(cp(Mi(n,"float32")),e)}}},Gm={kernelName:Ot,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[a]=t,{axis:r,exclusive:s,reverse:i}=n;return{x:()=>{const t=Cc([r],a.rank);let n=lc(e,r,s,!i);return null!=t&&(n=Ro(n,t)),n}}}},Hm={kernelName:Pt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:a,strides:r,pad:s,dimRoundingMode:i}=n,o=null==a?[1,1]:a;ae(Cl(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[u,l]=t;return ae(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),ae(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`)),ae(u.shape[3]===l.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),ae($l(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),_l("depthwiseConv2d",s,i),{x:()=>ad(u.shape,e,l,r,s,o,i),filter:()=>nd(u,e,l.shape,r,s,o,i)}}},jm={kernelName:Ut,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[a,r]=t,s={x:a,filter:r,dy:e},i={x:a,filter:r,dy:e};return{x:()=>ks.runKernel(Gt,s,n),filter:()=>ks.runKernel(Ht,i,n)}}},qm={kernelName:Kt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,a={dy:e,y:n};return{x:()=>ks.runKernel(Xt,a)}}},Km={kernelName:Yt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,a=Fu(Mc(_o(Ou(n))),2/Math.sqrt(Math.PI));return{x:()=>Fu(e,a)}}},Xm={kernelName:Jt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(e,n)}}},Ym={kernelName:Qt,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Al(e,n.shape)}}},Zm={kernelName:en,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(e,Mc(n))}}},Jm={kernelName:rn,gradFunc:e=>({x:()=>Mu(e)})},Qm={kernelName:sn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t,r=Mo(n.shape,a.shape);return{a:()=>{const t=Ru(e,Mi(a,"float32")),s=Oo(n.shape,r);return s.length>0?Al(Rc(t,s),n.shape):t},b:()=>{let t=Fu(e,Mi(n,"float32"));const s=Oo(a.shape,r);s.length>0&&(t=Al(Rc(t,s),a.shape));const i=Ou(a);return _o(Ru(t,Mi(i,"float32")))}}}},eg={kernelName:on,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:a}=n,[r,s,i,o]=t,u=null==o?Gu(1):o,l=Oo(s.shape,r.shape),c=[];if(1===s.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=Yu(r,s),p=Fu(e,u),d=rp(_u(i,Gu(a))),f=Fu(Fu(Fu(d,d),d),Gu(-.5));return{x:()=>1===s.rank?Al(Fu(Fu(e,Pc(Al(d,[1,1,1,s.shape[0]]),c)),u),r.shape):Al(Fu(Fu(e,d),u),r.shape),mean:()=>{let e=Fu(Fu(d,Gu(-1)),p);return 1===s.rank&&(e=Rc(e,l)),Al(e,s.shape)},variance:()=>{let e=Fu(Fu(f,h),p);return 1===s.rank&&(e=Rc(e,l)),Al(e,s.shape)},scale:()=>{const t=Fu(h,d);let n=Fu(e,t);return 1===s.rank&&(n=Rc(n,l)),Al(n,s.shape)},offset:()=>{let t=e;return 1===s.rank&&(t=Rc(t,l)),Al(t,s.shape)}}}},tg={kernelName:un,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[a,r]=t,{axis:s}=n,i=ye(s,a.shape)[0];return{x:()=>{const t=a.shape,n=r.size,o=t.slice(0,i),u=o.length,l=t.slice(s,t.length).slice(1),c=l.length,h=ng(0,u),p=ng(u+1,u+1+c),d=ag([o,[n],l]),f=Al(e,d),m=Al(r,[n]),g=ag([[u],h,p]),y=Ro(f,g);let b=Op(y,m,a.shape[i]);const x=$c(g);return b=Ro(b,x),b},indices:()=>r}}};function ng(e,t){const n=[];for(let a=e;a<t;++a)n.push(a);return n}function ag(e){const t=[];for(let n=0;n<e.length;++n)for(let a=0;a<e[n].length;++a)t.push(e[n][a]);return t}const rg={kernelName:hn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t;return{a:()=>Mu(n),b:()=>Mu(a)}}},sg={kernelName:pn,gradFunc:e=>({x:()=>Mi(e,"float32")})},ig={kernelName:mn,gradFunc:e=>({x:()=>Mu(e)})},og={kernelName:gn,gradFunc:e=>({x:()=>Mu(e)})},ug={kernelName:yn,gradFunc:e=>({x:()=>Mu(e)})},lg={kernelName:bn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[a]=t,{alpha:r}=n,s=Uc(a,0);return{x:()=>gc(s,e,Fu(e,r))}}},cg={kernelName:In,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ru(e,_u(n,1))}}},hg={kernelName:vn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ru(e,Mi(n,"float32"))}}},pg={kernelName:$n,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[a]=t,{axis:r}=n;return{logits:()=>{const t=Mc(a);return Yu(e,Fu(Rc(e,r,!0),t))}}}},dg=Ds({localResponseNormalizationBackprop_:function(e,t,n,a=5,r=1,s=1,i=.5){const o={x:e,y:t,dy:n},u={depthRadius:a,bias:r,alpha:s,beta:i};return ks.runKernel(An,o,u)}}),fg={kernelName:_n,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[a,r]=t,{depthRadius:s,bias:i,alpha:o,beta:u}=n;return{x:()=>dg(a,r,e,s,i,o,u)}}};function mg(e,t,n,a){return t.rank<n.rank&&(t=Al(t,Sc(t.shape,a))),e.rank<n.rank&&(e=Al(e,Sc(e.shape,a))),{x:()=>Fu(e,Mi(mc(n,t),e.dtype))}}const gg={kernelName:Rn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const a=n,{reductionIndices:r}=a,s=t[0],i=mg(e,t[1],s,ye(r,s.shape));return{x:()=>i.x()}}},yg={kernelName:Fn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t;return{a:()=>Fu(e,Mi(Gc(n,a),"float32")),b:()=>Fu(e,Mi(Xc(n,a),"float32"))}}},bg=Ds({maxPool3dGrad_:function(e,t,n,a,r,s,i){const o=As(e,"dy","maxPool3dGrad"),u=As(t,"input","maxPool3dGrad"),l=As(n,"output","maxPool3dGrad");let c=o,h=u,p=l,d=!1;4===u.rank&&(d=!0,c=Al(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=Al(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),p=Al(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),ae(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),ae(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),ae(5===p.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`)),_l("maxPool3dGrad",s,i);const f={dy:c,input:h,output:p},m={filterSize:a,strides:r,pad:s,dimRoundingMode:i},g=ks.runKernel(Ln,f,m);return d?Al(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),xg={kernelName:Mn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[a,r]=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:u}=n;return{x:()=>bg(e,a,r,s,i,o,u)}}},wg=Ds({maxPoolGrad_:function(e,t,n,a,r,s,i){const o=As(e,"dy","maxPoolGrad"),u=As(t,"input","maxPoolGrad"),l=As(n,"output","maxPoolGrad");ae(u.rank===o.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`)),ae(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),ae(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),_l("maxPoolGrad",s,i);const c={dy:o,input:u,output:l},h={filterSize:a,strides:r,pad:s,dimRoundingMode:i};return ks.runKernel(On,c,h)}}),kg={kernelName:Dn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[a,r]=t,{filterSize:s,strides:i,pad:o}=n;return{x:()=>wg(e,a,r,s,i,o)}}},vg={kernelName:Vn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const a=t[0],{paddings:r}=n,s=r.map((e=>e[0]));return{x:()=>Ml(e,s,a.shape)}}},Ig={kernelName:Qn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:a}=n;return Mp(e,a).map((e=>()=>e))}},Ng={kernelName:ea,inputsToSave:["x"],gradFunc:(e,t,n)=>{const a=t[0],{paddings:r}=n,s=r.map((e=>e[0]));return{x:()=>Ml(e,s,a.shape)}}},Sg={kernelName:na,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,a,r]=t,s=n,i=a,o=Mo(s.shape,i.shape);return{a:()=>{const t=Mi(i,"float32");let n=Fu(e,Fu(t,Xu(s,Yu(t,Gu(1)))));const a=Oo(s.shape,o);return a.length>0&&(n=Rc(n,a)),Al(n,s.shape)},b:()=>{const t=Uc(s,0),n=gc(t,Qc(s),Mu(s));let a=Fu(e,Fu(r,n));const u=Oo(i.shape,o);return u.length>0&&(a=Rc(a,u)),Al(a,i.shape)}}}};const Tg={kernelName:Ia,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Uc(n,Gu(0)),a=Gu(Nf),r=Gu(Sf),s=Fu(e,r),i=Fu(Fu(e,a),Mc(Mi(n,"float32")));return gc(t,s,i)}}}},Cg={kernelName:Ra,gradFunc:(e,t,n)=>{const{blockShape:a,paddings:r}=n;return{x:()=>Pl(e,a,r)}}},$g={kernelName:Fa,gradFunc:(e,t,n)=>{const{axis:a}=n;return{x:()=>Dl(e,a)}}},Eg=[fm,mm,gm,ym,bm,xm,wm,km,vm,Im,Nm,Sm,Cm,Em,_m,Am,Rm,Fm,Dm,Om,Mm,Lm,Pm,zm,Wm,Vm,Um,Gm,Hm,jm,{kernelName:jt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t,r=Mo(n.shape,a.shape);return{a:()=>{const t=Ru(e,Mi(a,"float32")),s=Oo(n.shape,r);return s.length>0?Al(Rc(t,s),n.shape):t},b:()=>{let t=Fu(e,Mi(n,"float32"));const s=Oo(a.shape,r);s.length>0&&(t=Al(Rc(t,s),a.shape));const i=Ou(a);return _o(Ru(t,Mi(i,"float32")))}}}},qm,Km,Xm,Ym,Zm,Qm,Jm,eg,tg,rg,sg,ig,og,ug,lg,cg,hg,pg,fg,gg,gg,yg,xg,kg,{kernelName:Pn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[a]=t,{axis:r}=n,s=ye(r,a.shape),i=oe(Nc(a.shape,s)[1]);return{x:()=>{const t=a.shape.slice();s.forEach((e=>{t[e]=1}));const n=Al(e,t);return Ru(Fu(n,yh(a.shape,"float32")),i)}}}},{kernelName:Bn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const a=n,{axis:r}=a,[s,i]=t,o=mg(e,i,s,ye(r,s.shape));return{x:()=>o.x()}}},{kernelName:Wn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t;return{a:()=>Fu(e,Mi(Yc(n,a),"float32")),b:()=>Fu(e,Mi(Uc(n,a),"float32"))}}},vg,{kernelName:Un,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t,r=Mo(n.shape,a.shape);return{a:()=>{const t=Oo(n.shape,r);return t.length>0?Al(Rc(e,t),n.shape):e},b:()=>{const t=Fu(e,_o(Wc(Ru(n,a)))),s=Oo(a.shape,r);return s.length>0?Al(Rc(t,s),a.shape):t}}}},{kernelName:Hn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t,r=Mo(n.shape,a.shape);return{a:()=>{const t=Fu(e,Mi(a,"float32")),s=Oo(n.shape,r);return s.length>0?Al(Rc(t,s),n.shape):t},b:()=>{const t=Fu(e,Mi(n,"float32")),s=Oo(a.shape,r);return s.length>0?Al(Rc(t,s),a.shape):t}}}},{kernelName:jn,gradFunc:e=>({x:()=>_o(e)})},{kernelName:Jn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>gh(n.shape,"float32")}}},{kernelName:Zn,gradFunc:e=>({x:()=>Mu(e)})},Ig,Ng,Ng,Sg,{kernelName:aa,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,a]=t,r=Uc(n,0);return{x:()=>gc(r,e,Fu(e,a)),alpha:()=>{let t=gc(r,Mu(e),Fu(e,n));const s=Oo(a.shape,e.shape);return s.length>0&&(t=Rc(t,s)),Al(t,a.shape)}}}},{kernelName:ra,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[a]=t,{axis:r}=n;let s=[];return s=null==r?a.shape.map(((e,t)=>t)):"number"==typeof r?[r]:r,{x:()=>function(e,t,n){const a=e.shape.length,r=a-n.length,s=Cc(n,a);let i=e;null!=s&&(i=Ro(e,s));const o=i.shape.slice(),u=o.splice(a-n.length,n.length).reduce(((e,t)=>e*t),1);o.push(u);let l=function(e,t,n){const a=e.shape.slice();a[n]=1;const r=Al(t,a),s=uc(e,n,!0,!1),i=uc(e,n,!0,!0),o=Fu(s,i);return Fu(r,o)}(i.reshape(o),t,r);if(l=l.reshape(i.shape),null!=s){const e=$c(s);l=Ro(l,e)}return l}(a,e,s)}}},{kernelName:la,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ru(e,_o(Ou(n)))}}},{kernelName:ga,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,a=Fu(Yc(n,6),Np(n));return{x:()=>Fu(e,Mi(a,"float32"))}}},{kernelName:ca,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(e,Mi(Np(n),"float32"))}}},{kernelName:ha,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Al(e,n.shape)}}},{kernelName:fa,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[a]=t,r={dy:e,images:a};return{images:()=>ks.runKernel(ma,r,n)}}},{kernelName:pa,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[a]=t,r={dy:e,images:a};return{images:()=>ks.runKernel(da,r,n)}}},{kernelName:ya,gradFunc:(e,t,n)=>{const{dims:a}=n,r=ye(a,e.shape);return{x:()=>Jh(e,r)}}},{kernelName:ba,gradFunc:e=>({x:()=>Mu(e)})},{kernelName:xa,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_o(Ru(e,Fu(Xu(n,1.5),2)))}}},{kernelName:va,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Mi(Mu(n),"float32"),t:()=>Fu(e,Mi(n,e.dtype)),e:()=>Fu(e,Mi(ih(n),e.dtype))}}},Tg,{kernelName:$a,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(e,Fu(n,Yu(Gu(1),n)))}}},{kernelName:Ca,gradFunc:e=>({x:()=>Mu(e)})},{kernelName:Sa,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(ic(Mi(n,"float32")),e)}}},{kernelName:Ta,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(oc(Mi(n,"float32")),e)}}},{kernelName:Na,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[a]=t,{begin:r,size:s}=n,i=a.shape,[o,u]=lu(a,r,s),l=[];for(let t=0;t<e.rank;t++)l.push([o[t],i[t]-o[t]-u[t]]);return{x:()=>$h(e,l)}}},{kernelName:Da,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[a]=t,{dim:r}=n,s=Fu(e,a);return{logits:()=>Yu(s,Fu(Rc(s,[r],!0),a))}}},{kernelName:Ea,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(e,Ol(n))}}},Cg,Cg,$g,$g,{kernelName:_a,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ru(e,Fu(Du(Mi(n,"float32")),2))}}},{kernelName:Ba,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t,r=Gu(2);return{a:()=>Fu(e,Fu(r,Yu(n,a))),b:()=>Fu(e,Fu(r,Yu(a,n)))}}},{kernelName:Wa,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(e,Fu(Mi(n,"float32"),2))}}},{kernelName:rr,gradFunc:e=>({x:()=>Mu(e)})},{kernelName:ja,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,a]=t,r=Mo(n.shape,a.shape);return{a:()=>{let t=e;const a=Oo(n.shape,r);return a.length>0&&(t=Rc(t,a)),Al(t,n.shape)},b:()=>{let t=e;const n=Oo(a.shape,r);return n.length>0&&(t=Rc(t,n)),Al(_o(t),a.shape)}}}},{kernelName:Aa,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[a]=t,r=a.shape.slice(),{axis:s}=n;ye(s,a.shape).forEach((e=>{r[e]=1}));const i=Al(e,r),o=Fu(i,yh(a.shape,"float32"));return{x:()=>o}}},{kernelName:qa,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ru(e,Ou(ic(n)))}}},{kernelName:Ka,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(Yu(Gu(1),Ou(n)),e)}}},{kernelName:Xa,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[a]=t,{reps:r}=n;return{x:()=>{let t=Mu(a);if(1===a.rank)for(let n=0;n<r[0];++n)t=_u(t,Ml(e,[n*a.shape[0]],[a.shape[0]]));else if(2===a.rank)for(let n=0;n<r[0];++n)for(let s=0;s<r[1];++s)t=_u(t,Ml(e,[n*a.shape[0],s*a.shape[1]],[a.shape[0],a.shape[1]]));else if(3===a.rank)for(let n=0;n<r[0];++n)for(let s=0;s<r[1];++s)for(let i=0;i<r[2];++i)t=_u(t,Ml(e,[n*a.shape[0],s*a.shape[1],i*a.shape[2]],[a.shape[0],a.shape[1],a.shape[2]]));else{if(4!==a.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${a.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let s=0;s<r[1];++s)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=_u(t,Ml(e,[n*a.shape[0],s*a.shape[1],i*a.shape[2],o*a.shape[3]],[a.shape[0],a.shape[1],a.shape[2],a.shape[3]]))}return t}}}},{kernelName:Ja,gradFunc:(e,t,n)=>{const a=n,{perm:r}=a,s=$c(r);return{x:()=>Ro(e,s)}}},{kernelName:er,gradFunc:(e,t,n)=>{const a=n,{axis:r}=a;return{value:()=>Ip(e,r)}}},{kernelName:tr,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Qu(t,Mu(t)),a=Vc(e,n);let r=Gc(t,Gu(0,"int32"));const s=a.rank-r.rank;for(let e=0;e<s;++e)r=Lc(r,e+1);r=sh(r,yh(a.shape,"bool"));const i=Mu(a);return gc(r,a,i)}(e,n)}}},{kernelName:ar,gradFunc:e=>({x:()=>Mu(e)})}];for(const e of Eg)br(e);ns().prototype.abs=function(){return this.throwIfDisposed(),Ju(this)},ns().prototype.acos=function(){return this.throwIfDisposed(),sl(this)},ns().prototype.acosh=function(){return this.throwIfDisposed(),il(this)},ns().prototype.add=function(e){return this.throwIfDisposed(),_u(this,e)},ns().prototype.all=function(e,t){return this.throwIfDisposed(),ul(this,e,t)},ns().prototype.any=function(e,t){return this.throwIfDisposed(),ll(this,e,t)},ns().prototype.argMax=function(e){return this.throwIfDisposed(),cl(this,e)},ns().prototype.argMin=function(e){return this.throwIfDisposed(),hl(this,e)},ns().prototype.asScalar=function(){return this.throwIfDisposed(),ae(1===this.size,(()=>"The array must have only 1 element.")),Al(this,[])},ns().prototype.asType=function(e){return this.throwIfDisposed(),Mi(this,e)},ns().prototype.as1D=function(){return this.throwIfDisposed(),Al(this,[this.size])},ns().prototype.as2D=function(e,t){return this.throwIfDisposed(),Al(this,[e,t])},ns().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Al(this,[e,t,n])},ns().prototype.as4D=function(e,t,n,a){return this.throwIfDisposed(),Al(this,[e,t,n,a])},ns().prototype.as5D=function(e,t,n,a,r){return this.throwIfDisposed(),Al(this,[e,t,n,a,r])},ns().prototype.asin=function(){return this.throwIfDisposed(),pl(this)},ns().prototype.asinh=function(){return this.throwIfDisposed(),dl(this)},ns().prototype.atan=function(){return this.throwIfDisposed(),fl(this)},ns().prototype.atan2=function(e){return this.throwIfDisposed(),ml(this,e)},ns().prototype.atanh=function(){return this.throwIfDisposed(),gl(this)},ns().prototype.avgPool=function(e,t,n,a){return this.throwIfDisposed(),Rl(this,e,t,n,a)},ns().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Pl(this,e,t)},ns().prototype.batchNorm=function(e,t,n,a,r){return this.throwIfDisposed(),Bl(this,e,t,n,a,r)},ns().prototype.broadcastTo=function(e){return this.throwIfDisposed(),jl(this,e)},ns().prototype.cast=function(e){return this.throwIfDisposed(),Mi(this,e)},ns().prototype.ceil=function(){return this.throwIfDisposed(),ql(this)},ns().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Kl(this,e,t)},ns().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof ts&&(e=[e]),Dl([this,...e],t)},ns().prototype.conv1d=function(e,t,n,a,r,s){return this.throwIfDisposed(),ec(this,e,t,n,a,r,s)},ns().prototype.conv2dTranspose=function(e,t,n,a,r){return this.throwIfDisposed(),nc(this,e,t,n,a,r)},ns().prototype.conv2d=function(e,t,n,a,r,s){return this.throwIfDisposed(),Ql(this,e,t,n,a,r,s)},ns().prototype.cos=function(){return this.throwIfDisposed(),ic(this)},ns().prototype.cosh=function(){return this.throwIfDisposed(),oc(this)},ns().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),uc(this,e,t,n)},ns().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),lc(this,e,t,n)},ns().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),hc(this,e,t)},ns().prototype.depthwiseConv2d=function(e,t,n,a,r,s){return this.throwIfDisposed(),pc(this,e,t,n,a,r,s)},ns().prototype.dilation2d=function(e,t,n,a,r){return this.throwIfDisposed(),fc(this,e,t,n,a,r)},ns().prototype.divNoNan=function(e){return this.throwIfDisposed(),yc(this,e)},ns().prototype.div=function(e){return this.throwIfDisposed(),Ru(this,e)},ns().prototype.dot=function(e){return this.throwIfDisposed(),bc(this,e)},ns().prototype.elu=function(){return this.throwIfDisposed(),wc(this)},ns().prototype.equal=function(e){return this.throwIfDisposed(),mc(this,e)},ns().prototype.erf=function(){return this.throwIfDisposed(),kc(this)},ns().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),Oc(this,e,t)},ns().prototype.exp=function(){return this.throwIfDisposed(),Mc(this)},ns().prototype.expandDims=function(e){return this.throwIfDisposed(),Lc(this,e)},ns().prototype.expm1=function(){return this.throwIfDisposed(),zc(this)},ns().prototype.fft=function(){return this.throwIfDisposed(),gp(this)},ns().prototype.flatten=function(){return this.throwIfDisposed(),Al(this,[this.size])},ns().prototype.floor=function(){return this.throwIfDisposed(),Wc(this)},ns().prototype.floorDiv=function(e){return this.throwIfDisposed(),Au(this,e)},ns().prototype.gather=function(e,t){return this.throwIfDisposed(),Vc(this,e,t)},ns().prototype.greaterEqual=function(e){return this.throwIfDisposed(),Gc(this,e)},ns().prototype.greater=function(e){return this.throwIfDisposed(),Uc(this,e)},ns().prototype.ifft=function(){return this.throwIfDisposed(),yp(this)},ns().prototype.irfft=function(){return this.throwIfDisposed(),bp(this)},ns().prototype.isFinite=function(){return this.throwIfDisposed(),Hc(this)},ns().prototype.isInf=function(){return this.throwIfDisposed(),jc(this)},ns().prototype.isNaN=function(){return this.throwIfDisposed(),qc(this)},ns().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Kc(this,e)},ns().prototype.lessEqual=function(e){return this.throwIfDisposed(),Yc(this,e)},ns().prototype.less=function(e){return this.throwIfDisposed(),Xc(this,e)},ns().prototype.localResponseNormalization=function(e,t,n,a){return this.throwIfDisposed(),Jc(this,e,t,n,a)},ns().prototype.logSigmoid=function(){return this.throwIfDisposed(),nh(this)},ns().prototype.logSoftmax=function(e){return this.throwIfDisposed(),ah(this,e)},ns().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),rh(this,e,t)},ns().prototype.log=function(){return this.throwIfDisposed(),Qc(this)},ns().prototype.log1p=function(){return this.throwIfDisposed(),eh(this)},ns().prototype.logicalAnd=function(e){return this.throwIfDisposed(),sh(this,e)},ns().prototype.logicalNot=function(){return this.throwIfDisposed(),ih(this)},ns().prototype.logicalOr=function(e){return this.throwIfDisposed(),oh(this,e)},ns().prototype.logicalXor=function(e){return this.throwIfDisposed(),uh(this,e)},ns().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),so(this,e,t,n)},ns().prototype.maxPool=function(e,t,n,a){return this.throwIfDisposed(),ph(this,e,t,n,a)},ns().prototype.max=function(e,t){return this.throwIfDisposed(),_c(this,e,t)},ns().prototype.maximum=function(e){return this.throwIfDisposed(),Qu(this,e)},ns().prototype.mean=function(e,t){return this.throwIfDisposed(),mh(this,e,t)},ns().prototype.min=function(e,t){return this.throwIfDisposed(),Ac(this,e,t)},ns().prototype.minimum=function(e){return this.throwIfDisposed(),xh(this,e)},ns().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),wh(this,e,t)},ns().prototype.mod=function(e){return this.throwIfDisposed(),kh(this,e)},ns().prototype.mul=function(e){return this.throwIfDisposed(),Fu(this,e)},ns().prototype.neg=function(){return this.throwIfDisposed(),_o(this)},ns().prototype.norm=function(e,t,n){return this.throwIfDisposed(),Dc(this,e,t,n)},ns().prototype.notEqual=function(e){return this.throwIfDisposed(),Sh(this,e)},ns().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),io(this,e,t,n)},ns().prototype.onesLike=function(){return this.throwIfDisposed(),Th(this)},ns().prototype.pad=function(e,t){return this.throwIfDisposed(),$h(this,e,t)},ns().prototype.pool=function(e,t,n,a,r,s){return this.throwIfDisposed(),Dh(this,e,t,n,a,r,s)},ns().prototype.pow=function(e){return this.throwIfDisposed(),Xu(this,e)},ns().prototype.prelu=function(e){return this.throwIfDisposed(),Oh(this,e)},ns().prototype.prod=function(e,t){return this.throwIfDisposed(),Mh(this,e,t)},ns().prototype.reciprocal=function(){return this.throwIfDisposed(),Xh(this)},ns().prototype.relu=function(){return this.throwIfDisposed(),Yh(this)},ns().prototype.relu6=function(){return this.throwIfDisposed(),Zh(this)},ns().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Al(this,e.shape)},ns().prototype.reshape=function(e){return this.throwIfDisposed(),Al(this,e)},ns().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Cd(this,e,t,n)},ns().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),$d(this,e,t,n)},ns().prototype.reverse=function(e){return this.throwIfDisposed(),Jh(this,e)},ns().prototype.rfft=function(){return this.throwIfDisposed(),wp(this)},ns().prototype.round=function(){return this.throwIfDisposed(),ap(this)},ns().prototype.rsqrt=function(){return this.throwIfDisposed(),rp(this)},ns().prototype.selu=function(){return this.throwIfDisposed(),sp(this)},ns().prototype.separableConv2d=function(e,t,n,a,r,s){return this.throwIfDisposed(),ip(this,e,t,n,a,r,s)},ns().prototype.sigmoid=function(){return this.throwIfDisposed(),Ol(this)},ns().prototype.sign=function(){return this.throwIfDisposed(),up(this)},ns().prototype.sin=function(){return this.throwIfDisposed(),lp(this)},ns().prototype.sinh=function(){return this.throwIfDisposed(),cp(this)},ns().prototype.slice=function(e,t){return this.throwIfDisposed(),Ml(this,e,t)},ns().prototype.softmax=function(e){return this.throwIfDisposed(),mp(this,e)},ns().prototype.softplus=function(){return this.throwIfDisposed(),th(this)},ns().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),Fh(this,e,t)},ns().prototype.split=function(e,t){return this.throwIfDisposed(),xp(this,e,t)},ns().prototype.sqrt=function(){return this.throwIfDisposed(),Du(this)},ns().prototype.square=function(){return this.throwIfDisposed(),Ou(this)},ns().prototype.squaredDifference=function(e){return this.throwIfDisposed(),kp(this,e)},ns().prototype.squeeze=function(e){return this.throwIfDisposed(),vp(this,e)},ns().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof ts?[this,e]:[this,...e];return Ip(n,t)},ns().prototype.step=function(e){return this.throwIfDisposed(),Np(this,e)},ns().prototype.stridedSlice=function(e,t,n,a,r,s,i,o){return this.throwIfDisposed(),Sp(this,e,t,n,a,r,s,i,o)},ns().prototype.sub=function(e){return this.throwIfDisposed(),Yu(this,e)},ns().prototype.sum=function(e,t){return this.throwIfDisposed(),Rc(this,e,t)},ns().prototype.tan=function(){return this.throwIfDisposed(),Tp(this)},ns().prototype.tanh=function(){return this.throwIfDisposed(),Ll(this)},ns().prototype.tile=function(e){return this.throwIfDisposed(),Pc(this,e)},ns().prototype.toBool=function(){return this.throwIfDisposed(),Mi(this,"bool")},ns().prototype.toFloat=function(){return this.throwIfDisposed(),Mi(this,"float32")},ns().prototype.toInt=function(){return this.throwIfDisposed(),Mi(this,"int32")},ns().prototype.topk=function(e,t){return this.throwIfDisposed(),Rp(this,e,t)},ns().prototype.transpose=function(e){return this.throwIfDisposed(),Ro(this,e)},ns().prototype.unique=function(e){return this.throwIfDisposed(),Dp(this,e)},ns().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Op(this,e,t)},ns().prototype.unstack=function(e){return this.throwIfDisposed(),Mp(this,e)},ns().prototype.where=function(e,t){return this.throwIfDisposed(),gc(e,this,t)},ns().prototype.zerosLike=function(){return this.throwIfDisposed(),Mu(this)};class _g extends Error{constructor(e){super(e),Object.setPrototypeOf(this,_g.prototype)}}class Ag extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ag.prototype)}}class Rg extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Rg.prototype)}}class Fg extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Fg.prototype)}}class Dg extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Dg.prototype)}}Error;class Og{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function Mg(e,t){if(Array.isArray(e)){let n=[];for(let a=0;a<t;a++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Lg(e,t){if(!e)throw new Dg(t)}function zg(e,t){let n=0;for(const a of e)a===t&&n++;return n}function Pg(e){return 1===e.length?e[0]:e}function Bg(e){return Array.isArray(e)?e:[e]}function Wg(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Vg(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let Ug={};function Gg(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Hg(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>Hg(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Hg(t):e[n]=t.value)}}}function jg(e,t={},n={},a="object",r=!1){if("string"==typeof e){const r=e;let s;if(r in n)s=n[r];else if(r in Ug)s=Ug[r];else if(s=t[r],null==s)throw new Rg(`Unknown ${a}: ${e}. This may be due to one of the following reasons:\n1. The ${a} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${a} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return s}{const s=e;if(null==s.className||null==s.config)throw new Rg(`${a}: Improper config format: ${JSON.stringify(s)}.\n'className' and 'config' must set.`);const i=s.className;let o,u;if(i in n?[o,u]=n[i]:i in Ug?[o,u]=Ug.className:i in t&&([o,u]=t[i]),null==o)throw new Rg(`Unknown ${a}: ${i}. This may be due to one of the following reasons:\n1. The ${a} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${a} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const e={};for(const t of Object.keys(Ug))e[t]=Ug[t];for(const t of Object.keys(n))e[t]=n[t];s.config.customObjects=e;const t=Object.assign({},Ug);for(const e of Object.keys(n))Ug[e]=n[e];Hg(s.config);const a=u(o,s.config,n,r);return Ug=Object.assign({},t),a}{const e=Object.assign({},Ug);for(const e of Object.keys(n))Ug[e]=n[e];const t=new o(s.config);return Ug=Object.assign({},e),t}}}function qg(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Kg(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Xg(e){if(null==e)throw new Rg(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Yg(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Rg(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Zg(e,t,n=0,a=1/0){return Lg(n>=0),Lg(a>=n),Array.isArray(e)&&e.length>=n&&e.length<=a&&e.every((e=>typeof e===t))}function Jg(e,t){Array.isArray(e)?(ae(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>Jg(e,`element ${n+1} of ${t}`)))):ae(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Qg(e)}.`))}function Qg(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Qg(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function ey(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let ty=0;function ny(){return ty++}const ay={};function ry(e=""){return e in ay||(ay[e]=0),ay[e]+=1,e+ay[e].toString()}const sy=["channelsFirst","channelsLast"],iy=["nearest","bilinear"],oy=["valid","same","causal"],uy=["max","avg"],ly=["sum","mul","concat","ave"],cy=new Map;function hy(e){Yg(sy,"DataFormat",e)}function py(e){Yg(oy,"PaddingMode",e)}function dy(e){Yg(uy,"PoolMode",e)}const fy=[];function my(e,t){fy.push(e);try{const e=t();return fy.pop(),e}catch(e){throw fy.pop(),e}}function gy(e){if(!xy(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===fy.length?"":fy.join("/")+"/")+e}function yy(e){if(!xy(e))throw new Error("Not a valid tensor name: '"+e+"'");cy.has(e)||cy.set(e,0);const t=cy.get(e);if(cy.set(e,cy.get(e)+1),t>0){const n=`${e}_${t}`;return cy.set(n,1),n}return e}const by=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function xy(e){return!!e.match(by)}function wy(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let a=1;for(let r=t;r<n;++r)a*=e[r];return a}function ky(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const a=e[n];a<t&&(t=a)}return t}function vy(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const a=e[n];a>t&&(t=a)}return t}function Iy(e,t){if(t<e)throw new Rg(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let a=e;a<t;++a)n.push(a);return n}let Ny;function Sy(){return null==Ny&&(Ny=Co().epsilon()),Ny}function Ty(e,t){return Mi(e,t)}function Cy(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),Al(e,n)}function $y(e,t,n){return go((()=>{switch(e.rank){case 1:return hp(e,t,n);case 2:return pp(e,[t,0],[n,e.shape[1]]);case 3:return dp(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return fp(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Ml(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Ml(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Rg(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Ey(e,t,n){return go((()=>{switch(e.rank){case 1:return hp(e,t,n);case 2:return pp(e,[0,t],[e.shape[0],n]);case 3:return dp(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return fp(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Rg(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function _y(e,t,n,a){return go((()=>{switch(e.rank){case 1:return hp(e,t,n);case 2:switch(a){case 1:return $y(e,t,n);case 2:return Ey(e,t,n);default:throw new Rg(`The axis is not within the rank of the tensor ${a}`)}case 3:switch(a){case 1:return $y(e,t,n);case 2:return dp(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return Ey(e,t,n);default:throw new Rg(`The axis is not within the rank of the tensor ${a}`)}case 4:switch(a){case 1:return $y(e,t,n);case 2:return fp(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return fp(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return Ey(e,t,n);default:throw new Rg(`The axis is not within the rank of the tensor ${a}`)}default:throw new Rg(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Ay(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),Dl(e,t)}function Ry(e,t){switch(e.rank){case 1:return Xl([e,t]);case 2:return Yl([e,t],0);case 3:return Zl([e,t],0);case 4:return Jl([e,t],0);default:throw new Rg(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function Fy(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Rg(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Pc(e,t)}function Dy(e,t=0,n=1,a,r){return Hh(e,t,n,a,r)}function Oy(e,t,n,a){if(e.rank<2||t.rank<2)throw new Fg(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Fg(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return sd({a:e,b:t,transposeA:!1,transposeB:!1,bias:a?zy(e.rank,a,"channelsLast"):null,activation:n});{const r=e.shape.slice(),s=r.pop();e=Al(e,[-1,s]);const i=t.shape.slice(),o=i.pop(),u=i.pop(),l=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=Al(Ro(t,c),[u,-1]);const h=[...r,...l];return Al(sd({a:e,b:t,transposeA:!1,transposeB:!1,bias:a?zy(e.rank,a,"channelsLast"):null,activation:n}),h)}}function My(e,t,n){return go((()=>(t=Array.isArray(t)?Cp(t,"int32"):Mi(t,"int32"),Vc(e,t,n))))}function Ly(e){return Fu(e,e)}function zy(e,t,n){const a=t.shape;if(1!==t.rank&&t.rank!==e)throw new Rg(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===a.length?Al(t,[1,a[0],1,1,1]):Al(t,[1,a[3],a[0],a[1],a[2]]);if("channelsLast"===n)return 1===a.length?Al(t,[1,1,1,1,a[0]]):Al(t,[1].concat(a))}else if(4===e){if("channelsFirst"===n)return 1===a.length?Al(t,[1,a[0],1,1]):Al(t,[1,a[2],a[0],a[1]]);if("channelsLast"===n)return 1===a.length?Al(t,[1,1,1,a[0]]):Al(t,[1].concat(a))}else if(3===e){if("channelsFirst"===n)return 1===a.length?Al(t,[1,a[0],1]):Al(t,[1,a[1],a[0]]);if("channelsLast"===n)return 1===a.length?Al(t,[1,1,a[0]]):Al(t,[1].concat(a))}else if(e<3)return t;throw new Rg(`Unsupported input rank by biasAdd: ${t.rank}`)}function Py(e,t,n){return go((()=>(null==n&&(n="channelsLast"),hy(n),_u(e,zy(e.rank,t,n)))))}function By(e,t,n,a){return go((()=>jp(e,t,n,a)))}function Wy(e,t,n=!1){return n?e():t()}const Vy=["fanIn","fanOut","fanAvg"],Uy=["normal","uniform","truncatedNormal"];class Gy extends pu{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Hy extends Gy{apply(e,t){return gh(e,t)}}Hy.className="Zeros",fu(Hy);class jy extends Gy{apply(e,t){return yh(e,t)}}jy.className="Ones",fu(jy);class qy extends Gy{constructor(e){if(super(),"object"!=typeof e)throw new Rg(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Rg(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return go((()=>Fu(Gu(this.value),yh(e,t))))}getConfig(){return{value:this.value}}}qy.className="Constant",fu(qy);class Ky extends Gy{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return qh(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Ky.className="RandomUniform",fu(Ky);class Xy extends Gy{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Fg(`randomNormal does not support dType ${t}.`);return Dy(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Xy.className="RandomNormal",fu(Xy);class Yy extends Gy{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Fg(`truncatedNormal does not support dType ${t}.`);return Fp(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Yy.className="TruncatedNormal",fu(Yy);class Zy extends Gy{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return go((()=>{if(2!==e.length||e[0]!==e[1])throw new Rg("Identity matrix initializer can only be used for 2D square matrices.");return Fu(this.gain,Bc(e[0]))}))}getConfig(){return{gain:this.gain}}}Zy.className="Identity",fu(Zy);class Jy extends Gy{constructor(e){if(super(),e.scale<0)throw new Rg(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,Yg(Vy,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Yg(Uy,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,a;if(hy(t),2===e.length)n=e[0],a=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=wy(e,2);n=e[1]*t,a=e[0]*t}else if("channelsLast"===t){const t=wy(e,0,e.length-2);n=e[e.length-2]*t,a=e[e.length-1]*t}}else{const t=wy(e);n=Math.sqrt(t),a=Math.sqrt(t)}return[n,a]}(e),a=n[0],r=n[1];let s=this.scale;if("fanIn"===this.mode?s/=Math.max(1,a):"fanOut"===this.mode?s/=Math.max(1,r):s/=Math.max(1,(a+r)/2),"normal"===this.distribution){const n=Math.sqrt(s);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Fg(`${this.getClassName()} does not support dType ${t}.`);return Fp(e,0,n,t,this.seed)}{const n=Math.sqrt(3*s);return qh(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Jy.className="VarianceScaling",fu(Jy);class Qy extends Jy{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Jy.className}}Qy.className="GlorotUniform",fu(Qy);class eb extends Jy{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Jy.className}}eb.className="GlorotNormal",fu(eb);class tb extends Jy{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Jy.className}}tb.className="HeNormal",fu(tb);class nb extends Jy{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Jy.className}}nb.className="HeUniform",fu(nb);class ab extends Jy{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Jy.className}}ab.className="LeCunNormal",fu(ab);class rb extends Jy{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Jy.className}}rb.className="LeCunNormal",fu(rb);class sb extends Gy{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Fg("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return go((()=>{if(e.length<2)throw new Fg("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=Dy(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=tf.gramSchmidt(t);return e[0]>e[1]&&(n=Ro(n)),Fu(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}sb.className="Orthogonal",fu(sb);const ib={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function ob(e,t={}){return jg(e,du.getMap().classNameMap,t,"initializer")}function ub(e){return Gg(e)}function lb(e){if("string"==typeof e){const t=e in ib?ib[e]:e;if("GlorotNormal"===t)return new eb;if("GlorotUniform"===t)return new Qy;if("HeNormal"===t)return new tb;if("HeUniform"===t)return new nb;if("LeCunNormal"===t)return new ab;if("LeCunUniform"===t)return new rb;{const e={};return e.className=t,e.config={},ob(e)}}return e instanceof Gy?e:ob(e)}function cb(e){return Array.isArray(e)&&Array.isArray(e[0])}function hb(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function pb(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Rg(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function db(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new Rg(`Expected exactly 1 Shape; got ${e.length}`)}return e}function fb(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const mb="Variable";class gb{constructor(e,t="float32",n=mb,a=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=ny(),n=null==n?mb:n,this.originalName=gy(n),this.name=yy(this.originalName),this.trainable_=a,this.constraint=r,this.val=zp(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function yb(e){return e.map((e=>e.read()))}function bb(e){e.forEach((e=>{e[0].write(e[1])}))}class xb{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class wb{constructor(e,t,n,a,r,s,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=a,this.callArgs=r,this.outputTensorIndex=i,this.id=ny(),null!=s&&(this.originalName=gy(s),this.name=yy(this.originalName)),this.rank=t.length}}let kb=0;class vb{constructor(e,t){this.callArgs=t,this.id=kb++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Ib=0;class Nb extends pu{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Ib++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Wg(e)+"_"+ry(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Ag(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Rg(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Pg(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Pg(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new _g(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new _g(`Layer ${this.name} is not connected, no input to return.`);return Pg(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new _g(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new _g(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Pg(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Bg(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Bg(this.inputSpec);if(e.length!==t.length)throw new Rg(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const a=e[n],r=t[n];if(null==r)continue;const s=a.rank;if(null!=r.ndim&&s!==r.ndim)throw new Rg(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${s}`);if(null!=r.maxNDim&&s>r.maxNDim)throw new Rg(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${s}`);if(null!=r.minNDim&&s<r.minNDim)throw new Rg(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${s}.`);if(null!=r.dtype&&a.dtype!==r.dtype)throw new Rg(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${a.dtype}.`);if(r.axes){const e=a.shape;for(const t in r.axes){const a=Number(t),s=r.axes[t],i=a>=0?e[a]:e[e.length+a];if(null!=s&&-1===[s,null].indexOf(i))throw new Rg(`Input ${n} is incompatible with layer ${this.name}: expected axis ${a} of input shape to have value ${s} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],s=a.shape[e];if(null!=t&&null!=s&&t!==s)throw new Rg(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${a.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Bg(e);let a=!0;for(const e of n)if(!(e instanceof wb)){a=!1;break}let r=!0;for(const e of n)if(e instanceof wb){r=!1;break}if(a===r)throw new Rg("Arguments to apply() must be all SymbolicTensors or all Tensors");return my(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Bg(e))t.push(n.shape);this.build(Pg(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let a=this.call(e,t);const r=Bg(a),s=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),s.push(e);if(a=Pg(s),null!=this.activityRegularizer)throw new Fg("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}{const n=function(e){e=Bg(e);const t=[];for(const n of e)t.push(n.shape);return Pg(t)}(e),a=this.computeOutputShape(n);let r;const s="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=a&&a.length>0&&Array.isArray(a[0])?a.map(((n,a)=>new wb(s,n,this,Bg(e),t,this.name,a))):new wb(s,a,this,Bg(e),t,this.name),this.addInboundNode(e,r,null,null,n,a,t),this._refCount++,null!=this.activityRegularizer)throw new Fg("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,a)=>{null!=n&&null!=e[a]&&e[a]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new _g(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new _g(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Ag(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return fb(this.weights)}build(e){this.built=!0}getWeights(e=!1){return yb(e?this.trainableWeights:this.weights)}setWeights(e){go((()=>{const t=this.weights;if(t.length!==e.length)throw new Rg(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],a=yb(t);for(let r=0;r<a.length;++r){const s=a[r],i=t[r],o=e[r];if(!le(s.shape,o.shape))throw new Rg(`Layer weight shape ${s.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}bb(n)}))}addWeight(e,t,n,a,r,s,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new Rg(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(a=null!=o?o():lb("zeros"));const u=a.apply(t,n),l=new gb(u,n,e,s,i);return u.dispose(),null!=r&&this.addLoss((()=>r.apply(l.read()))),null==s&&(s=!0),s?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Bg(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,a,r,s,i=null){const o=Bg(e);t=Bg(t),n=Bg(n),a=Bg(a),r=hb(r),s=hb(s);const u=[],l=[],c=[];for(const e of o)u.push(e.sourceLayer),l.push(e.nodeIndex),c.push(e.tensorIndex);new vb({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:a,inputShapes:r,outputShapes:s},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function Sb(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const a=Sb(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of a)-1===t.indexOf(e)&&t.push(e)}return t}}}class Tb extends Nb{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:ry("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Rg("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Rg("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Rg("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const a=new wb(this.dtype,this.batchInputShape,this,[],{},this.name);a.nodeIndex=0,a.tensorIndex=0,new vb({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[a],outputTensors:[a],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Rg(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Cb(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Rg("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Tb({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}Tb.className="InputLayer",fu(Tb);class $b{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof $b)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Rg(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Mi(t,e.dtype)}catch(n){throw new Rg(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof wb){if(null==this.id2Value[e.id])throw new Rg(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Rg(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof wb){if(null==this.id2Value[e.id])throw new Rg(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Rg(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&yo(this.id2Mask)}}const Eb=new Og,_b=new Og;function Ab(e,t,n,a){const r=null!=n&&n.training,s=Array.isArray(e),i=s?e:[e],o=i.map((e=>e.name)),u=[],l=t.names();for(const e of o)-1!==l.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=a&&(a.maxNumTensors=-1/0,a.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().sort().join(",");let h,p=Eb.get(c);if(null==p){const e=function(e,t){ae(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],a={};if(1===e.length){const r=Fb(e[0],t);n=r.sorted,a=r.recipientMap}else{const r=new Set;for(const s of e){const{sorted:e,recipientMap:i}=Fb(s,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==a[e]&&(a[e]=new Set),i[e].forEach((t=>a[e].add(t)))}}return{sorted:n,recipientCounts:Rb(a)}}(i,t);p=e.sorted,h=e.recipientCounts,Eb.put(c,p),_b.put(c,h)}h={},r||Object.assign(h,_b.get(c));const d=new $b(t);for(let e=0;e<p.length;++e){if(null!=a){const e=fo().numTensors;e>a.maxNumTensors&&(a.maxNumTensors=e),e<a.minNumTensors&&(a.minNumTensors=e)}const s=p[e],i=s.sourceLayer;if(i instanceof Tb)continue;const l=[],c=[],f=[];let m=!1;for(const e of s.inputs){const n=d.getValue(e),a=d.getMask(e);l.push(n),c.push(a),null!=a&&(m=!0),r||(h[e.name]--,0!==h[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Bg(i.apply(l,n));let y=null;i.supportsMasking&&(y=i.computeMask(l,c));const b=Db(s),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}r||yo(f)}return d.disposeMasks(),s?u:u[0]}function Rb(e){const t={};for(const n in e)t[n]=e[n].size;return t}function Fb(e,t){const n=new Set,a=[],r={};for(const e of t.names())n.add(e);const s=[],i=[];for(s.push(e);s.length>0;){const e=s[s.length-1];if(n.has(e.name)){s.pop();continue}const t=i[i.length-1]===s.length-1;if(0===e.inputs.length||t)s.pop(),a.push(e),n.add(e.name),t&&i.pop();else{i.push(s.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||s.push(t)}}return{sorted:a,recipientMap:r}}function Db(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const a of e.sourceLayer.inboundNodes[t].outputTensors)if(a.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function Ob(e,t){return go((()=>Du(Rc(Fu(e,e),t,!0))))}je().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=Eb&&Eb.setMaxEntries(e),null!=_b&&_b.setMaxEntries(e)}));class Mb extends pu{getConfig(){return{}}}class Lb extends Mb{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return go((()=>{const t=Ob(e,this.axis),n=Kl(t,0,this.maxValue);return Fu(e,Ru(n,_u(Sy(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Lb.className="MaxNorm",fu(Lb);class zb extends Mb{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return go((()=>Ru(e,_u(Sy(),Ob(e,this.axis)))))}getConfig(){return{axis:this.axis}}}zb.className="UnitNorm",fu(zb);class Pb extends Mb{apply(e){return Yh(e)}}Pb.className="NonNeg",fu(Pb);class Bb extends Mb{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return go((()=>{const t=Ob(e,this.axis),n=_u(Fu(this.rate,Kl(t,this.minValue,this.maxValue)),Fu(1-this.rate,t));return Fu(e,Ru(n,_u(Sy(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Bb.className="MinMaxNorm",fu(Bb);const Wb={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Vb(e){return Gg(e)}function Ub(e,t={}){return jg(e,du.getMap().classNameMap,t,"constraint")}function Gb(e){return null==e?null:"string"==typeof e?Ub({className:e in Wb?Wb[e]:e,config:{}}):e instanceof Mb?e:Ub(e)}function Hb(e){return new Lb(e)}function jb(e){return new zb(e)}function qb(){return new Pb}function Kb(e){return new Bb(e)}function Xb(){return new Hy}function Yb(){return new jy}function Zb(e){return new qy(e)}function Jb(e){return new Ky(e)}function Qb(e){return new Xy(e)}function ex(e){return new Yy(e)}function tx(e){return new Zy(e)}function nx(e){return new Jy(e)}function ax(e){return new Qy(e)}function rx(e){return new eb(e)}function sx(e){return new tb(e)}function ix(e){return new nb(e)}function ox(e){return new ab(e)}function ux(e){return new rb(e)}function lx(e){return new sb(e)}async function cx(e){if(null==e)return;const t=[],n=[],a=[];for(const r in e){const s=e[r];if("number"!=typeof s){const e=s;t.push(e.data()),n.push(r),a.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];yo(a)}}function hx(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var px;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(px||(px={}));class dx{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class fx{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class mx extends dx{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const a=t[e];if("number"==typeof a)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+a*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=go((()=>_u(this.totals[e],Fu(a,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:go((()=>{const n=Fu(Ru(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),bo(t[e])})))}}class gx extends dx{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const a in this.history){const r=this.history[a];for(let s=0;s<r.length;++s)if("number"!=typeof r[s]){const i=r[s];e.push(i.data()),t.push(a),n.push(s)}}const a=await Promise.all(e);for(let e=0;e<a.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=a[e][0]}}class yx extends dx{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||uf,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Ee(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let a,r=null!=n?n():Pr();return(...s)=>{const i=null!=n?n():Pr();return i-r<t||(r=i,a=e(...s)),a}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const a=[];null!=this.yield&&(await cx(n),a.push(this.yield(e,t,n))),a.push(this.nextFrameFunc()),await Promise.all(a)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await cx(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await cx(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await cx(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await cx(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Ee(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await cx(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await cx(e),await this.trainEnd(e))}}function bx(e,t){return null==e&&(e={}),e instanceof dx?[e]:Array.isArray(e)&&e[0]instanceof dx?e:Bg(e).map((e=>new yx(e,t)))}class xx{constructor(){}static registerCallbackConstructor(e,t){ae(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),xx.checkForDuplicate(t),null==xx.constructors[e]&&(xx.constructors[e]=[]),xx.constructors[e].push(t)}static checkForDuplicate(e){for(const t in xx.constructors)xx.constructors[+t].forEach((t=>{if(t===e)throw new Rg("Duplicate callback constructor.")}))}static clear(){xx.constructors={}}static createCallbacks(e){const t=[];for(const n in xx.constructors){const a=+n;e>=a&&t.push(...xx.constructors[a])}return t.map((e=>new e))}}function wx(e,t,n,a,r,s,i,o,u){const l=new gx,c=[new mx,...xx.createCallbacks(t)];null!=e&&c.push(...e),c.push(l);const h=new fx(c);return h.setParams({epochs:n,initialEpoch:a,samples:r,steps:s,batchSize:i,verbose:t,doValidation:o,metrics:u}),{callbackList:h,history:l}}function kx(e,t={},n=!1){return jg(e,du.getMap().classNameMap,t,"layer",n)}function vx(e,t){return go((()=>{"float32"!==e.dtype&&(e=Mi(e,"float32"));const n=Rc(Ly(e),t,!0),a=qu(n.shape,Sy()),r=Du(Qu(n,a));return Ru(e,r)}))}function Ix(e,t){return go((()=>mh(Ly(Yu(t,e)),-1)))}function Nx(e,t){return go((()=>mh(Ju(Yu(t,e)),-1)))}function Sx(e,t){return go((()=>{const n=Yu(e,t),a=Kl(Ju(e),Sy(),Number.MAX_VALUE),r=Ju(Ru(n,a));return Fu(100,mh(r,-1))}))}function Tx(e,t,n=!1){return go((()=>{if(n)t=mp(t);else{const e=Rc(t,t.shape.length-1,!0);t=Ru(t,e)}return t=Kl(t,Sy(),1-Sy()),_o(Rc(Fu(Mi(e,"float32"),Qc(t)),t.shape.length-1))}))}function Cx(e,t,n=!1){return go((()=>{const a=Mi(Wc(function(e){const t=[wy(e.shape)];return Al(e,t)}(e)),"int32"),r=(t=Kl(t,Sy(),1-Sy())).shape;return Tx(Al(io(a,r[r.length-1]),r),t,n)}))}function $x(e,t){return go((()=>{let n;return n=Kl(t,Sy(),1-Sy()),n=Qc(Ru(n,Yu(1,n))),mh(function(e,t){if(!le(e.shape,t.shape))throw new Rg(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return go((()=>{const n=Yh(t),a=_o(Ju(t));return _u(Yu(n,Fu(t,e)),eh(Mc(a)))}))}(e,n),-1)}))}function Ex(e,t){return go((()=>{const n=vx(e,-1),a=vx(t,-1),r=Fu(n,a);return _o(Rc(r,-1))}))}xx.constructors={};const _x={meanSquaredError:Ix,meanAbsoluteError:Nx,meanAbsolutePercentageError:Sx,meanSquaredLogarithmicError:function(e,t){return go((()=>{const n=Kl(t,Sy(),Number.MAX_VALUE),a=Qc(_u(1,n)),r=Kl(e,Sy(),Number.MAX_VALUE),s=Qc(_u(1,r));return mh(Ly(Yu(a,s)),-1)}))},squaredHinge:function(e,t){return go((()=>{const n=Qu(0,Yu(1,Fu(e,t)));return mh(Ly(n),-1)}))},hinge:function(e,t){return go((()=>{const n=Qu(0,Yu(1,Fu(e,t)));return mh(n,-1)}))},categoricalHinge:function(e,t){return go((()=>{const n=Rc(Fu(e,t),-1),a=_c(Fu(Yu(1,e),t),-1);return Qu(0,_u(1,Yu(a,n)))}))},logcosh:function(e,t){return go((()=>{const n=Math.log(2),a=Yu(t,e),r=Yu(_u(a,th(Fu(-2,a))),n);return mh(r,-1)}))},categoricalCrossentropy:Tx,sparseCategoricalCrossentropy:Cx,binaryCrossentropy:$x,kullbackLeiblerDivergence:function(e,t){return go((()=>{const n=Kl(e,Sy(),1),a=Kl(t,Sy(),1);return Rc(Fu(e,Qc(Ru(n,a))),-1)}))},poisson:function(e,t){return go((()=>{const n=Qc(_u(Sy(),t));return mh(Yu(t,Fu(e,n)),-1)}))},cosineProximity:Ex};function Ax(e){if("string"==typeof e){if(e in _x)return _x[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Rg(t)}return e}function Rx(e,t){return go((()=>{const n=Fu(.5,Th(t)),a=Ty(Uc(t,n),e.dtype);return mh(mc(e,a),-1)}))}function Fx(e,t){return go((()=>Ty(mc(cl(e,-1),cl(t,-1)),"float32")))}function Dx(e,t){return go((()=>Mi(Rc(sh(mc(e,1),mc(t,1))),"float32")))}function Ox(e,t){return go((()=>{const n=Dx(e,t),a=function(e,t){return go((()=>Mi(Rc(sh(mc(e,0),mc(t,1))),"float32")))}(e,t),r=_u(n,a);return Mi(gc(Uc(r,0),Ru(n,r),0),"float32")}))}function Mx(e,t){return $x(e,t)}function Lx(e,t){return e.rank===t.rank&&(e=vp(e,[e.rank-1])),(t=cl(t,-1)).dtype!==e.dtype&&(t=Mi(t,e.dtype)),Mi(mc(e,t),"float32")}const zx=Tx,Px=Cx,Bx={binaryAccuracy:Rx,categoricalAccuracy:Fx,precision:Ox,categoricalCrossentropy:zx,sparseCategoricalCrossentropy:Px,mse:Ix,MSE:Ix,mae:Nx,MAE:Nx,mape:Sx,MAPE:Sx,cosine:Ex};function Wx(e){if("string"==typeof e&&e in Bx)return Bx[e];if("string"!=typeof e&&null!=e)return e;throw new Rg(`Unknown metric ${e}`)}function Vx(e){if(Lg(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(_x))if(_x[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(Bx))if(Bx[n]===e){t=n;break}return void 0!==t?t:e.name}}function Ux(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Gx(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Gx(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Gx(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Gx(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function Hx(e,t,n=console.log){let a="";for(let n=0;n<e.length;++n)n>0&&(a=a.slice(0,a.length-1)+" "),a+=e[n],a=a.slice(0,t[n]),a+=" ".repeat(t[n]-a.length);n(a)}function jx(e,t,n){let a,r;try{r=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){r="multiple"}try{a=JSON.stringify(e.outputShape)}catch(e){a="multiple"}Hx([`${e.name} (${e.getClassName()})`,r,a,e.countParams().toString()],t,n)}function qx(e,t,n,a){let r,s;try{s=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){s="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const i=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,a=t.nodeIndices[e],r=t.tensorIndices[e];i.push(`${n}[${a}][${r}]`)}const o=e.name,u=e.getClassName(),l=0===i.length?"":i[0];Hx([`${o} (${u})`,s,r,e.countParams().toString(),l],t,a);for(let e=1;e<i.length;++e)Hx(["","","","",i[e]],t,a)}function Kx(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Xx(e,t){if(null===e)return null;if("string"==typeof e)return Vg(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],a=e.length;for(let r=0;r<a;++r){const a=e[r];Kx(t,r,a)?n.push(a):n.push(Xx(a,t))}return n}{const t={};for(const n of Object.keys(e)){const a=e[n];if("name"===n&&"string"==typeof a)t[n]=a;else{const e=Vg(n);t[e]=Xx(a,e)}}return t}}function Yx(e,t){if(null==e)return null;if("string"==typeof e)return Wg(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],a=e.length;for(let r=0;r<a;++r){const a=e[r];Kx(t,r,a)?n.push(a):n.push(Yx(a,t))}return n}{const t={};for(const n of Object.keys(e)){const a=e[n];t[Wg(n)]="name"!==n&&"className"!==n||"string"!=typeof a?Yx(a,n):a}return t}}const Zx="3.21.0";class Jx extends Nb{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=ry(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Kg(this.inputs).length!==this.inputs.length)throw new Rg(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Kg(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,a=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(a)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,a=e.tensorIndex;Lg(0===n,"input layer has >1 nodes"),Lg(0===a,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(a)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof Tb))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},a={},r={},s={},i=[],o=(e,t,n,a,r,u)=>{null!=a&&null!=r&&null!=u||(a=e.sourceLayer,r=e.nodeIndex,u=e.tensorIndex);const l=a.inboundNodes[r];if(-1!==n.indexOf(l))throw new Ag(`The tensor ${e.name} at layer "${a.name}" is part of a cycle.`);if(-1!==t.indexOf(l))return;this.containerNodes.add(Jx.nodeKey(a,r)),a.id in s||(s[a.id]=Object.keys(s).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let e=0;e<c;e++){const a=l.inputTensors[e],r=l.inboundLayers[e],s=l.nodeIndices[e],i=l.tensorIndices[e];o(a,t,n,r,s,i)}for(t.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const e of this.outputs)o(e,u,l);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let s=t[e.id];const i=null==a[e.outboundLayer.id]?0:a[e.outboundLayer.id];s=Math.max(s,i),a[e.outboundLayer.id]=s,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=s;for(let a=0;a<e.inboundLayers.length;a++){const r=e.inboundLayers[a],i=e.nodeIndices[a],o=r.inboundNodes[i],u=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(s+1,u),n[o.id]=o}}const h={};for(const e in t){const a=t[e];a in h||(h[a]=[]),h[a].push(n[e])}const p={};for(const e in a){const t=a[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(qg);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=s[e.id],a=s[t.id];return n<a?-1:n>a?1:0}));for(const e of t)e instanceof Jx&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(qg);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Ag(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Ag(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new vb({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Rg("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let a=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Rg(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,a++}const r=[];for(const a in e){let s=a;if(null==n[a]){const e=a.split("/");s=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[s])r.push([n[s],e[a]]);else if(t)throw new Rg(`Provided weight data has no target variable: ${a}`);delete n[s]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Rg(`${e.length} of ${a} weights are not set: ${e}`)}bb(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${Zx}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Yx(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return go((()=>{e=Bg(e);const n=new $b;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return Ab(this.outputs,n,t)}))}computeMask(e,t){return go((()=>{let n;return e=Bg(e),n=null==t?Mg(null,e.length):Bg(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=hb(e);if(t.length!==this.inputLayers.length)throw new Rg(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const a=this.inputLayers[e],r=t[e];n[a.name+"_0_0"]=r}const a=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(qg);if(a.length>1)for(const e of a){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const a=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],s=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${s}_${i}`];a.push(o)}const r=hb(t.computeOutputShape(Pg(a))),s=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++)n[`${t.name}_${s}_${e}`]=r[e]}}const r=[],s=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],a=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${a}`;s.push(r)}for(let e=0;e<s.length;e++){const t=s[e];Lg(t in n),r.push(n[t])}return Pg(r)}runInternalGraph(e,t){null==t&&(t=Mg(null,e.length));const n={};for(let a=0;a<this.inputs.length;++a){const r=this.inputs[a],s=e[a],i=t[a];n[r.id]=[s,i]}const a=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(qg);for(const e of a){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,a=e.inputTensors,r=e.outputTensors,s=new Array;for(const e of a)e.id in n&&s.push(n[e.id]);if(s.length===a.length){let a,i,o,u,l={};if(null!=e.callArgs&&(l=e.callArgs),1===s.length){const[e,n]=s[0];null==l.mask&&(l.mask=n),o=Bg(t.call(e,l)),u=Bg(t.computeMask(e,n)),a=[e],i=[n]}else a=s.map((e=>e[0])),i=s.map((e=>e[1])),null==l.mask&&(l.mask=i),o=Bg(t.call(a,l)),u=Bg(t.computeMask(a,i));if(t.activityRegularizer)throw new Fg("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],a=o[e],s=u[e];n[t.id]=[a,s]}}}}const r=[],s=[],i=[];for(const e of this.outputs){Lg(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,a]=n[e.id];i.push(t.shape),r.push(t),s.push(a)}return[r,s,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof Jx?1:0;for(let a=0;a<e.inboundNodes.length;a++){const r=Jx.nodeKey(e,a);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Rg(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Rg("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Rg(`No such layer: ${e}`)}calculateLosses(){return go((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const a=Jx.nodeKey(t,n);this.containerNodes.has(a)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const a=e.getClassName(),r=e.getConfig(),s=[];for(let n=0;n<e.inboundNodes.length;n++){const a=e.inboundNodes[n],r=Jx.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(a.callArgs)try{JSON.stringify(a.callArgs),i=a.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${a.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(a.inboundLayers.length>0){const e=[];for(let n=0;n<a.inboundLayers.length;n++){const r=a.inboundLayers[n],s=a.nodeIndices[n],o=a.tensorIndices[n];let u=t[Jx.nodeKey(r,s)];null==u&&(u=0),e.push([r.name,u,o,i])}s.push(e)}}}const i={};i.name=e.name,i.className=a,i.config=r,i.inboundNodes=s,n.push(i)}e.layers=n;const a=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],s=Jx.nodeKey(n,r);if(!this.containerNodes.has(s))continue;let i=t[s];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];a.push([n.name,i,o])}e.inputLayers=a;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],a=this.outputLayersNodeIndices[e],s=Jx.nodeKey(n,a);if(!this.containerNodes.has(s))continue;let i=t[s];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},a=!1){const r={},s={};function i(e,t){e.name in s?s[e.name].push(t):s[e.name]=[t]}function o(e,t){const n=[];let a;for(const s of t){const o=s[0],u=s[1],l=s[2];if(a=null==s[3]?{}:s[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=u)return void i(e,t);const h=c.inboundNodes[u];n.push(h.outputTensors[l])}n.length>0&&e.apply(Pg(n),a)}function u(e){const n=e.name,s=kx(e,null!=t.customObjects?t.customObjects:{});s.setFastWeightInitDuringBuild(a),r[n]=s,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Rg(`Corrupted configuration, expected array for nodeData: ${e}`);i(s,e)}))}const l=t.name,c=t.layers;for(const e of c)u(e);for(;!Xg(s);)for(const e of c){const t=r[e.name];if(t.name in s){const e=s[t.name];delete s[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],a=e[2];Lg(t in r);const s=r[t].inboundNodes[n].outputTensors;h.push(s[a])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],a=e[2];Lg(t in r);const s=r[t].inboundNodes[n].outputTensors;p.push(s[a])}return new e({inputs:h,outputs:p,name:l})}get stateful(){if(this._stateful)throw new Rg("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){go((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function Qx(e,t){return function(e,t,n){const a=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===a)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==a)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${a} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${a}) outputs, so ${n} must be either an array with ${a} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function ew(e,t,n,a){if(null!=t||null!=a)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=go((()=>{if(1===e.shape.length)return Li(e);if(2===e.shape.length){if(e.shape[1]>1)return cl(e,1);if(1===e.shape[1])return Al(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),a=Array.from(await t.data());yo(t);const r=[];return a.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),Cp(r,"float32")}return null}function tw(e,t){return Fu(e,t)}function nw(e,t){let n,a;const r=t;n=r.xs,a=r.ys,ae(null!=n&&null!=a,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const s=aw("input",e.inputNames,n),i=aw("output",e.outputNames,a),o=s[0].shape[0];ae(s.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${s.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),ae(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<s.length;t++)ae(s[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${s[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)ae(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:s,ys:i}}function aw(e,t,n){if(n instanceof ts)return[n];if(Array.isArray(n))return ae(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const a=[];for(const r of t){if(null==n[r])throw new Rg(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);a.push(n[r])}return a}}function rw(e){return"function"==typeof e.iterator}function sw(e){ae(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function iw(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>$y(e,t,n-t))):$y(e,t,n-t)}function ow(e,t){return go((()=>null==e?null:Array.isArray(e)?e.map((e=>ow(e,t))):My(e,"int32"===t.dtype?t:Mi(t,"int32"))))}function uw(e,t){const n=[];let a=0,r=null;for(;a<e;)r=a+t,r>=e&&(r=e),n.push([a,r]),a=r;return n}function lw(e){const t=[];e instanceof ts&&(e=[e]);for(let n=0;n<e.length;++n){const a=e[n];if(1===a.rank)t.push(Cy(a,1));else{if(0===a.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(a)}}return t}function cw(e,t){if(null==e)return;const n=[];if(t instanceof ts)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const a=t[e];n.push(a.id)}const a=[];if(e instanceof ts)-1===n.indexOf(e.id)&&a.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&a.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&a.push(r)}a.forEach((e=>{e.isDisposed||e.dispose()}))}function hw(e){return Array.isArray(e)}function pw(e){return!function(e){return e instanceof ts}(e)&&!hw(e)}function dw(e,t,n,a=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(hw(e)&&e.length>0)t=!0;else if(pw(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Rg(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let s;if(pw(e)){s=[];for(const n of t){if(null==e[n])throw new Rg(`No data provided for "${n}". Need data for each key in: ${t}`);s.push(e[n])}}else if(hw(e)){if(e.length!==t.length)throw new Rg(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);s=e}else{if(t.length>1)throw new Rg(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);s=[e]}if(s=lw(s),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=s[e];if(i.shape.length!==n[e].length)throw new Rg(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!a)continue;const s=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&s!==o)throw new Rg(`${r} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return s}function fw(e,t,n,a=!0,r=""){let s;if(Array.isArray(e)){if(e.length!==t.length)throw new Rg(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);s=e}else{if(t.length>1)throw new Rg(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);s=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=s[e];if(i.shape.length!==n[e].length)throw new Rg(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let s=0;s<n[e].length;++s){if(0===s&&!a)continue;const o=i.shape[s],u=n[e][s];if(null!=u&&u!==o)throw new Rg(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class mw extends Jx{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Rg("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,a=console.log){const r=function(e){let t=!0;const n=[],a=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}a.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==a.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),s=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(r?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){s.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}a("_".repeat(t)),Hx(s,n,a),a("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?jx(o[e],n,a):qx(o[e],n,i,a),a((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const u=function(e){let t;return t=null!=e.collectedTrainableWeights?fb(e.collectedTrainableWeights):fb(e.trainableWeights),t}(e),l=fb(e.nonTrainableWeights);a(`Total params: ${u+l}`),a(`Trainable params: ${u}`),a(`Non-trainable params: ${l}`),a("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>sf.adagrad(.01),Adadelta:()=>sf.adadelta(1,.95,Sy()),Adam:()=>sf.adam(.001,.9,.999,Sy()),Adamax:()=>sf.adamax(.002,.9,.999,Sy(),0),RMSProp:()=>sf.rmsprop(.001,.9,0,Sy()),SGD:()=>sf.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Rg(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Hu))throw new Rg("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Rg(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>Ax(e)))}else{const n=Ax(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Rg(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(Ax(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],my("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const a=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const a of t){let t=n.hasOwnProperty(a)?n[a]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};my("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,a,s;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===$x?-1!==["accuracy","acc"].indexOf(i)?a=Rx:-1!==["crossentropy","ce"].indexOf(i)&&(a=Mx):this.lossFunctions[e]===Cx?-1!==["accuracy","acc"].indexOf(i)?a=Lx:-1!==["crossentropy","ce"].indexOf(i)&&(a=Px):-1!==["accuracy","acc"].indexOf(i)?a=Fx:-1!==["crossentropy","ce"].indexOf(i)&&(a=zx),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),s=a,n=""+r}else{const e=Wx(i);s=e,n=""+Vx(i)}let t;my(n,(()=>{t=s})),r(e,n,t)}})(a[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const a=null==n.batchSize?32:n.batchSize;sw(a);const r=this.standardizeUserDataXY(e,t,!0,a);try{const e=r[0].concat(r[1]);this.makeTestFunction();const t=this.testFunction;return Pg(this.testLoop(t,e,a,n.verbose,n.steps))}finally{cw(r[0],e),cw(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const a=null!=(n=n||{}).batches,r=e.testFunction;let s=[];if(n.verbose>0)throw new Fg("Verbose mode is not implemented yet.");ae(!a||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,u=0;for(;!a||u<n.batches;){const t=await i.next();if(s=go((()=>{if(t.value){const{xs:n,ys:a}=nw(e,t.value),i=n.concat(a),l=go((()=>r(i)));if(yo(i),0===u)for(let e=0;e<l.length;++e)s.push(Gu(0));const c=i[0].shape[0];for(let e=0;e<l.length;++e){const t=l[e],n=s[e];s[e]=go((()=>_u(s[e],Fu(c,t)))),u>0&&yo(n)}yo(l),o+=c,++u}return s})),t.done){a&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<s.length;++e){const t=s[e];s[e]=Ru(s[e],o),yo(t)}return Pg(s)}(this,e,t)}checkNumSamples(e,t,n,a="steps"){let r;if(null!=n){if(r=null,null!=t)throw new Rg(`If ${a} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Rg(`Either the input data should have a defined shape, or ${a} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Rg("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),a=n?t:[t],r=this.retrieveSymbolicTensors(a),s=new $b;if(e instanceof ts&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Rg(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)s.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new Rg(`No value is provided for the model's input ${t.name}`);s.add(t,n)}const i=Ab(r,s);return n?i:i[0]}retrieveSymbolicTensors(e){const t=Mg(null,e.length);let n=e.length;for(const a of this.layers){const r=Array.isArray(a.output)?a.output:[a.output],s=r.map((e=>e.name));for(let a=0;a<e.length;++a){const i=s.indexOf(e[a]);if(-1!==i&&(t[a]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,a)=>{null==t&&n.push(e[a])})),new Rg(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return go((()=>{const a=this.checkNumSamples(e);if(n)throw new Fg("Verbose predictLoop() is not implemented yet.");const r=uw(a,t),s=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t)go((()=>{const n=r[t][0],a=r[t][1],s=iw(e,n,a),i=[];if(Array.isArray(s))for(let e=0;e<s.length;++e)i.push({key:this.inputs[e],value:s[e]});else i.push({key:this.inputs[0],value:s});const o=new $b(i);return Ab(this.outputs,o)})).forEach(((e,t)=>s[t].push(e)));return Pg(s.map((e=>Dl(e,0))))}))}predict(e,t={}){const n=lw(e);fw(n,this.inputNames,this.feedInputShapes,!1);try{const e=null==t.batchSize?32:t.batchSize;return sw(e),this.predictLoop(n,e)}finally{cw(n,e)}}predictOnBatch(e){fw(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,a){if(null==this.optimizer_)throw new Ag("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===Cx?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t){const n=Kg(e.map((e=>e.shape[0])));n.sort();const a=Kg(t.map((e=>e.shape[0])));if(a.sort(),n.length>1)throw new Rg(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(a.length>1)throw new Rg(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(n.length>0&&a.length>0&&!le(n,a))throw new Rg(`Input Tensors should have the same number of samples as target Tensors. Found ${n[0]} input sample(s) and ${a[0]} target sample(s).`)}(e=dw(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=dw(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const a=[Ix,$x,Tx];for(let r=0;r<e.length;++r){const s=e[r],i=t[r],o=n[r];if(null!=i){if(i===Tx&&1===s.shape[s.shape.length-1])throw new Rg(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==a.indexOf(i)){const e=s.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const a=e[n],r=t[n];if(null!=r&&a!==r)throw new Rg(`A target Tensor with shape ${s.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=a&&a>0&&e[0].shape[0]%a!=0)throw new Rg(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${a}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,a,r=!0,s){const[i,o]=this.standardizeUserDataXY(e,t,r,s);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=a){const e=Qx(a,this.outputNames);u=[];for(let t=0;t<e.length;++t)u.push(await ew(o[t],null,e[t]))}return[i,o,u]}testLoop(e,t,n,a=0,r){return go((()=>{const s=this.checkNumSamples(t,n,r,"steps"),i=[];if(a>0)throw new Fg("Verbose mode is not implemented yet.");if(null!=r)throw new Fg("steps mode in testLoop() is not implemented yet");{const a=uw(s,n),r=Cp(Iy(0,s));for(let n=0;n<a.length;++n){const s=a[n][0],o=a[n][1],u=$y(r,s,o-s),l=ow(t,u),c=e(l);if(0===n)for(let e=0;e<c.length;++e)i.push(Gu(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=_u(i[e],Fu(o-s,t))}}for(let e=0;e<i.length;++e)i[e]=Ru(i[e],s)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const a=e[n];let r=a;zg(e,a)>1&&(r+=`_${zg(e.slice(0,n),a)}`),t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),s=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new $b(e),o=Ab(this.outputs,i,{training:!0});let u;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(a[e],o[e]);null!=r[e]&&(n=tw(n,r[e]));const s=mh(n);t.push(s),u=0===e?n:_u(u,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=mh(t(a[r],o[r]))}bo(n),s.push(n)}return u=mh(u),this.calculateLosses().forEach((e=>{u=_u(u,e)})),u}),!0,i)].concat(s)}}makeTestFunction(){this.testFunction=e=>go((()=>{const t=[];let n;const a=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=[];for(let e=0;e<this.inputs.length;++e)s.push({key:this.inputs[e],value:a[e]});const i=new $b(s),o=Ab(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const a=this.lossFunctions[e],s=mh(a(r[e],o[e]));n=0===e?s:_u(n,s),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],a=this.metricsTensors[e][1],s=mh(n(r[a],o[a]));t.push(s)}return t}))}async fit(e,t,n={}){return async function(e,t,n,a={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,s,i,o,u,l,c,h,p;e.isTraining=!0;try{const d=null==a.batchSize?32:a.batchSize;sw(d);const f=!1,m=await e.standardizeUserData(t,n,a.sampleWeight,a.classWeight,f,d);r=m[0],s=m[1],p=m[2];let g,y=!1;if(null!=a.validationData&&a.validationData.length>0){if(y=!0,2!==a.validationData.length)throw 3===a.validationData.length?new Fg("validationData including sample weights is not supported yet."):new Rg(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${a.validationData} is invalid.`);u=a.validationData[0],l=a.validationData[1];const t=!0,n=await e.standardizeUserData(u,l,null,null,t,d);c=n[0],h=n[1],g=c.concat(h)}else if(null!=a.validationSplit&&a.validationSplit>0&&a.validationSplit<1){y=!0;const e=Math.floor(r[0].shape[0]*(1-a.validationSplit)),t=r[0].shape[0];c=iw(r,e,t),i=r,r=iw(r,0,e),h=iw(s,e,t),o=s,s=iw(s,0,e),g=c.concat(h)}else null!=a.validationSteps&&(y=!0);const b=r.concat(s).concat(p);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),w=e.getDedupedMetricsNames();let k,v;y?(e.makeTestFunction(),k=e.testFunction,v=w.slice().concat(w.map((e=>"val_"+e)))):(k=null,g=[],v=w.slice());const I=bx(a.callbacks,a.yieldEvery),N=await async function(e,t,n,a,r,s,i,o,u,l,c,h,p,d){null==r&&(r=32),null==s&&(s=1),null==c&&(c=!0),null==p&&(p=0);let f=!1;null!=u&&null!=l&&(f=!0);const m=e.checkNumSamples(n,r,d,"steps_per_epoch");let g;null!=m&&(g=Iy(0,m)),null==i&&(i=1);const{callbackList:y,history:b}=wx(o,i,s,p,m,d,r,f,h);y.setModel(e),e.history=b,await y.onTrainBegin(),e.stopTraining_=!1;for(let i=p;i<s;++i){await y.onEpochBegin(i);const s={};{if("batch"===c)throw new Fg("batch shuffling is not implemneted yet");c&&X(g);const i=Cp(g),o=uw(m,r);for(let c=0;c<o.length;++c){const h={};if(await y.onBatchBegin(c,h),go((()=>{const p=o[c][0],d=o[c][1],m=$y(i,p,d-p);h.batch=c,h.size=d-p;const g=ow(n,m),y=t(g);for(let e=0;e<a.length;++e){const t=a[e],n=y[e];h[t]=n,bo(n)}if(c===o.length-1&&f){const t=e.testLoop(u,l,r);for(let e=0;e<a.length;++e){const n=a[e],r=t[e];bo(r),s["val_"+n]=r}}})),await y.onBatchEnd(c,h),hx(h),e.stopTraining_)break}i.dispose()}if(await y.onEpochEnd(i,s),e.stopTraining_)break}return await y.onTrainEnd(),await e.history.syncData(),e.history}(e,x,b,w,d,a.epochs,a.verbose,I,k,g,a.shuffle,v,a.initialEpoch,null);return N}finally{e.isTraining=!1,cw(r,t),cw(s,n),cw(i,t),cw(o,n),cw(c,u),cw(h,l),null!=p&&yo(p)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const a=null!=n.batchesPerEpoch;if(ae(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),ae(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),ae(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),ae(!a||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),ae(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let s,i;if(r)if(rw(n.validationData))ae(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Fg("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);s=e.xs,i=e.ys}const o=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let l;l=r?u.slice().concat(u.map((e=>"val_"+e))):u.slice();const c=bx(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=wx(c,h,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,r,l);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const l={};await p.onEpochBegin(f);let c=0,h=0;for(a||(m=await t.iterator());!a||c<n.batchesPerEpoch;){const t=await m.next();if(a&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:a,ys:r}=nw(e,t.value),s={};s.batch=h,s.size=a[0].shape[0],await p.onBatchBegin(h,s);const i=[];if(null!=n.classWeight){const t=Qx(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await ew(r[e],null,t[e]))}const l=a.concat(r).concat(i),d=o(l);yo(l);for(let e=0;e<u.length;++e){const t=u[e],n=d[e];s[t]=n,bo(n)}await p.onBatchEnd(h,s),hx(s),h++,c++}if(a?c>=n.batchesPerEpoch:t.done){if(r){let t;t=rw(n.validationData)?Bg(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Bg(e.evaluate(s,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)l[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,l),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),a=n[0],r=n[1],s=this.makeTrainFunction()(a.concat(r)),i=[];for(const e of s){const t=await e.data();i.push(t[0])}return yo(s),cw(n[0],e),cw(n[1],t),Pg(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,a=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<a.length;++e)n&&!a[e].trainable||t.push({name:a[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=fo().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-fo().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Wg(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Wg(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const a of t){if("string"!=typeof n[a])throw new Error("Serialization of non-string loss is not supported.");e[a]=Wg(n[a])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Wg(Vx(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Wg(Vx(e))));{const e={};for(const t in this.metrics)e[t]=Wg(Vx(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=kx(Xx(e.optimizer_config));let n,a;if("string"==typeof e.loss)n=Vg(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>Vg(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Vg(e.loss[t])}if(Array.isArray(e.metrics))a=e.metrics.map((e=>Vg(e)));else if(null!=e.metrics){a={};for(const t in e.metrics)a[t]=Vg(e.metrics[t])}this.compile({loss:n,metrics:a,optimizer:t})}async save(e,t){if("string"==typeof e){const t=ni(e);if(0===t.length)throw new Rg(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Rg(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Rg("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Bs(this.getNamedWeights(t)),a={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${Zx}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){a.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await Bs(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=Hs([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Ux(this.userDefinedMetadata,this.name,e),a.userDefinedMetadata=this.userDefinedMetadata}return a.weightData=n.data,a.weightSpecs=n.specs,e.save(a)}setUserDefinedMetadata(e){Ux(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}mw.className="Model",fu(mw);class gw extends mw{}async function yw(e,t){"modelTopology"in e||(e={modelTopology:e});let n=e.modelTopology;null!=n.model_config&&(n=n.model_config);const a=kx(Xx(n),t);if(null!=e.weightsManifest){const t=await Hi(e.weightsManifest,e.pathPrefix,a.weights.map((e=>e.originalName))),n={};for(const e of a.weights)n[e.originalName]=t[e.originalName];a.loadWeights(n),yo(t)}return a}gw.className="Functional",fu(gw);class bw extends mw{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:ry("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Rg(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof bw||e instanceof mw;let n;if(t){if(n=e,1!==n.outputs.length)throw new Rg("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Rg("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Rg("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=Cb({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Rg(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Rg("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Sb(this.outputs[0])}this.inboundNodes=[],new vb({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Mg(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(db(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new mw({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Ag("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Ag("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Ag("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Ag("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},a=!1){let r,s={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Rg("Legacy serialization format not supported yet.");r=t}else ae(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,s=t;const i=new e(s);if(!(i instanceof bw))throw new Fg(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=kx(e,void 0,a);a&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new Rg("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Rg("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function xw(e){return new mw(e)}function ww(e){return new bw(e)}function kw(e,t){return null==t&&(t={}),async function(e,t){if(null==t&&(t={}),"string"==typeof e){const n=ai(e,t);if(0===n.length)n.push(Zi(e,t));else if(n.length>1)throw new Rg(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){if(null==n&&(n={}),null==e.load)throw new Rg("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const a=await e.load();let r=a.modelTopology;null!=r.model_config&&(r=r.model_config);const s=null==n.strict||n.strict,i=null!=a.weightData&&null!=a.weightSpecs&&s,o=kx(Xx(r),void 0,i),u=a.trainingConfig;if(null!=u&&o.loadTrainingConfig(u),null!=a.userDefinedMetadata&&o.setUserDefinedMetadata(a.userDefinedMetadata),null!=a.weightData){if(null==a.weightSpecs)throw new Rg("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=Ws(e,t),a={},r=[];return t.forEach((e=>{"optimizer"===e.group?r.push({name:e.name,tensor:n[e.name]}):a[e.name]=n[e.name]})),{modelWeights:a,optimizerWeights:r}}(a.weightData,a.weightSpecs);o.loadWeights(e,s),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),yo(e),yo(t.map((e=>e.tensor)))}return o}(e,0,t)}(e,t)}function vw(e){return Cb(e)}function Iw(e,t){xx.registerCallbackConstructor(e,t)}bw.className="Sequential",fu(bw);class Nw extends pu{getConfig(){return{}}}class Sw extends Nw{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Fg(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return wc(e)}(e,t)}}Sw.className="elu",fu(Sw);class Tw extends Nw{apply(e){return sp(e)}}Tw.className="selu",fu(Tw);class Cw extends Nw{apply(e){return Yh(e)}}Cw.className="relu",fu(Cw);class $w extends Nw{apply(e){return go((()=>xh(6,Yh(e))))}}$w.className="relu6",fu($w);class Ew extends Nw{apply(e){return e}}Ew.className="linear",fu(Ew);class _w extends Nw{apply(e){return Ol(e)}}_w.className="sigmoid",fu(_w);class Aw extends Nw{apply(e){return function(e){return go((()=>{const t=_u(.5,Fu(.2,e));return Kl(t,0,1)}))}(e)}}Aw.className="hardSigmoid",fu(Aw);class Rw extends Nw{apply(e){return th(e)}}Rw.className="softplus",fu(Rw);class Fw extends Nw{apply(e){return function(e){return go((()=>Ru(e,_u(Ju(e),1))))}(e)}}Fw.className="softsign",fu(Fw);class Dw extends Nw{apply(e){return Ll(e)}}Dw.className="tanh",fu(Dw);class Ow extends Nw{apply(e,t=-1){return mp(e,t)}}Ow.className="softmax",fu(Ow);class Mw extends Nw{apply(e,t=-1){return ah(e,t)}}Mw.className="logSoftmax",fu(Mw);class Lw extends Nw{apply(e,t=1){return go((()=>Fu(Ol(Fu(e,t)),e)))}}Lw.className="swish",fu(Lw);class zw extends Nw{apply(e){return go((()=>Fu(e,Ll(th(e)))))}}function Pw(e){return e.getClassName()}function Bw(e,t={}){return jg(e,du.getMap().classNameMap,t,"activation")}function Ww(e){if(null==e){return Bw({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},Bw(t)}return e instanceof Nw?e:Bw(e)}function Vw(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}zw.className="mish",fu(zw);class Uw extends pu{}class Gw extends Uw{constructor(e){super(),Vw(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return go((()=>{let t=gh([1]);return this.hasL1&&(t=_u(t,Rc(Fu(this.l1,Ju(e))))),this.hasL2&&(t=_u(t,Rc(Fu(this.l2,Ly(e))))),Al(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Gw.className="L1L2",fu(Gw);const Hw={l1l2:"L1L2"};function jw(e){return Gg(e)}function qw(e,t={}){return jg(e,du.getMap().classNameMap,t,"regularizer")}function Kw(e){return null==e?null:"string"==typeof e?qw({className:e in Hw?Hw[e]:e,config:{}}):e instanceof Uw?e:qw(e)}class Xw extends Nb{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=pb(e);let n=Yh(e);return null!=this.maxValue&&(n=Kl(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}Xw.className="ReLU",fu(Xw);class Yw extends Nb{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=pb(e);return Kc(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Yw.className="LeakyReLU",fu(Yw);class Zw extends Nb{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=lb(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Kw(e.alphaRegularizer),this.alphaConstraint=Gb(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Rg(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=db(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new xb({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=pb(e),Oh(e,this.alpha.read())}getConfig(){const e={alphaInitializer:ub(this.alphaInitializer),alphaRegularizer:jw(this.alphaRegularizer),alphaConstraint:Vb(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Zw.className="PReLU",fu(Zw);class Jw extends Nb{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Fg(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=pb(e);return wc(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Jw.className="ELU",fu(Jw);class Qw extends Nb{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=pb(e);return Fu(n,Mi(Uc(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Qw.className="ThresholdedReLU",fu(Qw);class ek extends Nb{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Ow).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=pb(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function tk(e,t,n){if("number"==typeof e)return Mg(e,t);if(e.length!==t)throw new Rg(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const s=e[r];if((a=s)!==parseInt(a.toString(),10))throw new Rg(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${s}`)}return e;var a}function nk(e,t,n,a,r=1){if(null==e)return e;let s;return s="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((s+a-1)/a)}function ak(e,t,n,a){if(null==e)return null;if("valid"===a)e=e*t+vy([n-t,0]);else{if("same"!==a)throw new Rg(`Unsupport padding mode: ${a}.`);e*=t}return e}function rk(e,t){return go((()=>(hy(t),"channelsFirst"===t?Ro(e,[0,2,3,1]):e)))}function sk(e,t){return go((()=>(hy(t),"channelsFirst"===t?Ro(e,[0,2,3,4,1]):e)))}function ik(e,t,n,a=[1,1],r="valid",s,i,o=null){return go((()=>{if(null==s&&(s="channelsLast"),hy(s),3!==e.rank&&4!==e.rank)throw new Rg(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Rg(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let u=rk(e,s);if("causal"===r)throw new Fg("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=td({x:u,filter:t,strides:a,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===s&&(u=Ro(u,[0,3,1,2])),u}))}ek.className="Softmax",fu(ek);class ok extends Nb{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",ok.verifyArgs(t),this.rank=e,Jg(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Fg(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=tk(t.kernelSize,e,"kernelSize"),this.strides=tk(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,py(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,hy(this.dataFormat),this.activation=Ww(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=lb(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Gb(t.biasConstraint),this.biasRegularizer=Kw(t.biasRegularizer),this.activityRegularizer=Kw(t.activityRegularizer),this.dilationRate=tk(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Rg(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Rg(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Rg(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Lg("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Zg(e.kernelSize,"number",1,3))throw new Rg(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Pw(this.activation),useBias:this.useBias,biasInitializer:ub(this.biasInitializer),biasRegularizer:jw(this.biasRegularizer),activityRegularizer:jw(this.activityRegularizer),biasConstraint:Vb(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class uk extends ok{constructor(e,t){super(e,t),this.kernel=null,uk.verifyArgs(t),this.filters=t.filters,Jg(this.filters,"filters"),this.kernelInitializer=lb(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Gb(t.kernelConstraint),this.kernelRegularizer=Kw(t.kernelRegularizer)}build(e){e=db(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Rg(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],a=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return go((()=>{let t;e=pb(e);const n=null==this.bias?null:this.bias.read(),a=ey(this.activation.getClassName());if(null!=a&&2===this.rank)t=ik(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,a);else{if(1===this.rank)t=function(e,t,n,a=1,r="valid",s,i=1){return go((()=>{if(null==s&&(s="channelsLast"),hy(s),3!==e.shape.length)throw new Rg(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Rg(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Rg(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===s&&(e=Ro(e,[0,2,1])),"causal"===r)throw new Fg("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=ec(e,t,a,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=Py(o,n)),o}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=ik(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Fg("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,a=[1,1,1],r="valid",s,i){return go((()=>{if(null==s&&(s="channelsLast"),hy(s),4!==e.rank&&5!==e.rank)throw new Rg(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Rg(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=sk(e,s);if("causal"===r)throw new Fg("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=ac(o,t,a,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=Py(o,n)),"channelsFirst"===s&&(o=Ro(o,[0,4,1,2,3])),o}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=db(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const a=nk(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(a)}let a=[e[0]];return"channelsLast"===this.dataFormat?(a=a.concat(t),a.push(this.filters)):(a.push(this.filters),a=a.concat(t)),a}getConfig(){const e={filters:this.filters,kernelInitializer:ub(this.kernelInitializer),kernelRegularizer:jw(this.kernelRegularizer),kernelConstraint:Vb(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Rg(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class lk extends uk{constructor(e){super(2,e),lk.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Zg(e.kernelSize,"number",1,2))throw new Rg(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}lk.className="Conv2D",fu(lk);class ck extends uk{constructor(e){super(3,e),ck.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Rg(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}ck.className="Conv3D",fu(ck);class hk extends lk{constructor(e){if(super(e),this.inputSpec=[new xb({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Rg(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=db(e)).length)throw new Rg("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Rg("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],a=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new xb({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return go((()=>{let t=pb(e);if(4!==t.shape.length)throw new Rg(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,a=n[0];let r,s;"channelsFirst"===this.dataFormat?(r=2,s=3):(r=1,s=2);const i=n[r],o=n[s],u=this.kernelSize[0],l=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[a,ak(i,c,u,this.padding),ak(o,h,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Ro(t,[0,2,3,1]));let d=nc(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Ro(d,[0,3,1,2])),null!=this.bias&&(d=Py(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=db(e)).slice();let n,a,r;"channelsFirst"===this.dataFormat?(n=1,a=2,r=3):(n=3,a=1,r=2);const s=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return t[n]=this.filters,t[a]=ak(t[a],o,s,this.padding),t[r]=ak(t[r],u,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}hk.className="Conv2DTranspose",fu(hk);class pk extends ck{constructor(e){if(super(e),this.inputSpec=[new xb({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new Rg(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=db(e)).length)throw new Rg("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Rg("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],a=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new xb({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return go((()=>{let t=pb(e);if(5!==t.shape.length)throw new Rg(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,a=n[0];let r,s,i;"channelsFirst"===this.dataFormat?(i=2,r=3,s=4):(i=1,r=2,s=3);const o=n[i],u=n[r],l=n[s],c=this.kernelSize[0],h=this.kernelSize[1],p=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[a,ak(o,d,c,this.padding),ak(u,f,h,this.padding),ak(l,m,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Ro(t,[0,2,3,4,1]));let y=sc(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=Ro(y,[0,4,1,2,3])),null!==this.bias&&(y=Py(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=db(e)).slice();let n,a,r,s;"channelsFirst"===this.dataFormat?(n=1,a=2,r=3,s=4):(n=4,a=1,r=2,s=3);const i=this.kernelSize[0],o=this.kernelSize[1],u=this.kernelSize[2],l=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[a]=ak(t[a],l,i,this.padding),t[r]=ak(t[r],c,o,this.padding),t[s]=ak(t[s],h,u,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}pk.className="Conv3DTranspose",fu(pk);class dk extends uk{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Rg("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Rg("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Rg(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=lb(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Kw(t.depthwiseRegularizer),this.depthwiseConstraint=Gb(t.depthwiseConstraint),this.pointwiseInitializer=lb(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Kw(t.pointwiseRegularizer),this.pointwiseConstraint=Gb(t.pointwiseConstraint)}build(e){if((e=db(e)).length<this.rank+2)throw new Rg(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Rg(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],a=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const s=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",a,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,s,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,s,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,s,this.biasConstraint):this.bias=null,this.inputSpec=[new xb({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return go((()=>{let t;if(e=pb(e),1===this.rank)throw new Fg("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Ro(e,[0,2,3,1])),t=ip(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Py(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Ro(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=ub(this.depthwiseInitializer),e.pointwiseInitializer=ub(this.pointwiseInitializer),e.depthwiseRegularizer=jw(this.depthwiseRegularizer),e.pointwiseRegularizer=jw(this.pointwiseRegularizer),e.depthwiseConstraint=Vb(this.depthwiseConstraint),e.pointwiseConstraint=Vb(this.pointwiseConstraint),e}}dk.className="SeparableConv";class fk extends dk{constructor(e){super(2,e)}}fk.className="SeparableConv2D",fu(fk);class mk extends uk{constructor(e){super(1,e),mk.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Zg(e.kernelSize,"number",1,1))throw new Rg(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}mk.className="Conv1D",fu(mk);class gk extends Nb{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return go((()=>{if(e=pb(e),"channelsLast"===this.dataFormat){const t=_y(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return _y(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=_y(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return _y(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}gk.className="Cropping2D",fu(gk);class yk extends Nb{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,hy(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,Yg(iy,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return go((()=>{let t=pb(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Ro(t,[0,2,3,1]);const e=this.size[0]*n[2],a=this.size[1]*n[3],r="nearest"===this.interpolation?ef.resizeNearestNeighbor(t,[e,a]):ef.resizeBilinear(t,[e,a]);return Ro(r,[0,3,1,2])}{const e=this.size[0]*n[1],a=this.size[1]*n[2];return"nearest"===this.interpolation?ef.resizeNearestNeighbor(t,[e,a]):ef.resizeBilinear(t,[e,a])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}yk.className="UpSampling2D",fu(yk);class bk extends ok{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=lb(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Gb(e.depthwiseConstraint),this.depthwiseRegularizer=Kw(e.depthwiseRegularizer)}build(e){if((e=db(e)).length<4)throw new Rg(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Rg(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],a=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",a,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return go((()=>{let t=function(e,t,n=[1,1],a="valid",r,s){return go((()=>{null==r&&(r="channelsLast"),hy(r);let i=rk(e,r);if(4!==e.rank)throw new Rg(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Rg(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=pc(i,t,n,"same"===a?"same":"valid","NHWC",s),"channelsFirst"===r&&(i=Ro(i,[0,3,1,2])),i}))}(e=pb(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Py(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=db(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],a="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=nk(t,this.kernelSize[0],this.padding,this.strides[0]),s=nk(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],a,r,s]:[e[0],r,s,a]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=ub(this.depthwiseInitializer),e.depthwiseRegularizer=jw(this.depthwiseRegularizer),e.depthwiseConstraint=Vb(this.depthwiseRegularizer),e}}function xk(e,t,n,a){if(Array.isArray(e)){if(null!=t||null!=n)throw new Rg("When inputs is an array, neither initialState or constants should be provided");null!=a&&(n=e.slice(e.length-a,e.length),e=e.slice(0,e.length-a)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function wk(e,t,n,a=!1,r,s,i=!1,o=!1){return go((()=>{const u=t.shape.length;if(u<3)throw new Rg(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(Iy(2,u));if(t=Ro(t,l),null!=s)throw new Fg("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=Mi(Mi(r,"bool"),"float32")).rank===u-1&&(r=Lc(r,-1)),r=Ro(r,l)),a&&(t=Jh(t,0),null!=r&&(r=Jh(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=Mp(t);let m,g;null!=r&&(m=Mp(r));for(let t=0;t<d;++t){const n=f[t],a=go((()=>e(n,p)));if(null==r)h=a[0],p=a[1];else{const e=go((()=>{const e=m[t],n=Yu(Th(e),e);return{output:_u(Fu(a[0],e),Fu(p[0],n)),newStates:p.map(((t,r)=>_u(Fu(a[1][r],e),Fu(t,n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}return o&&(g=Ip(c,1)),[h,g,p]}))}bk.className="DepthwiseConv2D",fu(bk);class kk extends Nb{constructor(e){let t;if(super(e),null==e.cell)throw new Rg("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Ek({cells:e.cell}):e.cell,null==t.stateSize)throw new Rg("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new xb({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Iy(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){cb(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let a;if(a=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const a of t)n.push([e[0],a]);return[a].concat(n)}return a}computeMask(e,t){return go((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Fg("Constants support is not implemented in RNN yet.");cb(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new xb({shape:[t,null,...n]});const a=[e[0]].concat(e.slice(2));let r;if(this.cell.build(a),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!le(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new Rg(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new xb({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){go((()=>{if(!this.stateful)throw new _g("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Rg("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>gh([n,e]))):this.states_=[gh([n,this.cell.stateSize])];else if(null==e)yo(this.states_),null!=this.keptStates&&(yo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>gh([n,e]))):this.states_[0]=gh([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Rg(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):yo(this.states_);for(let t=0;t<this.states_.length;++t){const a=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,s=[n,r];if(!le(a.shape,s))throw new Rg(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${a.shape}`);this.states_[t]=a}}this.states_=this.states_.map((e=>bo(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,a=null==t?null:t.constants;null==t&&(t={});const r=xk(e,n,a,this.numConstants);e=r.inputs,n=r.initialState,a=r.constants;let s=[],i=[];if(null!=n){t.initialState=n,s=s.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new xb({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=a&&(t.constants=a,s=s.concat(a),this.numConstants=a.length),s[0]instanceof wb){const n=[e].concat(s),a=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=a;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return go((()=>{const n=null==t?null:t.mask,a=null==t?null:t.training;let r=null==t?null:t.initialState;e=pb(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const s=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==s)throw new Rg(`RNN Layer has ${s} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:a},o=wk(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,a);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h}))}getInitialState(e){return go((()=>{let t=gh(e.shape);return t=Rc(t,[1,2]),t=Cy(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?Fy(t,[1,e]):t)):this.cell.stateSize>1?[Fy(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===kk.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const a=kx(t.cell,n);return new e(Object.assign(t,{cell:a}))}}kk.className="RNN",fu(kk);class vk extends Nb{}class Ik extends vk{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Jg(this.units,"units"),this.activation=Ww(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=lb(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=lb(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=lb(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Kw(e.kernelRegularizer),this.recurrentRegularizer=Kw(e.recurrentRegularizer),this.biasRegularizer=Kw(e.biasRegularizer),this.kernelConstraint=Gb(e.kernelConstraint),this.recurrentConstraint=Gb(e.recurrentConstraint),this.biasConstraint=Gb(e.biasConstraint),this.dropout=ky([1,vy([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=ky([1,vy([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=db(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return go((()=>{if(2!==e.length)throw new Rg(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const a=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=_k({ones:()=>Th(e),rate:this.dropout,training:a,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=_k({ones:()=>Th(n),rate:this.recurrentDropout,training:a,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,i=this.recurrentDropoutMask;r=Oy(null!=s?Fu(e,s):e,this.kernel.read()),null!=this.bias&&(r=Py(r,this.bias.read())),null!=i&&(n=Fu(n,i));let o=_u(r,Oy(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Pw(this.activation),useBias:this.useBias,kernelInitializer:ub(this.kernelInitializer),recurrentInitializer:ub(this.recurrentInitializer),biasInitializer:ub(this.biasInitializer),kernelRegularizer:jw(this.kernelRegularizer),recurrentRegularizer:jw(this.recurrentRegularizer),biasRegularizer:jw(this.biasRegularizer),activityRegularizer:jw(this.activityRegularizer),kernelConstraint:Vb(this.kernelConstraint),recurrentConstraint:Vb(this.recurrentConstraint),biasConstraint:Vb(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Ik.className="SimpleRNNCell",fu(Ik);class Nk extends kk{constructor(e){e.cell=new Ik(e),super(e)}call(e,t){return go((()=>{null!=this.cell.dropoutMask&&(yo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(yo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,a=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:a,initialState:r})}))}static fromConfig(e,t){return new e(t)}}Nk.className="SimpleRNN",fu(Nk);class Sk extends vk{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Rg("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Jg(this.units,"units"),this.activation=Ww(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ww(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=lb(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=lb(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=lb(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Kw(e.kernelRegularizer),this.recurrentRegularizer=Kw(e.recurrentRegularizer),this.biasRegularizer=Kw(e.biasRegularizer),this.kernelConstraint=Gb(e.kernelConstraint),this.recurrentConstraint=Gb(e.recurrentConstraint),this.biasConstraint=Gb(e.biasConstraint),this.dropout=ky([1,vy([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=ky([1,vy([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=db(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return go((()=>{if(2!==e.length)throw new Rg(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let a=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=_k({ones:()=>Th(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=_k({ones:()=>Th(a),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,s=this.recurrentDropoutMask;let i,o,u;0<this.dropout&&this.dropout<1&&(e=Fu(e,r[0]));let l=Oy(e,this.kernel.read());this.useBias&&(l=Py(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(a=Fu(a,s[0]));const c=this.recurrentKernel.read(),[h,p]=xp(c,[2*this.units,this.units],c.rank-1),d=Oy(a,h),[f,m,g]=xp(l,3,l.rank-1),[y,b]=xp(d,2,d.rank-1);i=this.recurrentActivation.apply(_u(f,y)),o=this.recurrentActivation.apply(_u(m,b));const x=Oy(Fu(o,a),p);u=this.activation.apply(_u(g,x));const w=_u(Fu(i,a),Fu(_u(1,_o(i)),u));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Pw(this.activation),recurrentActivation:Pw(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ub(this.kernelInitializer),recurrentInitializer:ub(this.recurrentInitializer),biasInitializer:ub(this.biasInitializer),kernelRegularizer:jw(this.kernelRegularizer),recurrentRegularizer:jw(this.recurrentRegularizer),biasRegularizer:jw(this.biasRegularizer),activityRegularizer:jw(this.activityRegularizer),kernelConstraint:Vb(this.kernelConstraint),recurrentConstraint:Vb(this.recurrentConstraint),biasConstraint:Vb(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Sk.className="GRUCell",fu(Sk);class Tk extends kk{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Sk(e),super(e)}call(e,t){return go((()=>{null!=this.cell.dropoutMask&&(yo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(yo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,a=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:a,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Tk.className="GRU",fu(Tk);class Ck extends vk{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Jg(this.units,"units"),this.activation=Ww(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ww(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=lb(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=lb(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=lb(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Kw(e.kernelRegularizer),this.recurrentRegularizer=Kw(e.recurrentRegularizer),this.biasRegularizer=Kw(e.biasRegularizer),this.kernelConstraint=Gb(e.kernelConstraint),this.recurrentConstraint=Gb(e.recurrentConstraint),this.biasConstraint=Gb(e.biasConstraint),this.dropout=ky([1,vy([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=ky([1,vy([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=db(e))[e.length-1];let a;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;a=new((t=class extends Gy{apply(t,a){const r=e.apply([n]),s=(new jy).apply([n]),i=e.apply([2*n]);return Ry(Ry(r,s),i)}}).className="CustomInit",t)}else a=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,a,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return go((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new Rg(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let a=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=_k({ones:()=>Th(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=_k({ones:()=>Th(a),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,i=this.recurrentDropoutMask;let o,u,l,c;0<this.dropout&&this.dropout<1&&(e=Fu(e,s[0]));let h=Oy(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(a=Fu(a,i[0])),h=_u(h,Oy(a,this.recurrentKernel.read())),this.useBias&&(h=Py(h,this.bias.read()));const[p,d,f,m]=xp(h,4,h.rank-1);o=this.recurrentActivation.apply(p),u=this.recurrentActivation.apply(d),l=_u(Fu(u,r),Fu(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Fu(c,this.activation.apply(l));return[g,g,l]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Pw(this.activation),recurrentActivation:Pw(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ub(this.kernelInitializer),recurrentInitializer:ub(this.recurrentInitializer),biasInitializer:ub(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:jw(this.kernelRegularizer),recurrentRegularizer:jw(this.recurrentRegularizer),biasRegularizer:jw(this.biasRegularizer),activityRegularizer:jw(this.activityRegularizer),kernelConstraint:Vb(this.kernelConstraint),recurrentConstraint:Vb(this.recurrentConstraint),biasConstraint:Vb(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Ck.className="LSTMCell",fu(Ck);class $k extends kk{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Ck(e),super(e)}call(e,t){return go((()=>{null!=this.cell.dropoutMask&&(yo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(yo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,a=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:a,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}$k.className="LSTM",fu($k);class Ek extends vk{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return go((()=>{let n=e.slice(1);const a=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?a.push(n.splice(0,e.stateSize.length)):a.push(n.splice(0,1));a.reverse();const r=[];let s;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=a[i],s=0===i?[e[0]].concat(n):[s[0]].concat(n),s=o.call(s,t),r.push(s.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[s[0]].concat(n)}))}build(e){let t;cb(e)&&(e=e[0]),this.cells.forEach(((n,a)=>{my(`RNNCell_${a}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const a=[];for(const e of t.cells)a.push(kx(e,n));return new e({cells:a})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return yb(e)}setWeights(e){const t=[];for(const n of this.cells){const a=n.weights.length,r=e.splice(a);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}bb(t)}}function _k(e){const{ones:t,rate:n,training:a=!1,count:r=1,dropoutFunc:s}=e,i=()=>null!=s?s(t(),n):By(t(),n),o=()=>Wy(i,t,a);return!r||r<=1?bo(o().clone()):Array(r).fill(void 0).map(o).map((e=>bo(e.clone())))}Ek.className="StackedRNNCells",fu(Ek);class Ak extends kk{constructor(e){if(e.unroll)throw new Fg("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Fg("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new xb({ndim:5})]}call(e,t){return go((()=>{if(null!=this.cell.dropoutMask&&(yo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(yo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Rg("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,a=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:a,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return go((()=>{const{stateSize:t}=this.cell,n=e.shape,a=this.computeSingleOutputShape(n),r=gh([a[0],...a.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){go((()=>{if(!this.stateful)throw new _g("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,a=this.computeSingleOutputShape(n),r=[a[0],...a.slice(2)];if(null==n[0])throw new Rg("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>gh(r))):this.states_=[gh(r)];else if(null==e)yo(this.states_),null!=this.keptStates&&(yo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>gh(r))):this.states_[0]=gh(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Rg(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):yo(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],a=r;if(!le(n.shape,a))throw new Rg(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>bo(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:a,padding:r,strides:s,dilationRate:i}=this.cell,o="channelsFirst"===t,u=e[o?3:2],l=e[o?4:3],c=nk(u,a[0],r,s[0],i[0]),h=nk(l,a[1],r,s[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Ak.className="ConvRNN2D";class Rk extends Ck{constructor(e){const{filters:t,kernelSize:n,strides:a,padding:r,dataFormat:s,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,Jg(this.filters,"filters"),this.kernelSize=tk(n,2,"kernelSize"),this.kernelSize.forEach((e=>Jg(e,"kernelSize"))),this.strides=tk(a||1,2,"strides"),this.strides.forEach((e=>Jg(e,"strides"))),this.padding=r||"valid",py(this.padding),this.dataFormat=s||"channelsLast",hy(this.dataFormat),this.dilationRate=tk(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>Jg(e,"dilationRate")))}build(e){var t;e=db(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Rg(`The channel dimension of the input should be defined. Found ${e[n]}`);const a=e[n],r=this.kernelSize.concat([a,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const s=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",s,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,a=this.filters;e=new((t=class extends Gy{apply(e,t){return Ay([n.apply([a]),yh([a]),n.apply([2*a])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return go((()=>{if(3!==e.length)throw new Rg(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,a=e[0],r=e[1],s=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=_k({ones:()=>Th(a),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?Fu(t[n],e):e;let u=o(a,i,0),l=o(a,i,1),c=o(a,i,2),h=o(a,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=_k({ones:()=>Th(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=xp(this.kernel.read(),4,3),[k,v,I,N]=this.useBias?xp(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,y,k,this.padding),l=this.inputConv(l,b,v,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[S,T,C,$]=xp(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,S),f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,$);const E=this.recurrentActivation.apply(_u(u,d)),_=this.recurrentActivation.apply(_u(l,f)),A=_u(Fu(_,s),Fu(E,this.activation.apply(_u(c,m)))),R=Fu(this.recurrentActivation.apply(_u(h,g)),this.activation.apply(A));return[R,R,A]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(a=Object.getOwnPropertySymbols(e);r<a.length;r++)t.indexOf(a[r])<0&&Object.prototype.propertyIsEnumerable.call(e,a[r])&&(n[a[r]]=e[a[r]])}return n}(e,["units"]),a={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,a)}inputConv(e,t,n,a){const r=Ql(e,t,this.strides,a||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Py(r,n,this.dataFormat):r}recurrentConv(e,t){return Ql(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Rk.className="ConvLSTM2DCell",fu(Rk);class Fk extends Ak{constructor(e){const t=new Rk(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Fk.className="ConvLSTM2D",fu(Fk);class Dk extends Nb{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return go((()=>{this.invokeCallHook(e,t);const n=pb(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,a=this.getNoiseShape(n);return Wy((()=>By(n,this.rate,a,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Dk.className="Dropout",fu(Dk);class Ok extends Dk{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}Ok.className="SpatialDropout1D",fu(Ok);class Mk extends Nb{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Jg(this.units,"units"),this.activation=Ww(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=lb(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=lb(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Gb(e.kernelConstraint),this.biasConstraint=Gb(e.biasConstraint),this.kernelRegularizer=Kw(e.kernelRegularizer),this.biasRegularizer=Kw(e.biasRegularizer),this.activityRegularizer=Kw(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=db(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=db(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return go((()=>{this.invokeCallHook(e,t);const n=pb(e),a=ey(this.activation.getClassName());let r;return null!=a?r=Oy(n,this.kernel.read(),a,this.bias?this.bias.read():null):(r=Oy(n,this.kernel.read()),null!=this.bias&&(r=Py(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:Pw(this.activation),useBias:this.useBias,kernelInitializer:ub(this.kernelInitializer),biasInitializer:ub(this.biasInitializer),kernelRegularizer:jw(this.kernelRegularizer),biasRegularizer:jw(this.biasRegularizer),activityRegularizer:jw(this.activityRegularizer),kernelConstraint:Vb(this.kernelConstraint),biasConstraint:Vb(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Mk.className="Dense",fu(Mk);class Lk extends Nb{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=db(e);for(const t of e.slice(1))if(null==t)throw new Rg(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],wy(e,1)]}call(e,t){return go((()=>{this.invokeCallHook(e,t);let n=pb(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Ro(n,e)}return function(e){if(e.rank<=1)throw new Rg(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],wy(e.shape,1)];return Al(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Lk.className="Flatten",fu(Lk);class zk extends Nb{constructor(e){super(e),this.supportsMasking=!0,this.activation=Ww(e.activation)}call(e,t){return go((()=>{this.invokeCallHook(e,t);const n=pb(e);return this.activation.apply(n)}))}getConfig(){const e={activation:Pw(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}zk.className="Activation",fu(zk);class Pk extends Nb{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return go((()=>{return e=pb(e),t=e,n=this.n,go((()=>{if(2!==t.shape.length)throw new Rg(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Fy(Cy(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}Pk.className="RepeatVector",fu(Pk);class Bk extends Nb{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",a=t.slice();let r=1,s=null;for(let e=0;e<a.length;++e){const t=a[e];if(this.isUnknown(t)){if(null!==s)throw new Rg("Can only specifiy one unknown dimension.");s=e}else r*=t}const i=wy(e);if(null!==s){if(0===r||i%r!=0)throw new Rg(n);a[s]=i/r}else if(i!==r)throw new Rg(n);return a}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return go((()=>{this.invokeCallHook(e,t);const n=pb(e),a=n.shape,r=a.slice(0,1).concat(this.fixUnknownDimension(a.slice(1),this.targetShape));return Al(n,r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Bk.className="Reshape",fu(Bk);class Wk extends Nb{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=Iy(1,e.dims.length+1);if(!le(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new xb({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=db(e)).slice();return this.dims.forEach(((n,a)=>{t[a+1]=e[n]})),t}call(e,t){return Ro(pb(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Wk.className="Permute",fu(Wk);class Vk extends Nb{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=pb(e);return ll(Sh(n,this.maskValue),-1)}call(e,t){return go((()=>{this.invokeCallHook(e,t);const n=pb(e),a=ll(Sh(n,this.maskValue),-1,!0);return Fu(n,Mi(a,n.dtype))}))}}Vk.className="Masking",fu(Vk);class Uk extends Nb{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Bg(e.inputLength))}this.inputDim=e.inputDim,Jg(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Jg(this.outputDim,"outputDim"),this.embeddingsInitializer=lb(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Kw(e.embeddingsRegularizer),this.activityRegularizer=Kw(e.activityRegularizer),this.embeddingsConstraint=Gb(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return go((()=>this.maskZero?(e=pb(e),Sh(e,Mu(e))):null))}computeOutputShape(e){if(e=db(e),null==this.inputLength)return[...e,this.outputDim];const t=Bg(this.inputLength);if(t.length!==e.length-1)throw new Rg(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let a=0;a<t.length;++a){const r=t[a],s=e[a+1];if(null!=r&&null!=s&&r!==s)throw new Rg(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=s),n++}}return[e[0],...t,this.outputDim]}call(e,t){return go((()=>{this.invokeCallHook(e,t);let n=pb(e);"int32"!==n.dtype&&(n=Ty(n,"int32"));const a=My(this.embeddings.read(),Al(n,[n.size]));return Al(a,db(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:ub(this.embeddingsInitializer),embeddingsRegularizer:jw(this.embeddingsRegularizer),activityRegularizer:jw(this.activityRegularizer),embeddingsConstraint:Vb(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Uk.className="Embedding",fu(Uk);class Gk extends Nb{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Fg}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let a=0;a<t.length;++a){const r=e[e.length-t.length+a],s=t[a];if(null==r||null==s||r<0||s<0)n.push(null);else if(1===r)n.push(s);else if(1===s)n.push(r);else{if(r!==s)throw new Rg("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[db(e)]),e.length<2)throw new Rg(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Kg(t),t.length>1)throw new Rg(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const a=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,a)}const a=e.map((e=>e.length));-1===e.indexOf(null)&&1===Kg(a).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return go((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const a=vy(n);for(let n of e){const e=n.rank;for(let t=0;t<a-e;++t)n=Cy(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const a of e){const e=a.rank;if(null==e){const e=a.shape,r=e[0],s=e.slice(1).concat([r]);let i=Al(a,[r].concat(wy(e.slice(1))));i=Ro(i,[1,0]),i=Al(i,s),t.push(i),n=!0}else if(e>1){const r=Iy(1,e).concat([0]);t.push(Ro(a,r)),n=!0}else t.push(a)}let a=this.mergeFunction(t);const r=a.rank;if(n)if(null==r){const e=a.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));a=Al(Ro(Al(a,[-1,t]),[1,0]),n)}else if(r>1){const e=[r-1].concat(Iy(0,r-1));a=Ro(a,e)}return a}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const a=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,a)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Kg(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return go((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Rg("`mask` should be an Array");if(!Array.isArray(e))throw new Rg("`inputs` should be an Array");if(t.length!==e.length)throw new Rg(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:Lc(e,0))))[0];for(let e=1;e<t.length-1;++e)n=sh(n,t[e]);return n}))}}class Hk extends Gk{constructor(e){super(e)}mergeFunction(e){return go((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=_u(t,e[n]);return t}))}}Hk.className="Add",fu(Hk);class jk extends Gk{constructor(e){super(e)}mergeFunction(e){return go((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Fu(t,e[n]);return t}))}}jk.className="Multiply",fu(jk);class qk extends Gk{constructor(e){super(e)}mergeFunction(e){return go((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=_u(t,e[n]);return Fu(1/e.length,t)}))}}qk.className="Average",fu(qk);class Kk extends Gk{constructor(e){super(e)}mergeFunction(e){return go((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Qu(t,e[n]);return t}))}}Kk.className="Maximum",fu(Kk);class Xk extends Gk{constructor(e){super(e)}mergeFunction(e){return go((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=xh(t,e[n]);return t}))}}Xk.className="Minimum",fu(Xk);class Yk extends Gk{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Rg("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const a=e[t].slice();a.splice(this.axis,1);let r=!1;for(const e of n)if(le(e,a)){r=!0;break}r||n.push(a)}if(n.length>1)throw new Rg("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return go((()=>Ay(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Rg("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),a=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[a]||null==e[a]){n[a]=null;break}n[a]+=e[a]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Rg("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Rg("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Rg(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return go((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const a=[];for(let n=0;n<e.length;++n)null==t[n]?a.push(Mi(Th(e[n]),"bool")):t[n].rank<e[n].rank?a.push(Lc(t[n],-1)):a.push(t[n]);const r=Dl(a,this.axis);return ul(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Zk(e,t){for(;e<0;)e+=t;return e}Yk.className="Concatenate",fu(Yk);class Jk extends Gk{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){ae(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Fg("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(t,n);if(t[a[0]]!==n[a[1]])throw new Rg(`Dimension incompatibility: ${t[a[0]]} !== ${n[a[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Rg(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],a=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>Zk(t,e[n].shape.length))):[Zk(this.axes,n.shape.length),Zk(this.axes,a.shape.length)],this.normalize&&(n=vx(n,t[0]),a=vx(a,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Fg("batchDot is not implemented for tensors of 4D or higher rank yet");if(ae(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),ae(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Fg("batchDot is not implemented for complex64-type Tensors yet.");const a=e.shape.length,r=t.shape.length;null==n&&(n=[a-1,r-2]);const s=n;return go((()=>{let n,i;if(a>r){n=a-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=Al(t,t.shape.concat(e))}else if(r>a){n=r-a;const t=[];for(let e=0;e<n;++e)t.push(1);e=Al(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=s[0]===s[1]?Rc(Fu(e,t),s[0]):Rc(Fu(Ro(e,[1,0]),t),s[1]);else{const n=s[0]!==e.shape.length-1,a=s[1]===t.shape.length-1;i=so(e,t,n,a)}if(n>0){let e;e=a>r?a+r-3:a-1;const t=[];for(let a=e;a<e+n;++a)t.push(a);i=vp(i,t)}return 1===i.shape.length&&(i=Lc(i,1)),i}))}(n,a,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Zk(this.axes,e.length),Zk(this.axes,t.length)],n}computeOutputShape(e){ae(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Fg("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(t,n);t.splice(a[0],1),n.splice(a[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Jk.className="Dot",fu(Jk);class Qk extends Nb{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return go((()=>{this.invokeCallHook(e,t);const n=pb(e);return Wy((()=>_u(Dy(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}Qk.className="GaussianNoise",fu(Qk);class ev extends Nb{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return go((()=>{this.invokeCallHook(e,t);const n=pb(e);return this.rate>0&&this.rate<1?Wy((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return Fu(n,Dy(n.shape,1,e))}),(()=>n),t.training||!1):n}))}}ev.className="GaussianDropout",fu(ev);class tv extends Nb{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||pb(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return go((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e),a=()=>{const t=pb(e),a=-1.7580993408473766;let r=Gc(qh(n),this.rate);r=Ty(r,"float32");const s=((1-this.rate)*(1+this.rate*a**2))**-.5,i=-s*a*this.rate,o=_u(Fu(t,r),Fu(_u(r,-1),a));return _u(Fu(o,s),i)};return Wy(a,(()=>pb(e)),t.training||!1)}return e}))}}function nv(e,t,n,a,r,s=.001){let i;if(2===e.rank)i=Wl(e,t,n,a,r,s);else if(3===e.rank)i=Vl(e,t,n,a,r,s);else{if(4!==e.rank)throw new Fg(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=Ul(e,t,n,a,r,s)}return i}tv.className="AlphaDropout",fu(tv);class av extends Nb{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=lb(e.betaInitializer||"zeros"),this.gammaInitializer=lb(e.gammaInitializer||"ones"),this.movingMeanInitializer=lb(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=lb(e.movingVarianceInitializer||"ones"),this.betaConstraint=Gb(e.betaConstraint),this.gammaConstraint=Gb(e.gammaConstraint),this.betaRegularizer=Kw(e.betaRegularizer),this.gammaRegularizer=Kw(e.gammaRegularizer)}build(e){e=db(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Rg(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new xb({ndim:e.length,axes:{[t]:n}})];const a=[n];this.scale&&(this.gamma=this.addWeight("gamma",a,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",a,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",a,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",a,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return go((()=>{const n=null!=t.training&&t.training,a=pb(e),r=a.shape,s=r.length,i=Iy(0,s),o=this.axis>=0?this.axis:this.axis+s;i.splice(o,1);const u=Mg(1,s);u[o]=r[o];const l=i.slice();l.sort();const c=!le(l,Iy(0,s).slice(0,s-1));if(!n)return(()=>{if(c){const e=Al(this.movingMean.read(),u),t=Al(this.movingVariance.read(),u),n=this.center?Al(this.beta.read(),u):null,r=this.scale?Al(this.gamma.read(),u):null;return nv(a,e,t,n,r,this.epsilon)}return nv(a,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=function(e,t,n,a,r=.001){return le(a.slice().sort(),Iy(0,e.rank-1))?function(e,t,n,a,r=.001){return go((()=>{const s=vh(e,a),i=s.mean,o=s.variance;return[nv(e,i,o,n,t,r),i,o]}))}(e,t,n,a,r):function(e,t,n,a,r=.001){return go((()=>{const s=vh(e,a),i=s.mean,o=s.variance,u=[];for(const t of Iy(0,e.rank))-1!==a.indexOf(t)?u.push(1):u.push(e.shape[t]);const l=Al(i,u),c=Al(o,u),h=null==t?null:Al(t,u),p=null==n?null:Al(n,u);return[nv(e,l,c,p,h,r),i,o]}))}(e,t,n,a,r)}(a,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{go((()=>{const a=1-n,r=e.read(),s=Fu(Yu(r,t),a);e.write(Yu(r,s))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ub(this.betaInitializer),gammaInitializer:ub(this.gammaInitializer),movingMeanInitializer:ub(this.movingMeanInitializer),movingVarianceInitializer:ub(this.movingVarianceInitializer),betaRegularizer:jw(this.betaRegularizer),gammaRegularizer:jw(this.gammaRegularizer),betaConstraint:Vb(this.betaConstraint),gammaConstraint:Vb(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}av.className="BatchNormalization",fu(av);class rv extends Nb{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=lb(e.betaInitializer||"zeros"),this.gammaInitializer=lb(e.gammaInitializer||"ones"),this.betaRegularizer=Kw(e.betaRegularizer),this.gammaRegularizer=Kw(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=db(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Kg(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t])),a=!0;this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,a):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,a):this.beta=null,this.built=!0}call(e,t){const n=pb(e),a=n.shape,r=a.length;return go((()=>{let{mean:e,variance:t}=vh(n,this.axis,!0);const s=Mg(1,r);for(const e of this.axis)s[e]=a[e];const i=e=>null!=e&&e.shape.length!==r?Al(e,s):e;let o=this.scale?i(this.gamma.read()):null,u=this.center?i(this.beta.read()):null;const l=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(l.push(a[e]),c.push(1)):(l.push(1),c.push(a[e]));return e=Pc(e,l),t=Pc(t,l),null!=o&&(o=Pc(o,c)),null!=u&&(u=Pc(u,c)),nv(n,e,t,u,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ub(this.betaInitializer),gammaInitializer:ub(this.gammaInitializer),betaRegularizer:jw(this.betaRegularizer),gammaRegularizer:jw(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}rv.className="LayerNormalization",fu(rv);class sv extends Nb{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Rg(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Rg(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Rg(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new xb({ndim:4})]}computeOutputShape(e){let t,n;return e=db(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return go((()=>{return t=pb(e),n=this.padding,a=this.dataFormat,go((()=>{if(4!==t.rank)throw new Rg(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Rg("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==a&&(a="channelsLast"),"channelsLast"!==a&&"channelsFirst"!==a)throw new Rg(`Unknown data format: ${a}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===a?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],$h(t,e)}));var t,n,a}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function iv(e,t,n,a,r,s){return go((()=>{let i;hy(r),dy(s),py(a),null==n&&(n=[1,1]),null==a&&(a="valid"),null==r&&(r="channelsLast"),null==s&&(s="max"),e=rk(e,r);const o="same"===a?"same":"valid";return i="max"===s?ph(e,t,n,o):Rl(e,t,n,o),"channelsFirst"===r&&(i=Ro(i,[0,3,1,2])),i}))}function ov(e,t,n,a,r,s){return go((()=>{let i;hy(r),dy(s),py(a),null==n&&(n=[1,1,1]),null==a&&(a="valid"),null==r&&(r="channelsLast"),null==s&&(s="max"),e=sk(e,r);const o="same"===a?"same":"valid";return i="max"===s?dh(e,t,n,o):Fl(e,t,n,o),"channelsFirst"===r&&(i=Ro(i,[0,4,1,2,3])),i}))}sv.className="ZeroPadding2D",fu(sv);class uv extends Nb{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Rg(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(Jg(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Rg(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}Jg(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,py(this.padding),this.inputSpec=[new xb({ndim:3})]}computeOutputShape(e){const t=nk((e=db(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return go((()=>{this.invokeCallHook(e,t),e=Cy(pb(e),2);const n=this.poolingFunction(pb(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return vp(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class lv extends uv{constructor(e){super(e)}poolingFunction(e,t,n,a,r){return hy(r),py(a),iv(e,t,n,a,r,"max")}}lv.className="MaxPooling1D",fu(lv);class cv extends uv{constructor(e){super(e)}poolingFunction(e,t,n,a,r){return hy(r),py(a),iv(e,t,n,a,r,"avg")}}cv.className="AveragePooling1D",fu(cv);class hv extends Nb{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Rg(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Jg(this.poolSize,"poolSize"),Jg(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,hy(this.dataFormat),py(this.padding),this.inputSpec=[new xb({ndim:4})]}computeOutputShape(e){e=db(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=nk(t,this.poolSize[0],this.padding,this.strides[0]),n=nk(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return go((()=>(this.invokeCallHook(e,t),this.poolingFunction(pb(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class pv extends hv{constructor(e){super(e)}poolingFunction(e,t,n,a,r){return hy(r),py(a),iv(e,t,n,a,r,"max")}}pv.className="MaxPooling2D",fu(pv);class dv extends hv{constructor(e){super(e)}poolingFunction(e,t,n,a,r){return hy(r),py(a),iv(e,t,n,a,r,"avg")}}dv.className="AveragePooling2D",fu(dv);class fv extends Nb{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Rg(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Jg(this.poolSize,"poolSize"),Jg(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,hy(this.dataFormat),py(this.padding),this.inputSpec=[new xb({ndim:5})]}computeOutputShape(e){e=db(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],a="channelsFirst"===this.dataFormat?e[4]:e[3];return t=nk(t,this.poolSize[0],this.padding,this.strides[0]),n=nk(n,this.poolSize[1],this.padding,this.strides[1]),a=nk(a,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,a]:[e[0],t,n,a,e[4]]}call(e,t){return go((()=>(this.invokeCallHook(e,t),this.poolingFunction(pb(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class mv extends fv{constructor(e){super(e)}poolingFunction(e,t,n,a,r){return hy(r),py(a),ov(e,t,n,a,r,"max")}}mv.className="MaxPooling3D",fu(mv);class gv extends fv{constructor(e){super(e)}poolingFunction(e,t,n,a,r){return hy(r),py(a),ov(e,t,n,a,r,"avg")}}gv.className="AveragePooling3D",fu(gv);class yv extends Nb{constructor(e){super(e),this.inputSpec=[new xb({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Fg}}class bv extends yv{constructor(e){super(e||{})}call(e,t){return go((()=>{const t=pb(e);return mh(t,1)}))}}bv.className="GlobalAveragePooling1D",fu(bv);class xv extends yv{constructor(e){super(e||{})}call(e,t){return go((()=>{const t=pb(e);return _c(t,1)}))}}xv.className="GlobalMaxPooling1D",fu(xv);class wv extends Nb{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,hy(this.dataFormat),this.inputSpec=[new xb({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Fg}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class kv extends wv{call(e,t){return go((()=>{const t=pb(e);return"channelsLast"===this.dataFormat?mh(t,[1,2]):mh(t,[2,3])}))}}kv.className="GlobalAveragePooling2D",fu(kv);class vv extends wv{call(e,t){return go((()=>{const t=pb(e);return"channelsLast"===this.dataFormat?_c(t,[1,2]):_c(t,[2,3])}))}}vv.className="GlobalMaxPooling2D",fu(vv);class Iv extends Nb{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const a=kx(t.layer,n);delete t.layer;const r={layer:a};return Object.assign(r,t),new e(r)}}class Nv extends Iv{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=db(e)).length<3)throw new Rg(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=db(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),a=e[1];return[n[0],a].concat(n.slice(1))}call(e,t){return go((()=>wk(((e,n)=>[pb(this.layer.call(e,t)),[]]),e=pb(e),[],!1,null,null,!1,!0)[1]))}}Nv.className="TimeDistributed",fu(Nv);class Sv extends Iv{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=kx(n),t.goBackwards=!0!==t.goBackwards;const a={};var r;if(a.className=e.layer.getClassName(),a.config=t,this.backwardLayer=kx(a),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,Yg(ly,"BidirectionalMergeMode",r),e.weights)throw new Fg("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,a,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(a=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(a).concat(a.slice()):[t].concat(a).concat(a.slice()):Pg(n)}apply(e,t){let n=null==t?null:t.initialState,a=null==t?null:t.constants;null==t&&(t={});const r=xk(e,n,a,this.numConstants);if(e=r.inputs,n=r.initialState,a=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==a)return super.apply(e,t);const s=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Rg("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,s.push(...n);const a=n.map((e=>new xb({shape:e.shape})));this.forwardLayer.stateSpec=a.slice(0,e/2),this.backwardLayer.stateSpec=a.slice(e/2),i.push(...a)}if(null!=a)throw new Fg("Support for constants in Bidirectional layers is not implemented yet.");const o=s[0]instanceof wb;for(const e of s)if(e instanceof wb!==o)throw new Rg("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(s),a=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=a;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return go((()=>{const n=t.initialState;let a,r,s,i;if(null==n)a=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const s=n.slice(0,n.length/2),i=n.slice(n.length/2);a=this.forwardLayer.call(e,Object.assign(t,{initialState:s})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(a)&&(s=a.slice(1).concat(r.slice(1))),a=a[0],r=r[0]),this.returnSequences&&(r=Jh(r,1)),"concat"===this.mergeMode?i=Ay([a,r]):"sum"===this.mergeMode?i=_u(a,r):"ave"===this.mergeMode?i=Fu(.5,_u(a,r)):"mul"===this.mergeMode?i=Fu(a,r):null==this.mergeMode&&(i=[a,r]),this.returnState?null==this.mergeMode?i.concat(s):[i].concat(s):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){my(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),my(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=kx(t.layer);if(delete t.layer,null!=t.numConstants)throw new Fg("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const a=t;return a.layer=n,new e(a)}}Sv.className="Bidirectional",fu(Sv);class Tv extends Nb{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return go((()=>("float32"!==(e=pb(e)).dtype&&(e=Ty(e,"float32")),_u(Fu(e,this.scale),this.offset))))}}function Cv(e){return new Tb(e)}function $v(e){return new Jw(e)}function Ev(e){return new Xw(e)}function _v(e){return new Yw(e)}function Av(e){return new Zw(e)}function Rv(e){return new ek(e)}function Fv(e){return new Qw(e)}function Dv(e){return new mk(e)}function Ov(e){return new lk(e)}function Mv(e){return new hk(e)}function Lv(e){return new ck(e)}function zv(e){return new pk(e)}function Pv(e){return new fk(e)}function Bv(e){return new gk(e)}function Wv(e){return new yk(e)}function Vv(e){return new bk(e)}function Uv(e){return new zk(e)}function Gv(e){return new Mk(e)}function Hv(e){return new Dk(e)}function jv(e){return new Ok(e)}function qv(e){return new Lk(e)}function Kv(e){return new Pk(e)}function Xv(e){return new Bk(e)}function Yv(e){return new Wk(e)}function Zv(e){return new Uk(e)}function Jv(e){return new Hk(e)}function Qv(e){return new qk(e)}function eI(e){return new Yk(e)}function tI(e){return new Kk(e)}function nI(e){return new Xk(e)}function aI(e){return new jk(e)}function rI(e){return new Jk(e)}function sI(e){return new av(e)}function iI(e){return new rv(e)}function oI(e){return new sv(e)}function uI(e){return new cv(e)}function lI(e){return uI(e)}function cI(e){return uI(e)}function hI(e){return new dv(e)}function pI(e){return hI(e)}function dI(e){return hI(e)}function fI(e){return new gv(e)}function mI(e){return fI(e)}function gI(e){return fI(e)}function yI(e){return new bv(e)}function bI(e){return new kv(e)}function xI(e){return new xv(e)}function wI(e){return new vv(e)}function kI(e){return new lv(e)}function vI(e){return new pv(e)}function II(e){return new mv(e)}function NI(e){return new Tk(e)}function SI(e){return new Sk(e)}function TI(e){return new $k(e)}function CI(e){return new Ck(e)}function $I(e){return new Nk(e)}function EI(e){return new Ik(e)}function _I(e){return new Fk(e)}function AI(e){return new Rk(e)}function RI(e){return new kk(e)}function FI(e){return new Ek(e)}function DI(e){return new Sv(e)}function OI(e){return new Nv(e)}Tv.className="Rescaling",fu(Tv);const MI=xI,LI=wI,zI=kI,PI=vI;function BI(e){return new Qk(e)}function WI(e){return new ev(e)}function VI(e){return new tv(e)}function UI(e){return new Vk(e)}function GI(e){return new Tv(e)}function HI(e,t){return Rx(e,t)}function jI(e,t){return Mx(e,t)}function qI(e,t){return Lx(e,t)}function KI(e,t){return Fx(e,t)}function XI(e,t){return zx(e,t)}function YI(e,t){return Ox(e,t)}function ZI(e,t){return function(e,t){return go((()=>{const n=Dx(e,t),a=function(e,t){return go((()=>Mi(Rc(sh(mc(e,1),mc(t,0))),"float32")))}(e,t),r=_u(n,a);return Mi(gc(Uc(r,0),Ru(n,r),0),"float32")}))}(e,t)}function JI(e,t){return Ex(e,t)}function QI(e,t){return Nx(e,t)}function eN(e,t){return Sx(e,t)}function tN(e,t){return Sx(e,t)}function nN(e,t){return Sx(e,t)}function aN(e,t){return Ix(e,t)}function rN(e,t){return Ix(e,t)}function sN(e,t){return Ix(e,t)}function iN(e){return new Gw(e)}function oN(e){return Vw(t=e),new Gw({l1:null!=t?t.l1:null,l2:0});var t}function uN(e){return Vw(t=e),new Gw({l2:null!=t?t.l2:null,l1:0});var t}class lN extends dx{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof mw))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function cN(e,t){return e<t}function hN(e,t){return e>t}class pN extends lN{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new Fg("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=cN:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=hN:this.monitorFunc=cN,this.monitorFunc===cN&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===cN?1/0:-1/0}async onEpochEnd(e,t){await cx(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const dN={earlyStopping:function(e){return new pN(e)}};var fN,mN;je().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(fN||(fN={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(mN||(mN={}));const gN={};function yN(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};gN[e]=n}function bN(e){return gN[e]}function xN(e){delete gN[e]}function wN(e,t,n,a,r){const s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){const e=s.inputIndexStart,i=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return kN(t.inputNames[s.inputIndexStart],n,a,r);if("tensors"===s.type)return t.inputNames.slice(e,i).map((e=>kN(e,n,a,r)));const o=kN(t.inputNames.slice(e)[0],n,a,r),u=o.dataSync();return"number"===s.type?u[0]:Oe(o.shape,u)}const i=t.attrParams[e];return i&&i.value}function kN(e,t,n,a){const[r,s]=NN(e);if(null!=a){const e=a.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[IN(r,e)]));return void 0!==i?t[IN(r,i)][s]:void 0}function vN(e,t){const[n,a,r]=NN(e);return[IN(n,t&&t.currentContextId),a,r]}function IN(e,t){return t?`${e}-${t}`:e}function NN(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],a=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),a]}function SN(e,t,n){let a=wN("pad",e,t,n);if("explicit"===a){a=wN("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=a[2*e],r[e][1]=a[2*e+1];return r}return a}function TN(e){return e.kept?e:Li(e)}const CN=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],$N=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],EN=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],_N=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],AN=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],RN=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],FN=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],DN=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],ON=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],MN=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],LN=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],zN=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],PN=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],BN=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],WN=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],VN=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],UN=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],GN=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],HN=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class jN{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[I,N,S,T,C,$,E,_,A,R,F,D,O,M,L,z,P,B,W].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,a=[],r=[],s=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?a.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e)),{});let o=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach(((e,n)=>{const[a,,r]=vN(e),s=i[a];if(null!=s.outputs){const e=s.outputs.indexOf(r);if(-1!==e){const r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(s),s.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=vN(e),n=i[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=vN(e),n=i[t];n&&(n.signatureKey=l[e],o.push(n))})):o=a;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:u,weights:r,placeholders:a,signature:t,functions:p};return s.length>0&&(d.initNodes=s),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=bN(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const a=n.type;let r;switch(n.type){case"string":r=KN(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=KN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=rS(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=rS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=YN(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=YN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=aS(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=aS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=XN(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=XN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=iS(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=iS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=nS(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=nS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=sS(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=sS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=QN(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=QN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=eS(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=eS(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=JN(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=JN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:a},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let a={};null!=t&&(a=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],s=[];e.signature.inputArg.forEach((e=>{const[t]=vN(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:ZN(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),a[t]=n})),Object.keys(a).forEach((e=>{const t=a[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=vN(e),i=a[r];if(null!=i.outputs){const e=i.outputs.indexOf(s);if(-1!==e){const a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(i),i.children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=vN(i[e.name]),r=a[t];null!=r&&(r.defaultOutput=n,s.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:a,inputs:r,outputs:s,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function qN(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=je().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function KN(e,t,n,a=!1){const r=e[t];return null!=r?qN(r.s,a):n}function XN(e,t,n){const a=e[t];return a?a.b:n}function YN(e,t,n){const a=e[t]||{},r=null!=a.i?a.i:null!=a.f?a.f:n;return"number"==typeof r?r:parseInt(r,10)}function ZN(e){switch("string"==typeof e&&(e=fN[e]),e){case fN.DT_FLOAT:case fN.DT_HALF:return"float32";case fN.DT_INT32:case fN.DT_INT64:case fN.DT_INT8:case fN.DT_UINT8:return"int32";case fN.DT_BOOL:return"bool";case fN.DT_DOUBLE:return"float32";case fN.DT_STRING:return"string";default:return null}}function JN(e,t,n){const a=e[t];return a&&a.func?a.func.name:n}function QN(e,t,n){const a=e[t];return a&&a.type?ZN(a.type):n}function eS(e,t,n){const a=e[t];return a&&a.list&&a.list.type?a.list.type.map((e=>ZN(e))):n}function tS(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function nS(e,t,n){const a=e[t];return a&&a.shape?tS(a.shape):n}function aS(e,t,n){const a=e[t];return a?((a.list.f&&a.list.f.length?a.list.f:a.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function rS(e,t,n,a=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>qN(e,a))):n}function sS(e,t,n){const a=e[t];return a&&a.list&&a.list.shape?a.list.shape.map((e=>tS(e))):n}function iS(e,t,n){const a=e[t];return a&&a.list&&a.list.b?a.list.b:n}class oS{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return kN(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return kN(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return YN(this.node.rawAttrs,e,t);if(null!=n.s)return KN(this.node.rawAttrs,e,t);if(null!=n.b)return XN(this.node.rawAttrs,e,t);if(null!=n.shape)return nS(this.node.rawAttrs,e,t);if(null!=n.type)return QN(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return aS(this.node.rawAttrs,e,t);if(null!=n.list.s)return rS(this.node.rawAttrs,e,t);if(null!=n.list.shape)return sS(this.node.rawAttrs,e,t);if(null!=n.list.b)return iS(this.node.rawAttrs,e,t);if(null!=n.list.type)return eS(this.node.rawAttrs,e,t)}return t}}function uS(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){ae(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let a=0;a<e.length;a++){const r=e[a],s=t[a];ae(r<0||s<0||r===s,(()=>n+` Shapes ${e} and ${t} must match`))}}}function lS(e){return"number"!=typeof e&&!e.some((e=>e<0))}function cS(e,t,n){let a=hS(e,n);const r=!lS(a);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${a}`);if(r&&t.forEach((e=>{a=hS(e.shape,a)})),!lS(a))throw new Error(`Non-fully-defined elementShape: ${a}`);return a}function hS(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let a=0;a<e.length;++a){const r=e[a],s=t[a];if(r>=0&&s>=0&&r!==s)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[a]=r>=0?r:s}return n}class pS{constructor(e,t,n,a,r,s,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=a,this.identicalElementShapes=r,this.dynamicSize=s,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Gu(0),bo(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),uS(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,bo(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Ls([],[0].concat(this.elementShape));const n=this.readMany(e);return uS(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Ip(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Ls([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return uS(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Dl(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Mp(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const a=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,s=[];go((()=>{t=Al(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:a[n-1],0],o=[1,e[n],r];s[n]=Al(Ml(t,i,o),this.elementShape)}return s}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,s)}}class dS{constructor(e,t,n,a=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);uS(t,e.shape,"TensorList shape mismatch: "),bo(e)})),this.idTensor=Gu(0),this.maxNumElements=a,bo(this.idTensor)}get id(){return this.idTensor.id}copy(){return new dS([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);uS(e,this.elementShape,"TensorList shape mismatch: ");const a=cS(this.elementShape,this.tensors,e);return go((()=>{const e=this.tensors.map((e=>Al(e,a)));return Ip(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=cS(this.elementShape,this.tensors,e),a=this.tensors.pop();return a.kept=!1,uS(a.shape,e,"TensorList shape mismatch: "),Al(a,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(uS(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");bo(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new dS([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);uS(this.tensors[e].shape,t,"TensorList shape mismatch: ");const a=cS(this.elementShape,this.tensors,t);return Al(this.tensors[e],a)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);uS(this.elementShape,t.shape,"TensorList shape mismatch: "),bo(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);uS(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const a=cS(this.elementShape,this.tensors,n);return 0===e.length?Ls([],[0].concat(a)):go((()=>{const t=e.map((e=>Al(this.tensors[e],a)));return Ip(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);uS(this.elementShape,t,"TensorList shape mismatch: ");const n=cS(this.elementShape,this.tensors,t);return 0===this.size()?Ls([],[0].concat(n)):go((()=>{const e=this.tensors.map((e=>Al(e,n)));return Dl(e,0)}))}}function fS(e,t,n){const[a,r]=wN("fusedOps",e,t,n),s="biasadd"===a,i=!s,o="prelu"===r,u="fusedbatchnorm"===a,l=wN("numArgs",e,t,n);if(s){if(o&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&s&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=wN("strides",e,t,n),h=SN(e,t,n),p=wN("dataFormat",e,t,n).toUpperCase(),d=wN("dilations",e,t,n);let[f,m]=wN("args",e,t,n);return i&&(m=f,f=void 0),{stride:c,pad:h,dataFormat:p,dilations:d,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:wN("leakyreluAlpha",e,t,n)}}function mS(e,t,n){return{boxes:wN("boxes",e,t,n),scores:wN("scores",e,t,n),maxOutputSize:wN("maxOutputSize",e,t,n),iouThreshold:wN("iouThreshold",e,t,n),scoreThreshold:wN("scoreThreshold",e,t,n),softNmsSigma:wN("softNmsSigma",e,t,n)}}class gS{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Gu(0),this.tensorMap=new Map,bo(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Gu(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),go((()=>{const e=Mp(t),a=n.length,r=e.length;ae(a===r,(()=>`The number of elements doesn't match, keys has ${a} elements, the values has ${r} elements.`));for(let t=0;t<a;t++){const a=n[t],r=e[t];bo(r),this.tensorMap.set(a,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return go((()=>{const e=[];for(let a=0;a<n.length;a++){const r=n[a],s=this.findWithDefault(r,t);e.push(s)}return Ip(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function yS(e,t,n,a,r=go){const s=((e,t,n)=>{switch(e.category){case"arithmetic":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[a.add(wN("a",e,t,n),wN("b",e,t,n))];case"AddN":return[a.addN(wN("tensors",e,t,n))];case"FloorMod":case"Mod":return[a.mod(wN("a",e,t,n),wN("b",e,t,n))];case"Mul":return[a.mul(wN("a",e,t,n),wN("b",e,t,n))];case"RealDiv":case"Div":return[a.div(wN("a",e,t,n),wN("b",e,t,n))];case"DivNoNan":return[a.divNoNan(wN("a",e,t,n),wN("b",e,t,n))];case"FloorDiv":return[a.floorDiv(wN("a",e,t,n),wN("b",e,t,n))];case"Sub":return[a.sub(wN("a",e,t,n),wN("b",e,t,n))];case"Minimum":return[a.minimum(wN("a",e,t,n),wN("b",e,t,n))];case"Maximum":return[a.maximum(wN("a",e,t,n),wN("b",e,t,n))];case"Pow":return[a.pow(wN("a",e,t,n),wN("b",e,t,n))];case"SquaredDifference":return[a.squaredDifference(wN("a",e,t,n),wN("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"Abs":case"ComplexAbs":return[a.abs(wN("x",e,t,n))];case"Acos":return[a.acos(wN("x",e,t,n))];case"Acosh":return[a.acosh(wN("x",e,t,n))];case"Asin":return[a.asin(wN("x",e,t,n))];case"Asinh":return[a.asinh(wN("x",e,t,n))];case"Atan":return[a.atan(wN("x",e,t,n))];case"Atan2":return[a.atan2(wN("x",e,t,n),wN("y",e,t,n))];case"Atanh":return[a.atanh(wN("x",e,t,n))];case"Ceil":return[a.ceil(wN("x",e,t,n))];case"Complex":return[a.complex(wN("real",e,t,n),wN("imag",e,t,n))];case"Cos":return[a.cos(wN("x",e,t,n))];case"Cosh":return[a.cosh(wN("x",e,t,n))];case"Elu":return[a.elu(wN("x",e,t,n))];case"Erf":return[a.erf(wN("x",e,t,n))];case"Exp":return[a.exp(wN("x",e,t,n))];case"Expm1":return[a.expm1(wN("x",e,t,n))];case"Floor":return[a.floor(wN("x",e,t,n))];case"Log":return[a.log(wN("x",e,t,n))];case"Log1p":return[a.log1p(wN("x",e,t,n))];case"Imag":return[a.imag(wN("x",e,t,n))];case"Neg":return[a.neg(wN("x",e,t,n))];case"Reciprocal":return[a.reciprocal(wN("x",e,t,n))];case"Real":return[a.real(wN("x",e,t,n))];case"Relu":return[a.relu(wN("x",e,t,n))];case"Round":return[a.round(wN("x",e,t,n))];case"Selu":return[a.selu(wN("x",e,t,n))];case"Sigmoid":return[a.sigmoid(wN("x",e,t,n))];case"Sin":return[a.sin(wN("x",e,t,n))];case"Sign":return[a.sign(wN("x",e,t,n))];case"Sinh":return[a.sinh(wN("x",e,t,n))];case"Softplus":return[a.softplus(wN("x",e,t,n))];case"Sqrt":return[a.sqrt(wN("x",e,t,n))];case"Square":return[a.square(wN("x",e,t,n))];case"Tanh":return[a.tanh(wN("x",e,t,n))];case"Tan":return[a.tan(wN("x",e,t,n))];case"ClipByValue":return[a.clipByValue(wN("x",e,t,n),wN("clipValueMin",e,t,n),wN("clipValueMax",e,t,n))];case"Relu6":return[a.relu6(wN("x",e,t,n))];case"Rsqrt":return[a.rsqrt(kN(e.inputNames[0],t,n))];case"Prod":return[a.prod(wN("x",e,t,n),wN("axes",e,t,n))];case"LeakyRelu":return[a.leakyRelu(wN("x",e,t,n),wN("alpha",e,t,n))];case"Prelu":return[a.prelu(wN("x",e,t,n),wN("alpha",e,t,n))];case"IsNan":return[a.isNaN(kN(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const a=wN("thenBranch",e,t,n),r=wN("elseBranch",e,t,n),s=wN("cond",e,t,n),i=wN("args",e,t,n);return(await s.data())[0]?n.functionMap[a].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const a=wN("body",e,t,n),r=wN("cond",e,t,n),s=wN("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),o=s.map((e=>e.id));let u=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let l=s;for(;u[0];){const e=l;l=await n.functionMap[a].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const s=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await s[0].data(),s.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[TN(wN("pred",e,t,n))];case"Switch":{const a=wN("pred",e,t,n);let r=wN("data",e,t,n);return r.kept||(r=TN(r)),(await a.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const a=e.inputNames.find((e=>void 0!==kN(e,t,n)));return a?[TN(kN(a,t,n))]:void 0}case"Enter":{const a=wN("frameName",e,t,n),r=wN("tensor",e,t,n);return n.enterFrame(a),[TN(r)]}case"Exit":{const a=wN("tensor",e,t,n);return n.exitFrame(),[TN(a)]}case"NextIteration":{const a=wN("tensor",e,t,n);return n.nextIteration(),[TN(a)]}case"TensorArrayV3":{const a=wN("size",e,t,n),r=wN("dtype",e,t,n),s=wN("elementShape",e,t,n),i=wN("dynamicSize",e,t,n),o=wN("clearAfterRead",e,t,n),u=wN("identicalElementShapes",e,t,n),l=wN("name",e,t,n),c=new pS(l,r,a,s,u,i,o);return n.addTensorArray(c),[c.idTensor,Gu(1)]}case"TensorArrayWriteV3":{const a=wN("tensorArrayId",e,t,n),r=wN("index",e,t,n),s=wN("tensor",e,t,n),i=n.getTensorArray(a.id);return i.write(r,s),[i.idTensor]}case"TensorArrayReadV3":{const a=wN("tensorArrayId",e,t,n),r=wN("index",e,t,n);return[n.getTensorArray(a.id).read(r)]}case"TensorArrayGatherV3":{const a=wN("tensorArrayId",e,t,n),r=wN("indices",e,t,n),s=wN("dtype",e,t,n);return[n.getTensorArray(a.id).gather(r,s)]}case"TensorArrayScatterV3":{const a=wN("tensorArrayId",e,t,n),r=wN("indices",e,t,n),s=wN("tensor",e,t,n),i=n.getTensorArray(a.id);return i.scatter(r,s),[i.idTensor]}case"TensorArrayConcatV3":{const a=wN("tensorArrayId",e,t,n),r=n.getTensorArray(a.id),s=wN("dtype",e,t,n);return[r.concat(s)]}case"TensorArraySplitV3":{const a=wN("tensorArrayId",e,t,n),r=wN("tensor",e,t,n),s=wN("lengths",e,t,n),i=n.getTensorArray(a.id);return i.split(s,r),[i.idTensor]}case"TensorArraySizeV3":{const a=wN("tensorArrayId",e,t,n);return[Gu(n.getTensorArray(a.id).size(),"int32")]}case"TensorArrayCloseV3":{const a=wN("tensorArrayId",e,t,n),r=n.getTensorArray(a.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const a=wN("tensorListId",e,t,n),r=wN("index",e,t,n),s=wN("tensor",e,t,n),i=n.getTensorList(a.id);return i.setItem(r,s),[i.idTensor]}case"TensorListGetItem":{const a=wN("tensorListId",e,t,n),r=wN("index",e,t,n),s=wN("elementShape",e,t,n),i=wN("elementDType",e,t,n);return[n.getTensorList(a.id).getItem(r,s,i)]}case"TensorListScatterV2":case"TensorListScatter":{const a=wN("indices",e,t,n),r=function(e,t,n,a){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=a&&-1!==a&&r>=a)throw new Error(`Max index must be < array size (${r}  vs. ${a})`);const s=new dS([],n,e.dtype,a),i=Mp(e,0);return t.forEach(((e,t)=>{s.setItem(e,i[t])})),s}(wN("tensor",e,t,n),a,wN("elementShape",e,t,n),wN("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const a=wN("elementShape",e,t,n),r=wN("elementDType",e,t,n);let s;s="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=wN(s,e,t,n),o=function(e,t,n,a){return new dS([],e,t,a)}(a,r,0,"TensorListReserve"===e.op?-1:i);return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const a=wN("tensorListId",e,t,n),r=wN("indices",e,t,n),s=wN("elementShape",e,t,n),i=wN("elementDType",e,t,n);return[n.getTensorList(a.id).gather(r,i,s)]}case"TensorListStack":{const a=wN("tensorListId",e,t,n),r=wN("elementShape",e,t,n),s=wN("elementDType",e,t,n),i=wN("numElements",e,t,n);return[n.getTensorList(a.id).stack(r,s,i)]}case"TensorListFromTensor":{const a=function(e,t,n){const a=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);uS(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=Mp(e);return new dS(r,t,a)}(wN("tensor",e,t,n),wN("elementShape",e,t,n),wN("elementDType",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const a=wN("tensorListId",e,t,n),r=n.getTensorList(a.id),s=wN("dtype",e,t,n),i=wN("elementShape",e,t,n);return[r.concat(s,i)]}case"TensorListPushBack":{const a=wN("tensorListId",e,t,n),r=wN("tensor",e,t,n),s=n.getTensorList(a.id);return s.pushBack(r),[s.idTensor]}case"TensorListPopBack":{const a=wN("tensorListId",e,t,n),r=wN("elementShape",e,t,n),s=wN("elementDType",e,t,n);return[n.getTensorList(a.id).popBack(r,s)]}case"TensorListSplit":{const a=wN("tensor",e,t,n),r=wN("elementShape",e,t,n),s=function(e,t,n){let a=0;const r=t.map((e=>(a+=e,a)));if(a!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${a}, and tensor's shape is: ${e.shape}`);const s=hS(e.shape.slice(1),n),i=0===a?0:e.size/a,o=go((()=>{const n=[];e=Al(e,[1,a,i]);for(let a=0;a<t.length;++a){const o=[0,0===a?0:r[a-1],0],u=[1,t[a],i];n[a]=Al(Ml(e,o,u),s)}return e.dispose(),n})),u=new dS([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)u.setItem(e,o[e]);return u}(a,wN("lengths",e,t,n),r);return n.addTensorList(s),[s.idTensor]}case"TensorListLength":{const a=wN("tensorListId",e,t,n);return[Gu(n.getTensorList(a.id).size(),"int32")]}case"TensorListResize":{const a=wN("tensorListId",e,t,n),r=wN("size",e,t,n),s=n.getTensorList(a.id).resize(r);return n.addTensorList(s),[s.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"Conv1D":{const r=wN("stride",e,t,n),s=wN("pad",e,t,n),i=wN("dataFormat",e,t,n).toUpperCase(),o=wN("dilation",e,t,n);return[a.conv1d(wN("x",e,t,n),wN("filter",e,t,n),r,s,i,o)]}case"Conv2D":{const r=wN("strides",e,t,n),s=SN(e,t,n),i=wN("dataFormat",e,t,n).toUpperCase(),o=wN("dilations",e,t,n);return[a.conv2d(wN("x",e,t,n),wN("filter",e,t,n),[r[1],r[2]],s,i,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:i,dilations:o,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:h}=fS(e,t,n);return[a.fused.conv2d({x:wN("x",e,t,n),filter:wN("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:i,dilations:[o[1],o[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:i,dilations:o,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:h}=fS(e,t,n);return[a.fused.depthwiseConv2d({x:wN("x",e,t,n),filter:wN("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:i,dilations:[o[1],o[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=wN("outputShape",e,t,n),s=wN("strides",e,t,n),i=SN(e,t,n);return[a.conv2dTranspose(wN("x",e,t,n),wN("filter",e,t,n),r,[s[1],s[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=wN("strides",e,t,n),s=SN(e,t,n),i=wN("dilations",e,t,n),o=wN("dataFormat",e,t,n).toUpperCase();return[a.depthwiseConv2d(wN("input",e,t,n),wN("filter",e,t,n),[r[1],r[2]],s,o,[i[1],i[2]])]}case"Conv3D":{const r=wN("strides",e,t,n),s=wN("pad",e,t,n),i=wN("dataFormat",e,t,n).toUpperCase(),o=wN("dilations",e,t,n);return[a.conv3d(wN("x",e,t,n),wN("filter",e,t,n),[r[1],r[2],r[3]],s,i,[o[1],o[2],o[3]])]}case"AvgPool":{const r=wN("strides",e,t,n),s=wN("pad",e,t,n),i=wN("kernelSize",e,t,n);return[a.avgPool(wN("x",e,t,n),[i[1],i[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=wN("strides",e,t,n),s=wN("pad",e,t,n),i=wN("kernelSize",e,t,n);return[a.maxPool(wN("x",e,t,n),[i[1],i[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=wN("strides",e,t,n),s=wN("pad",e,t,n),i=wN("kernelSize",e,t,n),o=wN("includeBatchInIndex",e,t,n),{result:u,indexes:l}=a.maxPoolWithArgmax(wN("x",e,t,n),[i[1],i[2]],[r[1],r[2]],s,o);return[u,l]}case"AvgPool3D":{const r=wN("strides",e,t,n),s=wN("pad",e,t,n),i=wN("kernelSize",e,t,n);return[a.avgPool3d(wN("x",e,t,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=wN("strides",e,t,n),s=wN("pad",e,t,n),i=wN("kernelSize",e,t,n);return[a.maxPool3d(wN("x",e,t,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=wN("strides",e,t,n),s=wN("pad",e,t,n),i=wN("dilations",e,t,n),o=r[1],u=r[2],l=i[1],c=i[2];return[a.dilation2d(wN("x",e,t,n),wN("filter",e,t,n),[o,u],s,[l,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"Fill":{const r=wN("shape",e,t,n),s=wN("dtype",e,t,n),i=wN("value",e,t,n);return[a.fill(r,i,s)]}case"LinSpace":{const r=wN("start",e,t,n),s=wN("stop",e,t,n),i=wN("num",e,t,n);return[a.linspace(r,s,i)]}case"Multinomial":{const r=wN("logits",e,t,n),s=wN("numSamples",e,t,n),i=wN("seed",e,t,n);return[a.multinomial(r,s,i)]}case"OneHot":{const r=wN("indices",e,t,n),s=wN("depth",e,t,n),i=wN("onValue",e,t,n),o=wN("offValue",e,t,n),u=wN("dtype",e,t,n);return[a.oneHot(r,s,i,o,u)]}case"Ones":return[a.ones(wN("shape",e,t,n),wN("dtype",e,t,n))];case"OnesLike":return[a.onesLike(wN("x",e,t,n))];case"RandomStandardNormal":return[a.randomStandardNormal(wN("shape",e,t,n),wN("dtype",e,t,n),wN("seed",e,t,n))];case"RandomUniform":return[a.randomUniform(wN("shape",e,t,n),wN("minval",e,t,n),wN("maxval",e,t,n),wN("dtype",e,t,n))];case"Range":{const r=wN("start",e,t,n),s=wN("stop",e,t,n),i=wN("step",e,t,n);return[a.range(r,s,i,wN("dtype",e,t,n))]}case"TruncatedNormal":{const r=wN("shape",e,t,n),s=wN("mean",e,t,n),i=wN("stdDev",e,t,n),o=wN("seed",e,t,n);return[a.truncatedNormal(r,s,i,wN("dtype",e,t,n),o)]}case"Zeros":return[a.zeros(wN("shape",e,t,n),wN("dtype",e,t,n))];case"ZerosLike":return[a.zerosLike(wN("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,a,r=V)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:a,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=mS(e,t,n),c=await r.image.nonMaxSuppressionWithScoreAsync(a,s,i,o,u,l);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:a,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=mS(e,t,n),l=wN("padToMaxOutputSize",e,t,n),c=await r.image.nonMaxSuppressionPaddedAsync(a,s,i,o,u,l);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:a,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=mS(e,t,n);return[await r.image.nonMaxSuppressionAsync(a,s,i,o,u)]}case"Where":{const a=r.cast(wN("condition",e,t,n),"bool"),s=[await r.whereAsync(a)];return a.dispose(),s}case"ListDiff":return r.setdiff1dAsync(wN("x",e,t,n),wN("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"LowerBound":{const r=wN("sortedSequence",e,t,n),s=wN("values",e,t,n);return[a.lowerBound(r,s)]}case"TopKV2":{const r=wN("x",e,t,n),s=wN("k",e,t,n),i=wN("sorted",e,t,n),o=a.topk(r,s,i);return[o.values,o.indices]}case"UpperBound":{const r=wN("sortedSequence",e,t,n),s=wN("values",e,t,n);return[a.upperBound(r,s)]}case"Unique":{const r=wN("x",e,t,n),s=a.unique(r);return[s.values,s.indices]}case"UniqueV2":{const r=wN("x",e,t,n),s=wN("axis",e,t,n),i=a.unique(r,s);return[i.values,i.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"ResizeBilinear":{const r=wN("images",e,t,n),s=wN("size",e,t,n),i=wN("alignCorners",e,t,n),o=wN("halfPixelCenters",e,t,n);return[a.image.resizeBilinear(r,[s[0],s[1]],i,o)]}case"ResizeNearestNeighbor":{const r=wN("images",e,t,n),s=wN("size",e,t,n),i=wN("alignCorners",e,t,n),o=wN("halfPixelCenters",e,t,n);return[a.image.resizeNearestNeighbor(r,[s[0],s[1]],i,o)]}case"CropAndResize":{const r=wN("image",e,t,n),s=wN("boxes",e,t,n),i=wN("boxInd",e,t,n),o=wN("cropSize",e,t,n),u=wN("method",e,t,n),l=wN("extrapolationValue",e,t,n);return[a.image.cropAndResize(r,s,i,o,u,l)]}case"ImageProjectiveTransformV3":{const r=wN("images",e,t,n),s=wN("transforms",e,t,n),i=wN("outputShape",e,t,n),o=wN("fillValue",e,t,n),u=wN("interpolation",e,t,n),l=wN("fillMode",e,t,n);return[a.image.transform(r,s,u.toLowerCase(),l.toLowerCase(),o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=wN("default",e,t,n);return[kN(e.name,t,n)||r];case"Placeholder":return[kN(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[TN(wN("x",e,t,n))];case"IdentityN":return wN("x",e,t,n).map((e=>TN(e)));case"Shape":return[a.tensor1d(wN("x",e,t,n).shape,"int32")];case"ShapeN":return wN("x",e,t,n).map((e=>a.tensor1d(e.shape)));case"Size":return[a.scalar(wN("x",e,t,n).size,"int32")];case"Rank":return[a.scalar(wN("x",e,t,n).rank,"int32")];case"NoOp":return[a.scalar(1)];case"Print":const s=wN("x",e,t,n),i=wN("data",e,t,n),o=wN("message",e,t,n),u=wN("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<i.length;e++)console.log(Array.prototype.slice.call(i[e].dataSync()).slice(0,u));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"Equal":return[a.equal(wN("a",e,t,n),wN("b",e,t,n))];case"NotEqual":return[a.notEqual(wN("a",e,t,n),wN("b",e,t,n))];case"Greater":return[a.greater(wN("a",e,t,n),wN("b",e,t,n))];case"GreaterEqual":return[a.greaterEqual(wN("a",e,t,n),wN("b",e,t,n))];case"Less":return[a.less(wN("a",e,t,n),wN("b",e,t,n))];case"LessEqual":return[a.lessEqual(wN("a",e,t,n),wN("b",e,t,n))];case"LogicalAnd":return[a.logicalAnd(wN("a",e,t,n),wN("b",e,t,n))];case"LogicalNot":return[a.logicalNot(wN("a",e,t,n))];case"LogicalOr":return[a.logicalOr(wN("a",e,t,n),wN("b",e,t,n))];case"Select":case"SelectV2":return[a.where(wN("condition",e,t,n),wN("a",e,t,n),wN("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[a.matMul(wN("a",e,t,n),wN("b",e,t,n),wN("transposeA",e,t,n),wN("transposeB",e,t,n))];case"Einsum":return[a.einsum(wN("equation",e,t,n),...wN("tensors",e,t,n))];case"Transpose":return[a.transpose(wN("x",e,t,n),wN("perm",e,t,n))];case"_FusedMatMul":const[r,s]=wN("fusedOps",e,t,n),i="biasadd"===r,o="prelu"===s,u=wN("numArgs",e,t,n),l=wN("leakyreluAlpha",e,t,n);if(i){if(o&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=wN("args",e,t,n);return[a.fused.matMul({a:wN("a",e,t,n),b:wN("b",e,t,n),transposeA:wN("transposeA",e,t,n),transposeB:wN("transposeB",e,t,n),bias:c,activation:s,preluActivationWeights:h,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"EuclideanNorm":return[a.euclideanNorm(wN("x",e,t,n),wN("axis",e,t,n),wN("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[a.batchNorm(wN("x",e,t,n),wN("mean",e,t,n),wN("variance",e,t,n),wN("offset",e,t,n),wN("scale",e,t,n),wN("epsilon",e,t,n))];case"LRN":return[a.localResponseNormalization(wN("x",e,t,n),wN("radius",e,t,n),wN("bias",e,t,n),wN("alpha",e,t,n),wN("beta",e,t,n))];case"Softmax":return[a.softmax(wN("x",e,t,n))];case"LogSoftmax":return[a.logSoftmax(wN("x",e,t,n))];case"SparseToDense":return[a.sparseToDense(wN("sparseIndices",e,t,n),wN("outputShape",e,t,n),wN("sparseValues",e,t,n),wN("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"Max":{const r=wN("axis",e,t,n),s=wN("keepDims",e,t,n);return[a.max(wN("x",e,t,n),r,s)]}case"Mean":{const r=wN("axis",e,t,n),s=wN("keepDims",e,t,n);return[a.mean(wN("x",e,t,n),r,s)]}case"Min":{const r=wN("axis",e,t,n),s=wN("keepDims",e,t,n);return[a.min(wN("x",e,t,n),r,s)]}case"Sum":{const r=wN("axis",e,t,n),s=wN("keepDims",e,t,n);return[a.sum(wN("x",e,t,n),r,s)]}case"All":{const r=wN("axis",e,t,n),s=wN("keepDims",e,t,n);return[a.all(wN("x",e,t,n),r,s)]}case"Any":{const r=wN("axis",e,t,n),s=wN("keepDims",e,t,n);return[a.any(wN("x",e,t,n),r,s)]}case"ArgMax":{const r=wN("axis",e,t,n);return[a.argMax(wN("x",e,t,n),r)]}case"ArgMin":{const r=wN("axis",e,t,n);return[a.argMin(wN("x",e,t,n),r)]}case"Prod":{const r=wN("axis",e,t,n),s=wN("keepDims",e,t,n);return[a.prod(wN("x",e,t,n),r,s)]}case"Cumprod":{const r=wN("axis",e,t,n),s=wN("exclusive",e,t,n),i=wN("reverse",e,t,n);return[a.cumprod(wN("x",e,t,n),r,s,i)]}case"Cumsum":{const r=wN("axis",e,t,n),s=wN("exclusive",e,t,n),i=wN("reverse",e,t,n);return[a.cumsum(wN("x",e,t,n),r,s,i)]}case"Bincount":const r=wN("x",e,t,n),s=wN("weights",e,t,n),i=wN("size",e,t,n);return[a.bincount(r,s,i)];case"DenseBincount":{const r=wN("x",e,t,n),s=wN("weights",e,t,n),i=wN("size",e,t,n),o=wN("binaryOutput",e,t,n);return[a.denseBincount(r,s,i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=wN("n",e,t,n),s=wN("axis",e,t,n);let i=wN("tensors",e,t,n);return i=i.slice(0,r),[a.concat(i,s)]}case"Gather":{const r=wN("x",e,t,n),s=wN("indices",e,t,n);return[a.gather(r,a.cast(s,"int32"),0)]}case"GatherV2":{const r=wN("axis",e,t,n),s=wN("batchDims",e,t,n),i=wN("x",e,t,n),o=wN("indices",e,t,n);return[a.gather(i,a.cast(o,"int32"),r,s)]}case"Reverse":{const r=wN("dims",e,t,n),s=[];for(let e=0;e<r.length;e++)r[e]&&s.push(e);const i=wN("x",e,t,n);return[a.reverse(i,s)]}case"ReverseV2":{const r=wN("axis",e,t,n),s=wN("x",e,t,n);return[a.reverse(s,r)]}case"Slice":{const r=wN("begin",e,t,n),s=wN("size",e,t,n);return[a.slice(wN("x",e,t,n),r,s)]}case"StridedSlice":{const r=wN("begin",e,t,n),s=wN("end",e,t,n),i=wN("strides",e,t,n),o=wN("beginMask",e,t,n),u=wN("endMask",e,t,n),l=wN("ellipsisMask",e,t,n),c=wN("newAxisMask",e,t,n),h=wN("shrinkAxisMask",e,t,n),p=wN("x",e,t,n);return[a.stridedSlice(p,r,s,i,o,u,l,c,h)]}case"Pack":return go((()=>{const r=wN("axis",e,t,n),s=wN("tensors",e,t,n),i=s[0].shape,o=a.squeeze(s[0]).shape,u=s.map((e=>{const t=le(e.shape,i);if(!t&&!le(a.squeeze(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:a.reshape(e,i)}));return[a.stack(u,r)]}));case"Unpack":{const r=wN("axis",e,t,n),s=wN("tensor",e,t,n);return a.unstack(s,r)}case"Tile":{const r=wN("reps",e,t,n);return[a.tile(wN("x",e,t,n),r)]}case"Split":case"SplitV":{const r=wN("axis",e,t,n),s=wN("numOrSizeSplits",e,t,n),i=wN("x",e,t,n);return a.split(i,s,r)}case"ScatterNd":{const r=wN("indices",e,t,n),s=wN("values",e,t,n),i=wN("shape",e,t,n);return[a.scatterND(r,s,i)]}case"GatherNd":{const r=wN("x",e,t,n),s=wN("indices",e,t,n);return[a.gatherND(r,s)]}case"SparseToDense":{const r=wN("sparseIndices",e,t,n),s=wN("outputShape",e,t,n),i=wN("sparseValues",e,t,n),o=wN("defaultValue",e,t,n);return[a.sparseToDense(r,i,s,i.dtype===o.dtype?o:a.cast(o,i.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:s,emptyRowIndicator:i,reverseIndexMap:o}=a.sparse.sparseFillEmptyRows(wN("indices",e,t,n),wN("values",e,t,n),wN("denseShape",e,t,n),wN("defaultValue",e,t,n));return[r,s,i,o]}case"SparseReshape":{const{outputIndices:r,outputShape:s}=a.sparse.sparseReshape(wN("inputIndices",e,t,n),wN("inputShape",e,t,n),wN("newShape",e,t,n));return[r,s]}case"SparseSegmentMean":return[a.sparse.sparseSegmentMean(wN("data",e,t,n),wN("indices",e,t,n),wN("segmentIds",e,t,n))];case"SparseSegmentSum":return[a.sparse.sparseSegmentSum(wN("data",e,t,n),wN("indices",e,t,n),wN("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"FFT":return[a.fft(wN("x",e,t,n))];case"IFFT":return[a.ifft(wN("x",e,t,n))];case"RFFT":return[a.rfft(wN("x",e,t,n))];case"IRFFT":return[a.irfft(wN("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"StringNGrams":{const{nGrams:r,nGramsSplits:s}=a.string.stringNGrams(wN("data",e,t,n),wN("dataSplits",e,t,n),wN("separator",e,t,n),wN("nGramWidths",e,t,n),wN("leftPad",e,t,n),wN("rightPad",e,t,n),wN("padWidth",e,t,n),wN("preserveShortSequences",e,t,n));return[r,s]}case"StringSplit":{const{indices:r,values:s,shape:i}=a.string.stringSplit(wN("input",e,t,n),wN("delimiter",e,t,n),wN("skipEmpty",e,t,n));return[r,s,i]}case"StringToHashBucketFast":return[a.string.stringToHashBucketFast(wN("input",e,t,n),wN("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return r((()=>((e,t,n,a=V)=>{switch(e.op){case"Cast":return[a.cast(wN("x",e,t,n),wN("dtype",e,t,n))];case"ExpandDims":{const r=wN("axis",e,t,n);return[a.expandDims(wN("x",e,t,n),r)]}case"Squeeze":{const r=wN("axis",e,t,n);return[a.squeeze(wN("x",e,t,n),r)]}case"Reshape":return[a.reshape(wN("x",e,t,n),wN("shape",e,t,n))];case"MirrorPad":return[a.mirrorPad(wN("x",e,t,n),wN("padding",e,t,n),wN("mode",e,t,n))];case"PadV2":case"Pad":return[a.pad(wN("x",e,t,n),wN("padding",e,t,n),wN("constantValue",e,t,n))];case"SpaceToBatchND":{const r=wN("blockShape",e,t,n),s=wN("paddings",e,t,n);return[a.spaceToBatchND(wN("x",e,t,n),r,s)]}case"BatchToSpaceND":{const r=wN("blockShape",e,t,n),s=wN("crops",e,t,n);return[a.batchToSpaceND(wN("x",e,t,n),r,s)]}case"DepthToSpace":{const r=wN("blockSize",e,t,n),s=wN("dataFormat",e,t,n).toUpperCase();return[a.depthToSpace(wN("x",e,t,n),r,s)]}case"BroadcastTo":return[a.broadcastTo(wN("x",e,t,n),wN("shape",e,t,n))];case"BroadcastArgs":return[a.broadcastArgs(wN("s0",e,t,n),wN("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,a)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=wN("keyDType",e,t,n),s=wN("valueDType",e,t,n),i=new gS(r,s);return a.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const r=wN("tableHandle",e,t,n,a),s=wN("keys",e,t,n),i=wN("values",e,t,n),o=a.getHashTableById(r.id);return[await o.import(s,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=wN("tableHandle",e,t,n,a),s=wN("keys",e,t,n),i=wN("defaultValue",e,t,n),o=a.getHashTableById(r.id);return[await o.find(s,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=wN("tableHandle",e,t,n,a);return[a.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,a);case"custom":const s=bN(e.op);if(s&&s.customExecutor)return s.customExecutor(new oS(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Ve(s)?s.then((e=>[].concat(e))):[].concat(s)}class bS{constructor(e={},t={},n={},a={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=a,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function xS(e,t,n,a){const r=new Set,s=[];let i=null,o=null;const u=new Set,l=Object.keys(e).map((e=>NN(e)[0]));let c=[];null!=a&&(c=a.map((e=>NN(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(IS(e)||NS(e)||SS(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),h.push(e))})):s.push(e.name))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:s,dynamicNode:i,syncInputs:o}}const wS=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],kS=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],vS=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function IS(e){return wS.indexOf(e.op)>=0}function NS(e){return kS.indexOf(e.op)>=0}function SS(e){return vS.indexOf(e.op)>=0}class TS{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new TS(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),a=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+a.join(this.SEPERATOR)}compile(e,t){const n=xS(e,t,this.weightMap,this._initNodes),{missingInputs:a,dynamicNode:r,syncInputs:s}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(a.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${a}]`)}return function(e,t,n){const{usedNodes:a,inputs:r}=n,s=[],i=Object.keys(r).map((e=>NN(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{a.has(e.name)&&s.push(e)})),e.weights.forEach((e=>{a.has(e.name)&&s.push(e)})),null!=o&&o.forEach((e=>{a.has(e.name)&&s.push(e)}));const u=new Set,l=[];for(;s.length>0;){const e=s.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&a.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&s.push(e)}))}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const a=n.map((e=>this.graph.nodes[NN(e)[0]])),r=t.map((e=>NN(e)[0]));let s=r.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===s.length&&(s=this._outputs);const i=this.getCompilationKey(a,s);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,s),this.compiledMap.set(i,o));const u={},l={};return go((()=>{const n=new bS(this.weightMap,u,l,this.functionExecutorMap),a=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=NN(t),s=[];s[r]=e[t],a[n]=s}));const s=this.getFrozenTensorIds(a),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!a[t.name]){const e=yS(t,a,n,this._resourceManager);if(Ve(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);a[t.name]=e,this.checkTensorForDisposal(t.name,t,a,n,s,r,i)}}return null==this.parent&&n.dispose(s),t.map((e=>kN(e,a,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,a,r,s,i){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const s=function(e,t,n){return t[IN(e,n.currentContextId)]}(e.name,n,a);null!=s&&s.forEach((e=>{if(e&&!e.kept&&!r.has(e.id)){const n=i[e.id];if(1===n){if(this.keepTensorForDebug){const[n,r]=vN(t.name,a);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][r]=e}else e.dispose();delete i[e.id]}else null!=n&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,a={},r={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=je().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const s=new bS(this.weightMap,a,r,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,s,t,n);const i=t.map((e=>kN(e,this.tensorsMap,s))),o=i.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...o,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&s.dispose(this.keepIds),i}async executeFunctionAsync(e,t,n){const a=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(a,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,a){const r=Object.keys(e),s=r.map((e=>this.graph.nodes[NN(e)[0]])),i=n.map((e=>NN(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:h}=xS(e,o,this.weightMap,this._initNodes),p=[...s,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,a]=NN(t),r=[];r[a]=e[t],d[n]=r}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(s,p,t,d,g,m,i,f,u);await Promise.all(e)}null!=c||a||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!IS(e)&&!kN(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${l}]. ${e}`)}return d}processStack(e,t,n,a,r,s,i,o,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&wN("isConstant",e.node,a,n)&&([c]=vN(e.node.name,n)),null==a[e.node.name]){const h=yS(e.node,a,n,this._resourceManager);c||([c]=vN(e.node.name,n));const p=n.currentContext;Ve(h)?l.push(h.then((l=>(a[c]=l,n.currentContext=p,this.checkTensorForDisposal(c,e.node,a,n,s,i,o),this.processChildNodes(e.node,t,n,a,r,u),l)))):(a[c]=h,this.checkTensorForDisposal(c,e.node,a,n,s,i,o),this.processChildNodes(e.node,t,n,a,r,u))}else this.processChildNodes(e.node,t,n,a,r,u)}return l}processChildNodes(e,t,n,a,r,s){e.children.forEach((e=>{const[i]=vN(e.name,n);!r[i]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!kN(e,a,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!kN(e,a,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[a]=NN(t),r=this.graph.nodes[a];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value;ae(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&ae(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=NN(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=NN(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class CS{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}const $S="?tfjs-format=file",ES="model.json";class _S{constructor(e,t={},n=r){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new CS}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return Ve(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const a=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new TS(jN.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(a),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=jN.Instance.transformGraph(e.modelInitializer);this.initializer=new TS(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e={};return(n instanceof ts?[n]:n).forEach(((t,n)=>e[this.structuredOutputKeys[n]]=t)),e}return n}normalizeInputs(e){if(!(e instanceof ts||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,a)=>(t[n]=e[a],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function AS(e,t={},n=r){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),`${e}${ES}${$S}`}(e));const a=new _S(e,t,n);return await a.load(),a}function RS(e){if(null==e)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");let t;if(e instanceof Array){const[n,a]=e;if(!n)throw new Error("modelJSON must be the first element of the array");if(!(a&&a instanceof ArrayBuffer))throw new Error("An ArrayBuffer of weights must be the second element of the array");if(!("modelTopology"in n))throw new Error("Model JSON is missing 'modelTopology'");if(!("weightsManifest"in n))throw new Error("Model JSON is missing 'weightsManifest'");t=no(Ks(n,Zs(n.weightsManifest),a))}else if("load"in e)t=e;else{if(!("modelTopology"in e&&"weightSpecs"in e&&"weightData"in e))throw new Error("Unknown model format");t=no(e)}const n=new _S(t);return n.load(),n}const FS="3.21.0";function DS(e,t,n=new Map,a=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(a.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(PS(e)){const r=Array.isArray(e)?[]:{};a.add(e);for(const s in e){const i=DS(e[s],t,n,a);r[s]=i}return a.delete(e),e.__proto__&&(r.__proto__=e.__proto__),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function OS(e,t=LS){return MS(e,t)}function MS(e,t,n=new Set){const a=e[0];if(n.has(a))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(PS(a)){const r=Array.isArray(a)?[]:{};n.add(a);for(const s in a){const a=MS(e.map((e=>e[s])),t,n);r[s]=a}return n.delete(a),r}throw new Error(`Can't recurse into non-iterable type: ${a}`)}return r.value}function LS(e){return null===e?null:PS(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function zS(e,t){const n=new Map;DS(e,t,n);for(const e of Array.from(n.keys())){const t=n.get(e);if(Ve(t)){const a=await t;n.set(e,a)}}return DS(e,t,n)}function PS(e){let t=!1;if(je().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:a}=n(551);t=e instanceof a}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof ts)&&!(e instanceof Promise)&&!t)}function BS(e){return e instanceof ts?{value:e.clone(),recurse:!1}:PS(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class WS{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class VS extends WS{constructor(){super(VS.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function US(e){return new jS(e)}function GS(e){return new qS(e)}VS.INITIAL_CAPACITY=32;class HS{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new eT(this,e)}filter(e){return new JS(this,e)}map(e){return new QS(this,e)}mapAsync(e){return new tT(this,e)}serialMapAsync(e){return new tT(this,e).serial()}flatmap(e){return new aT(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new ZS(this,e,t)}columnMajorBatch(e,t=!0,n=LS){return this.rowMajorBatch(e,t).map((e=>OS(e,n)))}concatenate(e,t){return new rT(US([this,e]),t)}take(e){return e<0||null==e?this:new YS(this,e)}skip(e){return e<0||null==e?this:new XS(this,e)}prefetch(e){return new oT(this,e)}shuffle(e,t){return new uT(this,e,t)}serial(){return new KS(this)}}class jS extends HS{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,function(e,t){return DS(e,t)}(t,BS)),done:!1};var t}}class qS extends HS{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class KS extends HS{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class XS extends HS{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;yo(e.value)}return this.upstream.next()}}class YS extends HS{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class ZS extends HS{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class JS extends HS{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;yo(e.value)}}}class QS extends HS{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=ms(e.value),n=this.transform(e.value),a=ms(n);for(const e of t)fs(e,a)||e.dispose();return{value:n,done:!1}}}class eT extends HS{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class tT extends HS{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=ms(e.value),n=await this.transform(e.value),a=ms(n);for(const e of t)fs(e,a)||e.dispose();return{value:n,done:!1}}}class nT extends HS{constructor(){super(),this.outputQueue=new VS,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class aT extends nT{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=ms(e.value),n=this.transform(e.value),a=ms(n);this.outputQueue.pushAll(n);for(const e of t)fs(e,a)||e.dispose();return!0}}class rT extends HS{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var sT;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(sT||(sT={}));class iT extends HS{constructor(e,t=sT.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const a=await zS(this.iterators,(function(e){return e instanceof HS?{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}:{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case sT.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case sT.SHORTEST:return{value:null,done:!0};case sT.LONGEST:}return this.count++,{value:a,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class oT extends HS{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new WS(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class uT extends oT{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Bh.alea(n||Pr().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class lT{constructor(){this.size=null}batch(e,t=!0){const n=this;let a;return ae(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),a=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),cT((async()=>(await n.iterator()).columnMajorBatch(e,t,dT)),a)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,cT((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,cT((async()=>(await t.iterator()).filter((t=>go((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return cT((async()=>(await t.iterator()).map((t=>go((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return cT((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return cT((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,cT((async()=>{return n=GS((async()=>({value:await t.iterator(),done:!1}))).take(e),new rT(n,a);var n,a}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,cT((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const a=this,r=Bh.alea(t||Pr().toString());return cT((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await a.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,cT((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function cT(e,t=null){return new class extends lT{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function hT(e){return cT((async()=>US(e)),e.length)}function pT(e){if(!PS(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return cT((async()=>function(e,t=sT.FAIL){return new iT(e,t)}(await zS(e,(e=>{if(e instanceof lT)return{value:e.iterator(),recurse:!1};if(PS(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})),sT.SHORTEST)),t)}function dT(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof ts||Ne(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof ts?Ip(e):Ls(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}lT.MAX_BUFFER_SIZE=1e4;class fT extends lT{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map((e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e)))}}const mT='"',gT=Symbol("out"),yT=Symbol("field"),bT=Symbol("quote"),xT=Symbol("quoteafterquote"),wT=Symbol("quoteinquote");class kT extends lT{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new fT(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(ae(null==t.delimiter,(()=>"Delimiter should not be provided when delimWhitespace is true.")),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&ae(e.length===this.fullColumnNames.length,(()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+").")),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce(((e,t)=>(e[t]=e[t]+1||1,e)),{}),n=Object.keys(t).filter((e=>t[e]>1));if(ae(0===n.length,(()=>"Duplicate column names found: "+n.toString())),this.columnConfigs)for(const e of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key "'+e+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map((e=>this.makeDataElement(e)))}makeDataElement(e){const t=this.parseRow(e),n={},a={};for(let r=0;r<this.fullColumnNames.length;r++){const s=this.fullColumnNames[r],i=this.columnConfigs?this.columnConfigs[s]:null;if(!this.configuredColumnsOnly||i){const o=t[r];let u=null;if(""===o)if(i&&void 0!==i.default)u=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${s} is empty in this line: ${e}`);u=void 0}else{const e=Number(o);if(isNaN(e))u=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":default:u=e;break;case"int32":u=Math.floor(e);break;case"bool":u=this.getBoolean(o)}else u=e}i&&i.isLabel?a[s]=u:n[s]=u}}return 0===Object.keys(a).length?n:{xs:n,ys:a}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let a=0;const r=e.length;let s=gT;for(let t=0;t<r;t++)switch(s){case gT:switch(e.charAt(t)){case mT:a=t+1,s=bT;break;case this.delimiter:if(a=t+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),s=gT;break;default:s=yT,a=t}break;case yT:e.charAt(t)===this.delimiter&&(n.push(e.substring(a,t)),s=gT,a=t+1);break;case bT:e.charAt(t)===mT&&(s=xT);break;case xT:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(a,t-1)),s=gT,a=t+1;break;case mT:s=bT;break;default:s=wT}break;case wT:e.charAt(t)===mT&&(s=bT)}if(s===xT?n.push(e.substring(a,r-1)):n.push(e.substring(a)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class vT extends HS{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(!je().get("IS_BROWSER"))throw new Error("microphone API is only supported in browser environment.");const t=new vT(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((a=>{const r=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&a({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(r),a({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((e,a)=>n.set(e,a*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(oe(t));return n.set(e,n.length-e.length),Ls(n,t)}}class IT extends HS{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=Cp([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,a=(1-t)/2,r=n+e,s=t+a;this.cropBox=$p([a,n,s,r],[1,4])}else this.cropBox=$p([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(!je().get("IS_BROWSER"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new IT(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&ae("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=Vo(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return go((()=>{const t=Lc(Mi(e,"float32"),0);let n;n=ef.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const a=n.shape;return Al(n,a.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((e=>e.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class NT{}class ST extends HS{split(e){return new TT(this,e)}}class TT extends ST{constructor(e,t){super(),this.upstream=e,this.impl=new CT(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class CT extends nT{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const e of t.slice(0,-1))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class $T extends HS{decodeUTF8(){return new ET(this)}}class ET extends ST{constructor(e){super(),this.upstream=e,this.impl=new _T(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class _T extends nT{constructor(e){if(super(),this.upstream=e,je().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(530);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=je().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class AT extends $T{constructor(e,t={}){super(),this.file=e,this.options=t,ae(e instanceof Uint8Array||!!je().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const a=new FileReader;a.onload=n=>{let r=a.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(r)},a.onabort=e=>t(new Error("Aborted")),a.onerror=e=>t(new Error(e.type));const r=this.file.slice(this.offset,n);a.readAsArrayBuffer(r)}this.offset=n}));return{value:await e,done:!1}}}function RT(e){return"string"==typeof e&&"file://"===e.slice(0,7)}class FT extends NT{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(RT(this.input)&&je().get("IS_NODE")){const e=n(108);this.input=e.readFileSync(this.input.slice(7))}return new AT(this.input,this.options)}}class DT extends NT{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return RT(this.url)?new FT(this.url,this.fileOptions).iterator():async function(e,t={},n){let a,r;var s;"string"==typeof e?a=e:(a=e.url,r={method:(s=e).method,headers:s.headers,body:s.body,mode:s.mode,credentials:s.credentials,cache:s.cache,redirect:s.redirect,referrer:s.referrer,integrity:s.integrity});const i=await(n||Br)(a,r);if(i.ok){const e=new Uint8Array(await i.arrayBuffer());return new AT(e,t)}throw new Error(i.statusText)}(this.url,this.fileOptions)}}function OT(e,t={}){return new kT(new DT(e),t)}function MT(e){const t=GS(e);return cT((async()=>t))}function LT(e){return cT((async()=>{const t=await e();return GS((()=>t.next()))}))}async function zT(e,t){return IT.create(e,t)}async function PT(e){return vT.create(e)}const BT="3.21.0";function WT(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&ae("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const VT=Pp;class UT extends q{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new j(this,po())}nextDataId(){return UT.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,je().get("IS_NODE")&&cr("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const a={id:this.nextDataId()};return this.data.set(a,{values:e,dtype:n,refCount:1}),a}makeTensorInfo(e,t,n){let a;if("string"===t&&null!=n&&n.length>0&&Ce(n[0])){const r=n.map((e=>Wr(e)));a=this.write(r,e,t)}else a=this.write(n,e,t);return{dataId:a,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,a,r){this.data.set(e,{values:t,dtype:a,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?Rf(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Vr(e)));return Oi(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Oi(e.shape,e.dtype,t)}makeOutput(e,t,n){return po().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Pr();return e(),{kernelMs:Pr()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){WT([e],"where");const t=this.readSync(e.dataId);return VT(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function GT(e,t,n){return({inputs:a,attrs:r,backend:s})=>{const{x:i}=a;if(WT(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=s,u=o.data.get(i.dataId).values,l=oe(i.shape),c=n||i.dtype,h=we(c,l);for(let e=0;e<l;++e)h[e]=t(u[e],r);return o.makeTensorInfo(i.shape,c,h)}}function HT(e,t,n){return({inputs:a,attrs:r,backend:s})=>{const{x:i}=a;if(WT(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=s,u=o.data.get(i.dataId).values,l=n||i.dtype,c=t(u,l,r);return o.makeTensorInfo(i.shape,l,c)}}UT.nextDataId=0,To("cpu",(()=>new UT),1);const jT=GT(Kt,(e=>e>=0?e:Math.exp(e)-1)),qT={kernelName:Kt,backendName:"cpu",kernelFunc:jT};function KT(e){const{inputs:t,backend:n}=e,{x:a}=t;return n.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}const XT={kernelName:pn,backendName:"cpu",kernelFunc:KT};function YT(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{alpha:s}=a;WT([r],"leakyRelu");const i=oe(r.shape),o=n.data.get(r.dataId).values,u=xe("float32",i);for(let e=0;e<o.length;e++)u[e]=o[e]<0?s*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",u)}const ZT={kernelName:bn,backendName:"cpu",kernelFunc:YT};function JT(e){return(t,n,a,r,s)=>{const i=Mo(t,n),o=i.length,u=Fe(i),l=xe(s,oe(i)),c=t.length,h=n.length,p=Fe(t),d=Fe(n),f=Do(t,i),m=Do(n,i);if(f.length+m.length===0)for(let t=0;t<l.length;++t)l[t]=e(a[t%a.length],r[t%r.length]);else for(let t=0;t<l.length;++t){const n=We(t,o,u),s=n.slice(-c);f.forEach((e=>s[e]=0));const i=Be(s,c,p),g=n.slice(-h);m.forEach((e=>g[e]=0));const y=Be(g,h,d);l[t]=e(a[i],r[y])}return[l,i]}}const QT=JT(((e,t)=>e<0?t*e:e));function eC(e){const{inputs:t,backend:n}=e,{x:a,alpha:r}=t;WT([a,r],"prelu");const s=n.data.get(a.dataId).values,i=n.data.get(r.dataId).values,[o,u]=QT(a.shape,r.shape,s,i,"float32");return n.makeTensorInfo(u,"float32",o)}const tC={kernelName:aa,backendName:"cpu",kernelFunc:eC},nC=GT(ca,(e=>Math.max(0,e))),aC={kernelName:ca,backendName:"cpu",kernelFunc:nC},rC=GT(ga,(e=>Math.min(Math.max(0,e),6))),sC={kernelName:ga,backendName:"cpu",kernelFunc:rC};function iC(e){return(t,n,a)=>{const r=xe(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],a);return r}}const oC=iC((e=>1/(1+Math.exp(-e)))),uC=GT($a,(e=>1/(1+Math.exp(-e)))),lC={kernelName:$a,backendName:"cpu",kernelFunc:uC};function cC(e,t,n,a,r){if("linear"===n)return KT({inputs:{x:t},backend:e});if("relu"===n)return nC({inputs:{x:t},backend:e});if("elu"===n)return jT({inputs:{x:t},backend:e});if("relu6"===n)return rC({inputs:{x:t},backend:e});if("prelu"===n)return eC({inputs:{x:t,alpha:a},backend:e});if("leakyrelu"===n)return YT({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return uC({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function hC(e){const{inputs:t,backend:n}=e,{real:a,imag:r}=t,s=n.data.get(a.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(a.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(a.shape,"float32",s),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const pC={kernelName:It,backendName:"cpu",kernelFunc:hC};function dC(e,t,n="float32"){if("complex64"===n)return hC({inputs:{real:dC(e,t,"float32"),imag:dC(e,t,"float32")},backend:e});const a=Le(oe(t),n);return e.makeTensorInfo(t,n,a)}function fC(e){const{inputs:t,backend:n}=e,{input:a}=t,r=n.data.get(a.dataId).complexTensorInfos.real,s=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,s)}const mC={kernelName:ua,backendName:"cpu",kernelFunc:fC};function gC(e,t,n,a){if("int32"===a)return[t,"int32",Int32Array.from(e)];if("bool"===a){const a=zr([0],n),[r,s]=JT(((e,t)=>e!==t?1:0))(t,[],e,a,"bool");return[s,"bool",r]}throw new Error(`Error in Cast: failed to cast ${n} to ${a}`)}function yC(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dtype:s}=a;if("complex64"===s){if("complex64"===r.dtype)return KT({inputs:{x:r},backend:n});const e=dC(n,r.shape,r.dtype),t=yC({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),a=hC({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),a}if("complex64"===r.dtype){const e=fC({inputs:{input:r},backend:n}),t=yC({inputs:{x:e},backend:n,attrs:{dtype:s}});return n.disposeIntermediateTensorInfo(e),t}if(!Ie(r.dtype,s)){const e=KT({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}const i=n.data.get(r.dataId).values,[o,u,l]=gC(i,r.shape,r.dtype,s);return n.makeTensorInfo(o,u,l)}const bC={kernelName:wt,backendName:"cpu",kernelFunc:yC};function xC(e,t,n,a){return null==n?({inputs:n,backend:r})=>{const{a:s,b:i}=n,o=r;WT([s,i],e);const u=o.data.get(s.dataId).values,l=o.data.get(i.dataId).values,c="string"===s.dtype?pm(u):u,h="string"===s.dtype?pm(l):l,p=a||s.dtype,[d,f]=t(s.shape,i.shape,c,h,p);return o.makeTensorInfo(f,p,d)}:({inputs:e,backend:r})=>{const{a:s,b:i}=e,o=r;if("complex64"===s.dtype||"complex64"===i.dtype){const e=yC({inputs:{x:s},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),a=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,u=o.data.get(a.dataId).values,l=o.data.get(r.dataId).values,c=yC({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(s.shape,i.shape,u,l,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),k=hC({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),k}{const e=o.data.get(s.dataId).values,n=o.data.get(i.dataId).values,r=a||s.dtype,[u,l]=t(s.shape,i.shape,e,n,r);return o.makeTensorInfo(l,r,u)}}}function wC(e){return(t,n,a,r,s,i)=>{const o=Mo(t,n),u=oe(o),l=o.length,c=Fe(o),h=xe("float32",u),p=xe("float32",u),d=Do(t,o),f=Do(n,o),m=Rf(a,r),g=Rf(s,i),y=t.length,b=Fe(t),x=n.length,w=Fe(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,a=t%g.length,r=e(m[2*n],m[2*n+1],g[2*a],g[2*a+1]);h[t]=r.real,p[t]=r.imag}else for(let t=0;t<h.length;t++){const n=We(t,l,c),a=n.slice(-y);d.forEach((e=>a[e]=0));const r=Be(a,y,b),s=n.slice(-x);f.forEach((e=>s[e]=0));const i=Be(s,x,w),o=e(m[2*r],m[2*r+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const kC=JT(((e,t)=>e+t)),vC=wC(((e,t,n,a)=>({real:e+n,imag:t+a}))),IC=xC(et,kC,vC),NC={kernelName:et,backendName:"cpu",kernelFunc:IC};function SC(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{shape:s}=a,i=oe(r.shape),o=ge(s,i),u=oe(o);ae(i===u,(()=>`The new shape (${o}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const l=n.data.get(r.dataId);if(null!=l.complexTensorInfos){const e=l.complexTensorInfos.real,t=l.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const TC={kernelName:ha,backendName:"cpu",kernelFunc:SC};function CC(e){const{inputs:t,backend:n,attrs:a}=e,{a:r,b:s}=t,{transposeA:i,transposeB:o}=a;WT([r,s],"matMul");const u=r.shape.length,l=s.shape.length,c=i?r.shape[u-2]:r.shape[u-1],h=o?s.shape[l-1]:s.shape[l-2],p=i?r.shape[u-1]:r.shape[u-2],d=o?s.shape[l-2]:s.shape[l-1],f=r.shape.slice(0,-2),m=s.shape.slice(0,-2),g=oe(f),y=oe(m),b=Mo(r.shape.slice(0,-2),s.shape.slice(0,-2)).concat([p,d]);ae(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${s.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=SC({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),k=SC({inputs:{x:s},backend:n,attrs:{shape:x}}),v=i?w.shape[1]:w.shape[2],I=i?w.shape[2]:w.shape[1],N=o?k.shape[1]:k.shape[2],S=Math.max(g,y),T=n.data.get(w.dataId).values,C=n.data.get(k.dataId).values,$=Fe(w.shape),E=Fe(k.shape),[_,A,R]=i?[$[0],1,$[1]]:[$[0],$[1],1],[F,D,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*N,L=Oi([S,I,N],w.dtype),z=L.values,P=n.blockSize;for(let e=0;e<S;e++)for(let t=0;t<I;t+=P)for(let n=0;n<N;n+=P)for(let a=0;a<v;a+=P){const r=Math.min(t+P,I),s=Math.min(n+P,N),i=Math.min(a+P,v);for(let o=t;o<r;o++)for(let t=n;t<s;t++){let n=0;for(let r=a;r<i;r++){const a=Math.min(e,g-1)*_,s=Math.min(e,y-1)*O;n+=T[a+o*A+r*R]*C[r*F+t*D+s]}z[e*M+(o*N+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const $C={kernelName:mt,backendName:"cpu",kernelFunc:CC},EC={kernelName:or,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{a:r,b:s,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=a;let p,d,f;const m=[];p=CC({inputs:{a:r,b:s},attrs:{transposeA:u,transposeB:l},backend:n}),i&&(d=IC({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=cC(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function _C(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const AC={kernelName:Ze,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;WT(t,"abs");let a=new Float32Array(oe(t.shape));return a=_C(n.data.get(t.dataId).values),n.makeOutput(a,t.shape,t.dtype)}},RC=GT(Je,(e=>Math.acos(e))),FC={kernelName:Je,backendName:"cpu",kernelFunc:RC},DC=GT(Qe,(e=>Math.acosh(e))),OC={kernelName:Qe,backendName:"cpu",kernelFunc:DC},MC={kernelName:tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,a=t;WT(t,"addN");const r=a.map((e=>n.data.get(e.dataId).values)),s=Oi(a[0].shape,a[0].dtype),i=s.values;for(let e=0;e<a.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(s.shape,s.dtype,s.values)}};function LC(e,t,n,a,r){const s=t.length,i=oe(t),o=Fe(t),u=Fe(r),l=xe(n,oe(r));for(let t=0;t<i;++t){const n=We(t,s,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[a[e]];l[Be(r,s,u)]=e[t]}return l}function zC(e){const{inputs:t,attrs:n,backend:a}=e,{x:r}=t,{perm:s}=n;WT(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[s[e]];const u=LC(a.data.get(r.dataId).values,r.shape,r.dtype,s,o);return{dataId:a.write(u,o,r.dtype),shape:o,dtype:r.dtype}}const PC={kernelName:Ja,backendName:"cpu",kernelFunc:zC},BC={kernelName:nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:i}=a;WT(r,"all");const o=ye(s,r.shape);let u=o;const l=Cc(u,r.shape.length);let c=r;null!=l&&(c=zC({inputs:{x:r},backend:n,attrs:{perm:l}}),u=Ec(u.length,r.shape.length)),Tc("all",u,c.shape.length);const[h,p]=Nc(c.shape,u),d=oe(p),f=Le(oe(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const a=m[t+e];n=n&&a}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=SC({inputs:{x:g},backend:n,attrs:{shape:Sc(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},WC={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:i}=a;WT(r,"any");const o=ye(s,r.shape);let u=o;const l=Cc(u,r.shape.length);let c=r;null!=l&&(c=zC({inputs:{x:r},backend:n,attrs:{perm:l}}),u=Ec(u.length,r.shape.length)),Tc("any",u,c.shape.length);const[h,p]=Nc(c.shape,u),d=oe(p),f=Le(oe(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const a=m[t+e];n=n||a}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=SC({inputs:{x:g},backend:n,attrs:{shape:Sc(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},VC={kernelName:rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s}=a;WT(r,"argMax");let i=ye(s,r.shape);const o=Cc(i,r.shape.length);let u=r;const l=[];null!=o&&(u=zC({inputs:{x:r},backend:n,attrs:{perm:o}}),l.push(u),i=Ec(i.length,u.shape.length)),i=[i[0]],Tc("argMax",i,u.shape.length);const[c,h]=Nc(u.shape,i),p=Le(oe(c),"int32"),d=oe(h),f=n.data.get(u.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],a=0;for(let e=0;e<d;++e){const r=f[t+e];r>n&&(n=r,a=e)}p[e]=a}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},UC={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s}=a;WT(r,"argMin");let i=ye(s,r.shape);const o=Cc(i,r.shape.length);let u=r;const l=[];null!=o&&(u=zC({inputs:{x:r},backend:n,attrs:{perm:o}}),l.push(u),i=Ec(i.length,u.shape.length)),i=[i[0]],Tc("argMin",i,u.shape.length);const[c,h]=Nc(u.shape,i),p=Le(oe(c),"int32"),d=oe(h),f=n.data.get(u.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],a=0;for(let e=0;e<d;++e){const r=f[t+e];r<n&&(n=r,a=e)}p[e]=a}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},GC=GT(it,(e=>Math.asin(e))),HC={kernelName:it,backendName:"cpu",kernelFunc:GC},jC=GT(ot,(e=>Math.asinh(e))),qC={kernelName:ot,backendName:"cpu",kernelFunc:jC},KC=GT(ut,(e=>Math.atan(e))),XC={kernelName:ut,backendName:"cpu",kernelFunc:KC},YC=JT(((e,t)=>Math.atan2(e,t))),ZC=xC(ct,YC),JC={kernelName:ct,backendName:"cpu",kernelFunc:ZC},QC=GT(lt,(e=>Math.atanh(e))),e$={kernelName:lt,backendName:"cpu",kernelFunc:QC};function t$(e,t,n,a,r,s){const i=r.strideHeight,o=r.strideWidth,u=r.dilationHeight,l=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Oi(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*a[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const w=y*i-p,k=Math.max(0,w),v=Math.min(r.inHeight,c+w),I=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=k;n<v;n+=u){const r=m+n*a[1];for(let n=c;n<p;n+=l){const i=e[r+n*a[2]+t];"max"===s&&i>y?y=i:"avg"===s&&(b+=i,w++)}if(isNaN(y))break}g[I+n*x+t]="avg"===s?b/w:y}}}return m}function n$(e,t,n,a,r=!1,s=!1){const i=Oi(a.outShape,"int32"),o=a.strideHeight,u=a.strideWidth,l=a.dilationHeight,c=a.dilationWidth,h=a.effectiveFilterHeight,p=a.effectiveFilterWidth,d=a.padInfo.top,f=a.padInfo.left,m=Oi(t,n,e);for(let e=0;e<a.batchSize;++e)for(let t=0;t<a.inChannels;++t)for(let n=0;n<a.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=l;const b=Math.min(a.inHeight,h+g);for(let o=0;o<a.outWidth;++o){const h=o*u-f;let d=h;for(;d<0;)d+=c;const x=Math.min(a.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=l){const i=n-g;for(let o=d;o<x;o+=c){const u=o-h,l=m.get(e,n,o,t);l>w&&(w=l,k=r?s?((e*a.inHeight+n)*a.inWidth+o)*a.inChannels+t:(n*a.inWidth+o)*a.inChannels+t:i*p+u)}}i.set(k,e,n,o,t)}}return i}function a$(e,t,n,a,r,s){const i=r.strideDepth,o=r.strideHeight,u=r.strideWidth,l=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Oi(r.outShape,n),w=x.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],v=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],N=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,x=t*a[0];for(let t=0;t<r.inChannels;++t)for(let k=0;k<r.outDepth;++k){const S=k*i-m;let T=S;for(;T<0;)T+=l;const C=Math.min(r.inDepth,p+S),$=n+k*v;for(let n=0;n<r.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),k=$+n*I;for(let n=0;n<r.outWidth;++n){const i=n*u-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=k+n*N;let v=b,I=0,S=0;for(let n=T;n<C;n+=l){const r=x+n*a[1];for(let n=p;n<m;n+=c){const i=r+n*a[2];for(let n=o;n<d;n+=h){const r=e[i+n*a[3]+t];if("max"===s&&r>v?v=r:"avg"===s&&(I+=r,S++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===s?I/S:v}}}}return x}const r$={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t;WT(r,"avgPool");const{filterSize:s,strides:i,pad:o,dimRoundingMode:u}=a;ae($l(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=bl(r.shape,s,i,1,o,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&le(l.inShape,l.outShape))c=KT({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Fe(r.shape),a=t$(e,r.shape,r.dtype,t,l,"avg");c=n.makeTensorInfo(l.outShape,r.dtype,a.values)}return c}},s$={kernelName:dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=a;WT(r,"avgPool3d");const c=xl(r.shape,s,i,1,o,u,l),h=a$(n.data.get(r.dataId).values,r.shape,r.dtype,Fe(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}},i$={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=a;WT([r,s],"avgPool3DGrad");const c=xl(s.shape,i,o,1,u,l),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,I=w-1-c.padInfo.front,N=v-1-c.padInfo.left,S=k-1-c.padInfo.top,T=Oi(s.shape,"float32"),C=1/(f*m*g),$=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let a=0;a<c.inHeight;++a)for(let r=0;r<c.inWidth;++r){const s=n-I,i=a-S,o=r-N;let u=0;for(let n=0;n<w;n+=y){const a=(s+n)/h;if(!(a<0||a>=c.outDepth||Math.floor(a)!==a))for(let n=0;n<k;n+=b){const r=(i+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<v;n+=x){const s=(o+n)/d;s<0||s>=c.outWidth||Math.floor(s)!==s||(u+=$.get(e,a,r,s,t))}}}T.set(u*C,e,n,a,r,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}},o$={kernelName:pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,i=s;WT([r,s],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=a,c=bl(i.shape,o,u,1,l),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=Oi(i.shape,"float32"),v=1/(d*f),I=n.data.get(r.dataId).values,N=Oi(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let a=0;a<c.inWidth;++a){const r=n-w,s=a-x;let i=0;for(let n=0;n<y;n+=m){const a=(r+n)/h;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let n=0;n<b;n+=g){const r=(s+n)/p;r<0||r>=c.outWidth||Math.floor(r)!==r||(i+=N.get(e,a,r,t))}}k.set(i*v,e,n,a,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},u$={kernelName:on,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,scale:s,offset:i,mean:o,variance:u}=t;ae(o.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ae(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ae(null==s||o.shape.length===s.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),WT([r,o,u,s,i],"batchNorm");let{varianceEpsilon:l}=a;null==l&&(l=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(u.dataId).values,d=s?n.data.get(s.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,k=0,v=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[k++])*d[v++]/Math.sqrt(p[I++]+l),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),I>=b&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function l$(e,t,n,a,r){const s=ou(a,t,n),i=oe(n),o=Fe(a);if(s){const n=uu(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const u=Oi(a,r,"string"===r?pm(e):e),l=Oi(n,r);for(let e=0;e<l.size;++e){const n=l.indexToLoc(e),a=n.map(((e,n)=>e+t[n]));l.set(u.get(...a),...n)}return"string"===r?dm(l.values):l.values}function c$(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:s,size:i}=a;WT(r,"slice");const[o,u]=lu(r,s,i);Xo(r,o,u);const l=l$(n.data.get(r.dataId).values,o,u,r.shape,r.dtype);return n.makeTensorInfo(u,r.dtype,l)}const h$={kernelName:Na,backendName:"cpu",kernelFunc:c$},p$={kernelName:gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:s,crops:i}=a;WT([r],"batchToSpaceND");const o=s.reduce(((e,t)=>e*t)),u=xf(r.shape,s,o),l=wf(u.length,s.length),c=kf(r.shape,s,o),h=vf(i,s.length),p=If(c,i,s.length),d=SC({inputs:{x:r},backend:n,attrs:{shape:u}}),f=zC({inputs:{x:d},backend:n,attrs:{perm:l}}),m=SC({inputs:{x:f},backend:n,attrs:{shape:c}}),g=c$({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function d$(e,t,n,a,r){const s=oe(a),i=Le(r,n);for(let n=0;n<e.length;n++){const a=e[n];if(a<0)throw new Error("Input x must be non-negative!");a>=r||(i[a]+=s>0?t[n]:1)}return i}function f$(e,t,n,a=!1){const r=e.shape[0],s=e.shape[1],i=Oi([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<s;r++){const s=e.get(o,r);if(s<0)throw new Error("Input x must be non-negative!");s>=n||(a?i.set(1,o,s):t.size>0?i.set(i.get(o,s)+t.get(o,r),o,s):i.set(i.get(o,s)+1,o,s))}return i}const m$={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,weights:s}=t,{size:i}=a,o=d$(n.data.get(r.dataId).values,n.data.get(s.dataId).values,s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,o)}},g$={kernelName:xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:a,s1:r}=t,s=n.data.get(a.dataId).values,i=n.data.get(r.dataId).values,o=Mo(Array.from(s),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},y$=iC((e=>Math.ceil(e))),b$=HT(kt,y$),x$={kernelName:kt,backendName:"cpu",kernelFunc:b$},w$=GT(vt,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),k$={kernelName:vt,backendName:"cpu",kernelFunc:w$},v$={kernelName:Nt,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,a=new Float32Array(oe(t.shape)),r=n.data.get(t.dataId),s=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(s.dataId).values,u=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=u[e];a[e]=Math.hypot(t,n)}return n.makeOutput(a,t.shape,"float32")}};function I$(e,t,n,a){const r=we(n,oe(t));if(a&&"string"!==n){let t=0;e.forEach((e=>{const n=oe(e.shape);r.set(e.vals,t),t+=n}))}else{let a=0;e.forEach((e=>{const s="string"===n?pm(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+a;for(let t=0;t<e.shape[1];++t)r[o+t]=s[i++]}a+=e.shape[1]}))}return r}function N$(e){const{inputs:t,backend:n}=e,{input:a}=t,r=n.data.get(a.dataId).complexTensorInfos.imag,s=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,s)}const S$={kernelName:fn,backendName:"cpu",kernelFunc:N$};function T$(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a,s=ye(r,t[0].shape)[0];lf(t.map((e=>e.shape)),s);let i=cf(t.map((e=>e.shape)),s);if(0===oe(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>oe(e.shape)>0));if(1===o.length)return KT({inputs:{x:o[0]},backend:n});if("complex64"===o[0].dtype){const e=o.map((e=>fC({inputs:{input:e},backend:n}))),t=o.map((e=>N$({inputs:{input:e},backend:n}))),a=T$({inputs:e,backend:n,attrs:{axis:s}}),r=T$({inputs:t,backend:n,attrs:{axis:s}}),i=hC({inputs:{real:a,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}const u=o.map((e=>{const t=oe(e.shape.slice(s));return SC({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),l=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=cf(u.map((e=>e.shape)),1);const c=1===u[0].shape[0],h=I$(l,i,t[0].dtype,c),p=cf(o.map((e=>e.shape)),s),d=n.makeTensorInfo(p,t[0].dtype,h);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const C$={kernelName:St,backendName:"cpu",kernelFunc:T$};function $$(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=a;WT([r,s],"conv2d");const h=El(u),p=wl(r.shape,s.shape,i,l,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new Zr(p.outShape,r.dtype),k=Fe(r.shape),v=Fe(s.shape),I=k[0],N=x?k[1]:k[2],S=x?k[2]:1,T=x?1:k[1],C=w.strides[0],$=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,_=x?1:w.strides[1],A=n.data.get(r.dataId).values,R=n.data.get(s.dataId).values,F=w.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*C;for(let e=0;e<p.outHeight;++e){const a=n+e*$,r=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const s=e*v[0],i=t+n*N;for(let e=0;e<p.outWidth;++e){const t=a+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const a=n+e*g;if(a<0||a>=p.inWidth)continue;const r=i+a*S;let o=s+e*v[1];for(let e=0;e<p.inChannels;++e){const n=A[r+e*T];for(let e=0;e<p.outChannels;++e)F[t+e*_]+=n*R[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const E$={kernelName:Tt,backendName:"cpu",kernelFunc:$$},_$={kernelName:Ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=a;WT([r,s],"conv2dBackpropFilter");const h=El(u),p=wl(r.shape,c,i,1,o,l,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new Zr(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,k=n.data.get(r.dataId).values,v=n.data.get(s.dataId).values,I=new Zr(r.shape,r.dtype,k),N=new Zr(s.shape,s.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let a=0;a<g;++a){const r=Math.max(0,Math.ceil((x-a)/f)),s=Math.min(p.outWidth,(p.inWidth+x-a)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let u=0;for(let l=0;l<p.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=r;e<s;++e){const n=a+e*f-x;u+=y?I.get(l,t,n,i)*N.get(l,c,e,o):I.get(l,i,t,n)*N.get(l,o,c,e)}}b.set(u,e,a,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},A$={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=a;WT([r,s],"conv2dBackpropInput");const h=Fe(s.shape),p=Fe(r.shape);let d=El(l);const f=wl(i,s.shape,o,1,u,c,!1,d),m=new Zr(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(s.dataId).values,[x,w,k]=h,{batchSize:v,filterHeight:I,filterWidth:N,inChannels:S,inHeight:T,inWidth:C,outChannels:$,outHeight:E,outWidth:_,strideHeight:A,strideWidth:R}=f;d=f.dataFormat;const F=I-1-f.padInfo.top,D=N-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,P=O?1:m.strides[1],B=p[0],W=O?p[1]:p[2],V=O?p[2]:1,U=O?1:p[1];for(let e=0;e<v;++e)for(let t=0;t<S;++t)for(let n=0;n<T;++n){const a=n-F,r=Math.max(0,Math.ceil(a/A)),s=Math.min(E,(I+a)/A);for(let i=0;i<C;++i){const o=i-D,u=Math.max(0,Math.ceil(o/R)),l=Math.min(_,(N+o)/R);let c=0;for(let n=r;n<s;++n){const r=n*A-a;for(let a=u;a<l;++a){const s=B*e+W*n+V*a,i=x*(I-1-r)+w*(N-1-(a*R-o))+k*t;for(let e=0;e<$;++e)c+=y[s+U*e]*b[i+e]}}g[M*e+L*n+z*i+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},R$={kernelName:Et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:i,pad:o,dilations:u}=a;WT([r,s],"conv3d");const l=kl(r.shape,s.shape,i,u,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=l,y=g.front,b=g.left,x=g.top,w=new Zr(l.outShape,r.dtype),k=n.data.get(r.dataId).values,v=n.data.get(s.dataId).values,I=w.values,N=Fe(r.shape),S=Fe(s.shape);for(let e=0;e<l.batchSize;++e){const t=e*N[0],n=e*w.strides[0];for(let e=0;e<l.outDepth;++e){const a=n+e*w.strides[1],r=e*l.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*d;if(n<0||n>=l.inDepth)continue;const s=e*S[0],i=t+n*N[1];for(let e=0;e<l.outHeight;++e){const t=a+e*w.strides[2],n=e*l.strideHeight-x;for(let e=0;e<h;++e){const a=n+e*f;if(a<0||a>=l.inHeight)continue;const r=s+e*S[1],o=i+a*N[2];for(let e=0;e<l.outWidth;++e){const n=t+e*l.outChannels,a=e*l.strideWidth-b;for(let e=0;e<p;++e){const t=a+e*m;if(t<0||t>=l.inWidth)continue;const s=r+e*S[2],i=o+t*l.inChannels;let u=s;for(let e=0;e<l.inChannels;++e){const t=k[i+e];for(let e=0;e<l.outChannels;++e)I[n+e]+=t*v[u+e];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},F$={kernelName:_t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:i,pad:o,filterShape:u}=a;WT([r,s],"conv3dBackpropFilterV2");const l=Fe(r.shape),c=Fe(s.shape),h=kl(r.shape,u,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new Zr(h.filterShape,"float32"),x=b.values,[w,k,v,I]=b.strides,N=n.data.get(s.dataId).values,[S,T,C,$]=c,E=n.data.get(r.dataId).values,[_,A,R,F]=l,D=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((D-e)/p)),n=Math.min(h.outDepth,(h.inDepth+D-e)/p),a=e*w;for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((M-r)/d)),i=Math.min(h.outHeight,(h.inHeight+M-r)/d),o=r*k+a;for(let a=0;a<y;++a){const u=Math.max(0,Math.ceil((O-a)/f)),l=Math.min(h.outWidth,(h.inWidth+O-a)/f),c=a*v+o;for(let o=0;o<h.inChannels;++o){const m=o*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*_,y=m*S;for(let m=t;m<n;++m){const t=(e+m*p-D)*A+h,n=m*T+y;for(let e=s;e<i;++e){const s=(r+e*d-M)*R+t,i=e*C+n;for(let e=u;e<l;++e){const t=e*$+i;g+=E[(a+e*f-O)*F+s+o]*N[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},D$={kernelName:At,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{pad:i,strides:o,inputShape:u}=a;WT([r],"conv3dBackpropInputV2");const l=Fe(r.shape),c=Fe(s.shape),h=kl(u,s.shape,o,1,i),p=new Zr(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,k,v]=l,I=n.data.get(s.dataId).values,[N,S,T,C]=c,{batchSize:$,filterDepth:E,filterHeight:_,filterWidth:A,inChannels:R,inDepth:F,inHeight:D,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:P,strideDepth:B,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=_-1-h.padInfo.top,H=A-1-h.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<R;++t)for(let n=0;n<F;++n){const a=n-U,r=Math.max(0,Math.ceil(a/B)),s=Math.min(L,(E+a)/B);for(let i=0;i<D;++i){const o=i-G,u=Math.max(0,Math.ceil(o/W)),l=Math.min(z,(_+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/V)),$=Math.min(P,(A+h)/V);let R=0;for(let n=r;n<s;++n){const r=n*B-a;for(let a=u;a<l;++a){const s=a*W-o;for(let i=p;i<$;++i){const o=x*e+w*n+k*a+v*i,u=N*(E-1-r)+S*(_-1-s)+T*(A-1-(i*V-h))+C*t;for(let e=0;e<M;++e)R+=b[o+e]*I[u+e]}}}d[f*e+m*n+g*i+y*c+t]=R}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},O$=GT(Rt,(e=>Math.cos(e))),M$={kernelName:Rt,backendName:"cpu",kernelFunc:O$},L$=GT(Ft,(e=>Math.cosh(e))),z$={kernelName:Ft,backendName:"cpu",kernelFunc:L$},P$={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{image:r,boxes:s,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=a,[c,h,p,d]=r.shape,f=s.shape[0],[m,g]=o,y=Oi([f,m,g,d],"float32"),b=n.data.get(s.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,k=Fe(r.shape),v=Fe(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],a=b[t+1],r=b[t+2],s=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(s-a)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let a=0;a<d;a++){const r=a+n*v[2]+t*v[1]+e*v[0];y.values[r]=l}else if("bilinear"===u){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let u=0;u<g;u++){const c=g>1?a*(p-1)+u*f:.5*(a+s)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const a=n+u*v[2]+t*v[1]+e*v[0];y.values[a]=l}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let a=0;a<d;a++){let s=a+h*k[2]+n*k[1]+i*k[0];const l=w[s];s=a+m*k[2]+n*k[1]+i*k[0];const c=w[s];s=a+h*k[2]+r*k[1]+i*k[0];const p=w[s];s=a+m*k[2]+r*k[1]+i*k[0];const d=l+(c-l)*b,f=p+(w[s]-p)*b;s=a+u*v[2]+t*v[1]+e*v[0],y.values[s]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const r=g>1?a*(p-1)+n*f:.5*(a+s)*(p-1);if(r<0||r>p-1){for(let a=0;a<d;a++){const r=a+n*v[2]+t*v[1]+e*v[0];y.values[r]=l}continue}const o=Math.round(r),u=Math.round(c);for(let a=0;a<d;a++){const r=a+o*k[2]+u*k[1]+i*k[0],s=a+n*v[2]+t*v[1]+e*v[0];y.values[s]=w[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},B$={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,exclusive:i,reverse:o}=a;WT(r,"cumprod");const u=Cc([s],r.shape.length);let l=r;null!=u&&(l=zC({inputs:{x:r},backend:n,attrs:{perm:u}}));const c=Ec(1,r.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const h=cs(l.dtype,"int32"),p=Me(oe(l.shape),h),d=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?1:d[n];else{const a=m(e,t-1);p[n]=i?d[a]*p[a]:d[n]*p[a]}}const g=n.makeTensorInfo(l.shape,h,p);if(null!=u){const e=zC({inputs:{x:g},backend:n,attrs:{perm:$c(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}},W$={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,exclusive:i,reverse:o}=a;WT(r,"cumsum");const u=Cc([s],r.shape.length);let l=r;null!=u&&(l=zC({inputs:{x:r},backend:n,attrs:{perm:u}}));const c=Ec(1,r.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const h=cs(l.dtype,"int32"),p=Le(oe(l.shape),h),d=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?0:d[n];else{const a=m(e,t-1);p[n]=i?d[a]+p[a]:d[n]+p[a]}}const g=n.makeTensorInfo(l.shape,h,p);if(null!=u){const e=zC({inputs:{x:g},backend:n,attrs:{perm:$c(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}},V$={kernelName:Lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,weights:s}=t,{size:i,binaryOutput:o}=a;if(1===r.shape.length){const e=d$(n.data.get(r.dataId).values,n.data.get(s.dataId).values,s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,e)}if(2===r.shape.length){const e=f$(n.bufferSync(r),n.bufferSync(s),i,o);return n.makeTensorInfo(e.shape,s.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},U$={kernelName:zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockSize:s,dataFormat:i}=a;ae("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`));const o=r.shape[0],u=r.shape[1],l=r.shape[2],c=r.shape[3],h=u*s,p=l*s,d=c/(s*s),f=n.data.get(r.dataId).values,m=new Float32Array(o*h*p*d);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/s),a=t%s;for(let t=0;t<p;++t){const r=Math.floor(t/s),i=(a*s+t%s)*d;for(let t=0;t<d;++t){const a=t+i+c*(r+l*(n+u*e));m[g++]=f[a]}}}return n.makeTensorInfo([o,h,p,d],r.dtype,m)}};function G$(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:i,pad:o,dilations:u,dimRoundingMode:l}=a;WT([r,s],"depthwiseConv2DNative");const c=Fe(r.shape),h=Fe(s.shape);let p=u;null==p&&(p=[1,1]),ae($l(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=wl(r.shape,s.shape,i,p,o,l,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new Zr(d.outShape,r.dtype),I=n.data.get(r.dataId).values,N=n.data.get(s.dataId).values,S=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const a=n+e*v.strides[1],r=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=d.inHeight)continue;const s=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=a+e*v.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const a=n+e*y;if(a<0||a>=d.inWidth)continue;const r=s+e*h[1],o=i+a*d.inChannels;let u=t,l=r;for(let e=0;e<d.inChannels;++e){const t=I[o+e];for(let e=0;e<k;++e)S[u+e]+=t*N[l+e];u+=k,l+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const H$={kernelName:Pt,backendName:"cpu",kernelFunc:G$},j$={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=a;WT([r,s],"depthwiseConv2dNativeBackpropFilter");const h=wl(r.shape,c,i,o,u,l,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new Zr(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,k=new Zr(r.shape,r.dtype,w),v=n.data.get(s.dataId).values,I=new Zr(s.shape,s.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let a=0;a<m;++a){const r=Math.max(0,Math.ceil((y-a)/d)),s=Math.min(h.outWidth,(h.inWidth+y-a)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),u=i%x;let l=0;for(let u=0;u<h.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<s;++e){const n=a+e*d-y;l+=k.get(u,t,n,o)*I.get(u,c,e,i)}}g.set(l,e,a,o,u)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},q$={kernelName:Wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=a;WT([r,s],"depthwiseConv2DNativeBackpropInput");const h=Fe(r.shape),p=Fe(s.shape),d=wl(c,s.shape,i,o,u,l,!0),f=new Zr(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,k,v]=h,I=n.data.get(s.dataId).values,[N,S,T]=p,{batchSize:C,filterHeight:$,filterWidth:E,inChannels:_,inHeight:A,inWidth:R,outChannels:F,outHeight:D,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,P=E-1-d.padInfo.left,B=F/_;for(let e=0;e<C;++e)for(let t=0;t<_;++t)for(let n=0;n<A;++n){const a=n-z,r=Math.max(0,Math.ceil(a/M)),s=Math.min(D,($+a)/M);for(let i=0;i<R;++i){const o=i-P,u=Math.max(0,Math.ceil(o/L)),l=Math.min(O,(E+o)/L);let c=0;for(let n=r;n<s;++n){const r=n*M-a;for(let a=u;a<l;++a){const s=w*e+k*n+v*a,i=N*($-1-r)+S*(E-1-(a*L-o))+T*t;for(let e=0;e<B;++e)c+=x[s+(t*B+e)]*I[i+e]}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},K$={kernelName:Vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t,r=oe(a.shape),s=n.data.get(a.dataId).values,i=Oi([r,r],a.dtype),o=i.values;for(let e=0;e<s.length;e++)o[e*r+e]=s[e];const u=[...a.shape,...a.shape];return n.makeTensorInfo(u,i.dtype,i.values)}},X$={kernelName:Ut,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:r}=e,{strides:s,pad:i,dilations:o}=n,u=t,l=u.data.get(a.dataId).values,c=a.shape.length,h=u.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:T}=yl(a.shape,r.shape,s,i,"NHWC",o),C=oe(T),$=T.length,E=we(a.dtype,C);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let s=0;s<b;++s){const i=s*k-x.left;for(let o=0;o<g;++o){let u=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const s=n+t*N;if(s>=0&&s<f)for(let n=0;n<I;++n){const d=i+n*S;if(d>=0&&d<m){const i=Be([e,s,d,o],c,Fe(a.shape)),f=Be([t,n,o],p,Fe(r.shape)),m=l[i]+h[f];m>u&&(u=m)}}}E[Be([e,t,s,o],$,Fe(T))]=u}}}return{dataId:u.write(zr(E,a.dtype),T,a.dtype),shape:T,dtype:a.dtype}}},Y$={kernelName:Ht,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:r,dy:s}=e,{strides:i,pad:o,dilations:u}=n,l=t,c=Oe(a.shape,l.data.get(a.dataId).values),h=Oe(r.shape,l.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:N,outShape:S}=yl(a.shape,r.shape,i,o,"NHWC",u);ae(s.rank===S.length,(()=>`Error in ${Ht}, dy must have the same rank as output ${S.length}, but got ${s.rank}`));const T=Oe(S,l.data.get(s.dataId).values),C=ze(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let a=0;a<y;++a){const r=a*w-b.left;for(let s=0;s<m;++s){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let t=0;t<k;++t){const a=n+t*I;if(a>=0&&a<d)for(let n=0;n<v;++n){const l=r+n*N;if(l>=0&&l<f){const r=c[e][a][l][s]+h[t][n][s];r>i&&(i=r,o=t,u=n)}}}C[o][u][s]+=T[e][t][a][s]}}}return{dataId:l.write(zr(C,a.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Z$={kernelName:Gt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:r,dy:s}=e,{strides:i,pad:o,dilations:u}=n,l=t,c=Oe(a.shape,l.data.get(a.dataId).values),h=Oe(r.shape,l.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:N,outShape:S}=yl(a.shape,r.shape,i,o,"NHWC",u);ae(s.rank===S.length,(()=>`Error in ${Gt}, dy must have the same rank as output ${S.length}, but got ${s.rank}`));const T=Oe(S,l.data.get(s.dataId).values),C=ze(a.shape,a.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let a=0;a<y;++a){const r=a*w-b.left;for(let s=0;s<m;++s){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,u=r<0?0:r;for(let t=0;t<k;++t){const a=n+t*I;if(a>=0&&a<d)for(let n=0;n<v;++n){const l=r+n*N;if(l>=0&&l<f){const r=c[e][a][l][s]+h[t][n][s];r>i&&(i=r,o=a,u=l)}}}C[e][o][u][s]+=T[e][t][a][s]}}}return{dataId:l.write(zr(C,a.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},J$=JT(((e,t)=>e*t)),Q$=wC(((e,t,n,a)=>({real:e*n-t*a,imag:e*a+t*n}))),eE=xC(Hn,J$,Q$),tE={kernelName:Hn,backendName:"cpu",kernelFunc:eE};function nE(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:i}=a;let o;WT(r,"sum"),o="bool"===r.dtype?yC({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):KT({inputs:{x:r},backend:n});const u=o.shape.length,l=ye(s,o.shape),c=Cc(l,u);let h=l,p=o;null!=c&&(p=zC({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Ec(h.length,u)),Tc("sum",h,p.shape.length);const[d,f]=Nc(p.shape,h);let m=dC(n,d,cs(p.dtype,"int32"));const g=oe(f),y=n.data.get(m.dataId).values,b=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(i){const e=m;m=SC({inputs:{x:m},backend:n,attrs:{shape:Sc(m.shape,l)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const aE={kernelName:Aa,backendName:"cpu",kernelFunc:nE},rE={kernelName:qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{equation:r}=a,s=t,{allDims:i,summedDims:o,idDims:u}=Gf(r,s.length);jf(i.length,u,s);const{path:l,steps:c}=qf(o,u),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:a}=Hf(d,u[t]);let r;Kf(e)?r=s[t]:(r=zC({inputs:{x:s[t]},backend:n,attrs:{perm:e}}),f.push(r));const i=r.shape.slice();for(let e=0;e<a.length;++e)i.splice(a[e],0,1);le(r.shape,i)||(r=SC({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=eE({inputs:{a:r,b:p},backend:n}),f.push(p))}e<h-1&&(l[e]>=0&&(p=nE({inputs:{x:p},backend:n,attrs:{axis:l[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},sE={kernelName:Xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:a,y:r}=t;WT([a,r],"eluGrad");const s=new Float32Array(oe(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];s[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",s)}},iE=JT(((e,t)=>e===t?1:0)),oE=xC(Zt,iE,null,"bool"),uE={kernelName:Zt,backendName:"cpu",kernelFunc:oE},lE=Tf,cE=Cf,hE=$f,pE=Ef,dE=_f,fE=Af,mE=GT(Yt,(e=>{const t=Math.sign(e),n=Math.abs(e),a=1/(1+lE*n);return t*(1-((((fE*a+dE)*a+pE)*a+hE)*a+cE)*a*Math.exp(-n*n))})),gE={kernelName:Yt,backendName:"cpu",kernelFunc:mE},yE=iC((e=>Math.exp(e))),bE=HT(Jt,yE,"float32"),xE={kernelName:Jt,backendName:"cpu",kernelFunc:bE};function wE(e){const{inputs:t,backend:n,attrs:a}=e,{input:r}=t,{dim:s}=a,i=r.shape.length,o=r.shape.slice();let u=s;return s<0&&(ae(-(i+1)<=s,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),u=i+s+1),o.splice(u,0,1),SC({inputs:{x:r},backend:n,attrs:{shape:o}})}const kE={kernelName:Qt,backendName:"cpu",kernelFunc:wE},vE=iC((e=>Math.expm1(e))),IE=HT(en,vE),NE={kernelName:en,backendName:"cpu",kernelFunc:IE},SE=JT(((e,t)=>e/t)),TE=xC(jt,SE),CE={kernelName:jt,backendName:"cpu",kernelFunc:TE},$E=JT(((e,t)=>e-t)),EE=wC(((e,t,n,a)=>({real:e-n,imag:t-a}))),_E=xC(ja,$E,EE),AE={kernelName:ja,backendName:"cpu",kernelFunc:_E};function RE(e,t,n){const a=e.shape,r=a[0],s=a[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,u=i.complexTensorInfos.imag,l=[r,s],c=oe(l),h=xe("float32",c),p=xe("float32",c);for(let e=0;e<r;e++){const a=c$({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,s]}}),r=c$({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,s]}}),i=hC({inputs:{real:a,imag:r},backend:n}),{real:l,imag:c}=FE(i,t,n),d=Rf(l,c);for(let t=0;t<s;t++){const n=Mf(d,t);h[e*s+t]=n.real,p[e*s+t]=n.imag}n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(l,"float32",h),f=n.makeTensorInfo(l,"float32",p),m=hC({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function FE(e,t,n){const a=oe(e.shape),r=n.data.get(e.dataId),s=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if((o=a)&o-1){const e=function(e,t,n){const a=new Float32Array(2*t);for(let r=0;r<t;r++){let s=0,i=0;for(let a=0;a<t;a++){const o=Pf(r*a,t,n),u=Mf(e,a);s+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(s/=t,i/=t),Lf(a,s,i,r)}return a}(Rf(s,i),a,t);return Ff(e)}{const r=DE(s,i,a,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),s=n.makeTensorInfo([],"float32",Lr(a,"float32")),i=KT({inputs:{x:s},backend:n}),u=CE.kernelFunc({inputs:{a:e,b:s},backend:n}),l=CE.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(u.dataId).values,h=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),{real:c,imag:h}}return r}var o}function DE(e,t,n,a,r){if(1===n)return{real:e,imag:t};const s=Rf(e,t),i=n/2,o=Df(s),u=o.real,l=o.imag,c=[u.length],h=r.makeTensorInfo(c,"float32",u),p=r.makeTensorInfo(c,"float32",l),d=hC({inputs:{real:h,imag:p},backend:r}),f=Of(s),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=hC({inputs:{real:b,imag:x},backend:r}),k=DE(u,l,i,a,r),v=k.real,I=k.imag,N=[v.length],S=r.makeTensorInfo(N,"float32",v),T=r.makeTensorInfo(N,"float32",I),C=hC({inputs:{real:S,imag:T},backend:r}),$=DE(m,g,i,a,r),E=$.real,_=$.imag,A=[E.length],R=r.makeTensorInfo(A,"float32",E),F=r.makeTensorInfo(A,"float32",_),D=hC({inputs:{real:R,imag:F},backend:r}),O=zf(n,a),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),P=hC({inputs:{real:L,imag:z},backend:r}),B=eE({inputs:{a:P,b:D},backend:r}),W=IC({inputs:{a:C,b:B},backend:r}),V=_E({inputs:{a:C,b:B},backend:r}),U=fC({inputs:{input:W},backend:r}),G=fC({inputs:{input:V},backend:r}),H=N$({inputs:{input:W},backend:r}),j=N$({inputs:{input:V},backend:r}),q=T$({inputs:[U,G],backend:r,attrs:{axis:0}}),K=T$({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(R),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const OE={kernelName:tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t,r=oe(a.shape),s=a.shape[a.shape.length-1],i=SC({inputs:{x:a},backend:n,attrs:{shape:[r/s,s]}}),o=RE(i,!1,n),u=SC({inputs:{x:o},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}};function ME(e){const{backend:t,attrs:n}=e,{shape:a,value:r,dtype:s}=n,i=s||_e(r),o=we(i,oe(a));return function(e,t){e.fill(t)}(o,r),t.makeTensorInfo(a,i,o)}const LE={kernelName:nn,backendName:"cpu",kernelFunc:ME},zE={kernelName:an,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,r=n,s=xe(a.dtype,oe(a.shape)),[i,o,u,l]=a.shape,c=r.data.get(a.dataId).values;for(let e=0;e<i;e++){const t=e*u*o*l;for(let e=0;e<o;e++){const n=e*(u*l);for(let e=0;e<u;e++){const a=e*l;for(let r=0;r<l;r++){const i=Math.round(u-e-1),o=t+n+a+r;let h=c[o];i>=0&&i<u&&(h=c[t+n+i*l+r]),s[o]=h}}}}return{dataId:r.write(s,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},PE=iC((e=>Math.floor(e))),BE=HT(rn,PE),WE={kernelName:rn,backendName:"cpu",kernelFunc:BE},VE=JT(((e,t)=>Math.floor(e/t))),UE=xC(sn,VE,null,"int32"),GE={kernelName:sn,backendName:"cpu",kernelFunc:UE},HE={kernelName:ur,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=a;let m=$$({inputs:{x:r,filter:s},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=SC({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=IC({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=IC({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===o.shape.length&&1!==o.shape[0]){const e=SC({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=cC(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=cC(n,m,d,o,f);n.disposeIntermediateTensorInfo(e)}return m}},jE={kernelName:lr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=a;let m=G$({inputs:{x:r,filter:s},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=IC({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=cC(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function qE(e,t,n,a,r,s,i,o,u){const l=Oi([a,s],n);for(let n=0;n<a;n++){const a=[];let c=0;for(let t=0;t<r;t++){const s=e[n*r+t];c+=s*i[t],a.push(s)}if(c<0||c>=u/s)throw new Error(`Invalid indices: ${a} does not index into ${o}`);for(let e=0;e<s;e++)l.values[n*s+e]=t.get(...t.indexToLoc(c*s+e))}return l}const KE={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:a,indices:r}=t,s=oe(a.shape),i=r.shape,o=i[i.length-1],[u,l,c,h]=Uo(a,r);if(0===l)return n.makeTensorInfo(u,a.dtype,[]);const p=qE(n.data.get(r.dataId).values,n.bufferSync(a),a.dtype,l,o,c,h,a.shape,s);return n.makeTensorInfo(u,a.dtype,p.values)}};function XE(e,t,n){const a=Oi(n,e.dtype);for(let n=0;n<a.size;++n){const r=a.indexToLoc(n).slice(),s=r[0],i=r[2],o=t.locToIndex([s,i]);r[2]=t.values[o];const u=e.locToIndex(r);0<=u&&u<e.values.length&&(a.values[n]=e.values[u])}return a}const YE={kernelName:un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,indices:s}=t,{axis:i,batchDims:o}=a;WT([r,s],"gatherV2");const u=ye(i,r.shape)[0],l=n.data.get(s.dataId).values,c=r.shape[u];for(let e=0;e<l.length;++e){const t=l[e];ae(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let h=o;null==o&&(h=0);const p=oe(s.shape),d=hm(r,s,u,h),f=SC({inputs:{x:r},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=SC({inputs:{x:s},backend:n,attrs:{shape:[d.batchSize,p/d.batchSize]}}),g=[d.batchSize,d.outerSize,p/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=XE(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},ZE=JT(((e,t)=>e>t?1:0)),JE=xC(cn,ZE,null,"bool"),QE={kernelName:cn,backendName:"cpu",kernelFunc:JE},e_=JT(((e,t)=>e>=t?1:0)),t_=xC(hn,e_,null,"bool"),n_={kernelName:hn,backendName:"cpu",kernelFunc:t_},a_={kernelName:dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t,r=oe(a.shape),s=a.shape[a.shape.length-1],i=SC({inputs:{x:a},backend:n,attrs:{shape:[r/s,s]}}),o=RE(i,!0,n),u=SC({inputs:{x:o},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}},r_=GT(mn,(e=>Number.isFinite(e)?1:0),"bool"),s_={kernelName:mn,backendName:"cpu",kernelFunc:r_},i_=GT(gn,(e=>Math.abs(e)===1/0?1:0),"bool"),o_={kernelName:gn,backendName:"cpu",kernelFunc:i_},u_=GT(yn,(e=>Number.isNaN(e)?1:0),"bool"),l_={kernelName:yn,backendName:"cpu",kernelFunc:u_},c_=JT(((e,t)=>e<t?1:0)),h_=xC(xn,c_,null,"bool"),p_={kernelName:xn,backendName:"cpu",kernelFunc:h_},d_=JT(((e,t)=>e<=t?1:0)),f_=xC(wn,d_,null,"bool"),m_={kernelName:wn,backendName:"cpu",kernelFunc:f_};function g_(e,t,n){const a=(t-e)/(n-1),r=Le(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+a;return r}const y_={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:a,stop:r,num:s}=n,i=g_(a,r,s);return t.makeTensorInfo([i.length],"float32",i)}},b_=iC((e=>Math.log(e))),x_=HT(vn,b_),w_={kernelName:vn,backendName:"cpu",kernelFunc:x_},k_=GT(In,(e=>Math.log1p(e))),v_={kernelName:In,backendName:"cpu",kernelFunc:k_},I_=JT(((e,t)=>e&&t)),N_=xC(Nn,I_,null,"bool"),S_={kernelName:Nn,backendName:"cpu",kernelFunc:N_},T_=GT(Sn,(e=>e?0:1),"bool"),C_={kernelName:Sn,backendName:"cpu",kernelFunc:T_},$_=JT(((e,t)=>e||t)),E_=xC(Tn,$_,null,"bool"),__={kernelName:Tn,backendName:"cpu",kernelFunc:E_},A_={kernelName:_n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{depthRadius:s,bias:i,alpha:o,beta:u}=a;WT(r,"LRN");const l=r.shape[3],c=l-1,h=n.data.get(r.dataId).values,p=oe(r.shape),d=new Float32Array(p);function f(e){const t=e%l;let n=e-t+Math.max(0,t-s);const a=e-t+Math.min(t+s,c);let r=0;for(;n<=a;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<p;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-u);d[e]=n}return n.makeTensorInfo(r.shape,r.dtype,d)}},R_={kernelName:An,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,y:s,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=a;WT(i,"LRNGrad");const h=oe(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(s.dataId).values,g=new Float32Array(h),y=h;for(let e=0;e<y;e++){const t=e%p,n=e-t+Math.max(0,t-o),a=e-t+Math.min(p,t+o+1);let r=0;for(let e=n;e<a;e++)r+=Math.pow(f[e],2);r=l*r+u;for(let t=n;t<a;t++){let n=-2*l*c*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,g)}};function F_(e,t,n,a){const r=xe(a,oe(n));for(let n=0;n<r.length;++n){const a=n*t;let s=e[a];for(let n=0;n<t;++n){const t=e[a+n];(Number.isNaN(t)||t>s)&&(s=t)}r[n]=s}return r}function D_(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reductionIndices:s,keepDims:i}=a,o=n;let u=r.shape;const l=u.length,c=ye(s,u);let h=c;const p=Cc(h,l);let d=o.data.get(r.dataId).values;if(null!=p){const e=new Array(l);for(let t=0;t<e.length;t++)e[t]=u[p[t]];d=LC(d,u,r.dtype,p,e),h=Ec(h.length,l),u=e}WT(r,"max"),Tc("max",h,l);const[f,m]=Nc(u,h),g=F_(d,oe(m),f,r.dtype),y=o.write(g,f,r.dtype);let b=f;return i&&(b=Sc(f,c)),{dataId:y,shape:b,dtype:r.dtype}}const O_={kernelName:Rn,backendName:"cpu",kernelFunc:D_},M_=JT(((e,t)=>Math.max(e,t))),L_=xC(Fn,M_),z_={kernelName:Fn,backendName:"cpu",kernelFunc:L_},P_={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t;WT(r,"maxPool");const{filterSize:s,strides:i,pad:o,dimRoundingMode:u}=a;ae($l(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=bl(r.shape,s,i,1,o,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&le(l.inShape,l.outShape))c=KT({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Fe(r.shape),a=t$(e,r.shape,r.dtype,t,l,"max");c=n.makeTensorInfo(l.outShape,r.dtype,a.values)}return c}},B_={kernelName:Mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=a;WT(r,"maxPool3d");const c=xl(r.shape,s,i,1,o,u,l),h=a$(n.data.get(r.dataId).values,r.shape,r.dtype,Fe(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}},W_={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=a;WT([r,s],"maxPool3DGrad");const c=xl(s.shape,i,o,1,u,l),h=function(e,t){const n=Oi(t.outShape,"int32"),a=t.strideDepth,r=t.strideHeight,s=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,u=t.dilationWidth,l=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*a-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,l+b);for(let a=0;a<t.outHeight;++a){const l=a*r-d;let p=l;for(;p<0;)p+=o;const k=Math.min(t.inHeight,c+l);for(let r=0;r<t.outWidth;++r){const d=r*s-f;let v=d;for(;v<0;)v+=u;const I=Math.min(t.inWidth,h+d);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let a=p;a<k;a+=o){const r=a-l;for(let s=v;s<I;s+=u){const i=s-d,o=e.get(m,t,a,s,g);o>=N&&(N=o,S=n*c*h+r*c+i)}}}n.set(S,m,y,a,r,g)}}}return n}(n.bufferSync(s),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,I=x-1-c.padInfo.top,N=Oi(s.shape,"float32"),S=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let a=0;a<c.inHeight;++a)for(let r=0;r<c.inWidth;++r){const s=n-k,i=a-I,o=r-v;let u=0;for(let n=0;n<b;n+=m){const a=(s+n)/p;if(!(a<0||a>=c.outDepth||Math.floor(a)!==a))for(let r=0;r<x;r+=g){const s=(i+r)/d;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let i=0;i<w;i+=y){const l=(o+i)/f;if(l<0||l>=c.outWidth||Math.floor(l)!==l)continue;const p=b*x*w-1-h.get(e,a,s,l,t)===n*x*w+r*w+i?1:0;0!==p&&(u+=S.get(e,a,s,l,t)*p)}}}N.set(u,e,n,a,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},V_={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s,output:i}=t,o=s;WT([s,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=a,p=bl(o.shape,u,l,1,c,h),d=n.data.get(o.dataId).values,f=Oi(p.outShape,o.dtype,n$(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,k=w-1-p.padInfo.left,v=x-1-p.padInfo.top,I=Oi(o.shape,"float32"),N=n.data.get(r.dataId).values,S=Oi(r.shape,"float32",N);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let a=0;a<p.inWidth;++a){const r=n-v,s=a-k;let i=0;for(let n=0;n<x;n+=y){const a=(r+n)/m;if(!(a<0||a>=p.outHeight||Math.floor(a)!==a))for(let r=0;r<w;r+=b){const o=(s+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const u=x*w-1-f.get(e,a,o,t)===n*w+r?1:0;0!==u&&(i+=S.get(e,a,o,t)*u)}}I.set(i,e,n,a,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},U_={kernelName:zn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:a}=e,{filterSize:r,strides:s,pad:i,includeBatchInIndex:o}=t,u=n;WT(a,"MaxPoolWithArgmax");const l=u.data.get(a.dataId).values,c=bl(a.shape,r,s,[1,1],i),[h,p]=function(e,t,n,a,r){const s=t$(e,0,n,Fe(t),r,"max"),i=n$(e,t,n,r,!0,a);return[s.values,i.values]}(l,a.shape,a.dtype,o,c),d=u.write(h,c.outShape,a.dtype),f=u.write(p,c.outShape,a.dtype);return[{dataId:d,shape:c.outShape,dtype:a.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},G_={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:i}=a,o=ye(s,r.shape),u=oe(Nc(r.shape,o)[1]),l=[],c=n.makeTensorInfo([],"float32",new Float32Array([u]));l.push(c);const h=yC({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});l.push(h);const p=TE({inputs:{a:h,b:c},backend:n});l.push(p);const d=nE({inputs:{x:p},backend:n,attrs:{axis:s,keepDims:i}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},H_={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:i}=a;WT(r,"min");const o=ye(s,r.shape);let u=o;const l=Cc(u,r.shape.length);let c=r;null!=l&&(c=zC({inputs:{x:r},backend:n,attrs:{perm:l}}),u=Ec(u.length,r.shape.length)),Tc("min",u,c.shape.length);const[h,p]=Nc(c.shape,u),d=oe(p),f=Le(oe(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const a=m[t+e];(Number.isNaN(a)||a<n)&&(n=a)}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=SC({inputs:{x:g},backend:n,attrs:{shape:Sc(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},j_=JT(((e,t)=>Math.min(e,t))),q_=xC(Wn,j_),K_={kernelName:Wn,backendName:"cpu",kernelFunc:q_},X_={kernelName:Vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{paddings:s,mode:i}=a;WT(r,"mirrorPad");const o=s.map(((e,t)=>e[0]+r.shape[t]+e[1])),u=s.map((e=>e[0])),l=s.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,d=Fe(r.shape),f=oe(o),m=o.length,g=Fe(o),y=xe(r.dtype,f);for(let e=0;e<f;e++){let t=We(e,m,g);for(let e=0;e<m;e++)t[e]<u[e]?t[e]=2*u[e]-t[e]-c:t[e]>=l[e]&&(t[e]=2*(l[e]-1)-t[e]+c);t=t.map(((e,t)=>e-u[t]));const n=Be(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},Y_=JT(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),Z_=xC(Un,Y_),J_={kernelName:Un,backendName:"cpu",kernelFunc:Z_};function Q_(e){const{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{dim:s}=a,i=r.shape.length;let o=s;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const u=ye([o],r.shape),l=D_({inputs:{x:r},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),c=Sc(l.shape,u),h=SC({inputs:{x:l},backend:n,attrs:{shape:c}}),p=_E({inputs:{a:r,b:h},backend:n}),d=bE({inputs:{x:p},backend:n}),f=nE({inputs:{x:d},backend:n,attrs:{axis:u,keepDims:!1}}),m=SC({inputs:{x:f},backend:n,attrs:{shape:c}}),g=TE({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const eA={kernelName:Da,backendName:"cpu",kernelFunc:Q_},tA={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{numSamples:s,seed:i,normalized:o}=a;WT(r,"multinomial");const u=o?r:Q_({inputs:{logits:r},backend:n,attrs:{dim:-1}}),l=u.shape[0],c=u.shape[1],h=n.data.get(u.dataId).values,p=[l,s],d=Le(oe(p),"int32");for(let e=0;e<l;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const a=Bh.alea(i.toString()),r=e*s;for(let e=0;e<s;++e){const t=a();d[r+e]=n.length;for(let a=0;a<n.length;a++)if(t<n[a]){d[r+e]=a;break}}}return o||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(p,"int32",d)}};function nA(e,t,n){const a=Lr(-1,n);return J$([],t,a,e,n)}const aA={kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t;WT(a,"neg");const r=n.data.get(a.dataId).values,[s,i]=nA(r,a.shape,a.dtype);return n.makeTensorInfo(i,a.dtype,s)}},rA=bd,sA={kernelName:Kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=a;WT(r,"NonMaxSuppression");const l=n.data.get(r.dataId).values,c=n.data.get(s.dataId).values,{selectedIndices:h}=rA(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},iA=xd,oA={kernelName:Xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=a;WT(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(s.dataId).values,{selectedIndices:p,validOutputs:d}=iA(c,h,i,o,u,l);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},uA=wd,lA={kernelName:Yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=a;WT(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(s.dataId).values,p=i,d=o,f=u,m=l,{selectedIndices:g,selectedScores:y}=uA(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},cA=JT(((e,t)=>e!==t?1:0)),hA=xC(qn,cA,null,"bool"),pA={kernelName:qn,backendName:"cpu",kernelFunc:hA},dA={kernelName:Jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:r}=t,{dtype:s,depth:i,onValue:o,offValue:u}=a;WT(r,"oneHot");const l=oe(r.shape),c=new Float32Array(l*i);c.fill(u);const h=n.data.get(r.dataId).values;for(let e=0;e<l;++e)h[e]>=0&&h[e]<i&&(c[e*i+h[e]]=o);return n.makeTensorInfo([...r.shape,i],s,c)}};function fA(e){const{inputs:t,backend:n}=e,{x:a}=t;if("string"===a.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===a.dtype){const e=fC({inputs:{input:a},backend:n}),t=fA({inputs:{x:e},backend:n}),r=N$({inputs:{input:a},backend:n}),s=fA({inputs:{x:r},backend:n}),i=hC({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),i}return ME({backend:n,attrs:{shape:a.shape,value:0,dtype:a.dtype}})}const mA={kernelName:ar,backendName:"cpu",kernelFunc:fA},gA={kernelName:Zn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:a}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=fC({inputs:{input:r},backend:a}),n=e({inputs:{x:t},backend:a}),s=N$({inputs:{input:r},backend:a}),i=fA({inputs:{x:s},backend:a}),o=hC({inputs:{real:n,imag:i},backend:a});return a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(s),a.disposeIntermediateTensorInfo(i),o}return ME({backend:a,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function yA(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a;if(1===t.length)return wE({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const s=t[0].shape,i=t[0].dtype;t.forEach((e=>{re(s,e.shape,"All tensors passed to stack must have matching shapes"),ae(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],u=T$({inputs:t.map((e=>{const t=wE({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}const bA={kernelName:Qn,backendName:"cpu",kernelFunc:yA},xA={kernelName:ea,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{paddings:s,constantValue:i}=a;WT(r,"pad");const o=s.map(((e,t)=>e[0]+r.shape[t]+e[1])),u=s.map((e=>e[0])),l=n.data.get(r.dataId).values,c=oe(r.shape),h=r.shape.length,p=Fe(r.shape),d=oe(o),f=o.length,m=Fe(o),g=xe(r.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++)g[Be(We(e,h,p).map(((e,t)=>e+u[t])),f,m)]=l[e];return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},wA=JT(((e,t)=>Math.pow(e,t))),kA=xC(na,wA),vA={kernelName:na,backendName:"cpu",kernelFunc:kA};function IA(e,t,n,a){const[r,s]=Nc(e,a),i=cs(t,"int32"),o=Le(oe(r),i),u=oe(s);for(let e=0;e<o.length;++e){const t=e*u;let a=1;for(let e=0;e<u;++e)a*=n[t+e];o[e]=a}return{outVals:o,outShape:r,outDtype:i}}const NA={kernelName:ra,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:i}=a;WT(r,"prod");const o=r.shape.length,u=ye(s,r.shape),l=Cc(u,o);let c=u,h=r;const p=[];null!=l&&(h=zC({inputs:{x:r},backend:n,attrs:{perm:l}}),p.push(h),c=Ec(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=IA(h.shape,h.dtype,d,c);let y=m;return i&&(y=Sc(m,u)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function SA(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let a=t;a<e.length;a++)n[t-1]*=e[a];return n}function TA(e,t,n,a,r,s,i,o){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,a)=>{if(e<0||e>=n){const r=We(a,t.length,Fe(t)).join(",");throw new Error(`indices[${r}] = ${e} is not in [0, ${n})`)}}))}(s,i,t[0][0]-1),0===a.length)throw new Error("params.rank must be nonzero");const u=a[0],{outSplits:l,valueSlices:c,numValues:h}=function(e,t,n,a){const r=[];let s=0;const i=t.length-1+n.length,o=new Array(i).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const a=e[n],r=n===e.length-1?t:e[n+1].length;if(0===a.length)throw new Error("Ragged splits may not be empty");if(a[0]<0)throw new Error("Ragged splits must be non-negative");if(a[a.length-1]>r)throw new Error("Ragged splits must not point past values");for(let e=1;e<a.length;++e)if(a[e-1]>a[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,a);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)o[e].push(t*n)}for(let a=0;a<e.length;++a){let i=e[a],u=e[a]+1;for(let e=0;e<n.length;++e){const a=n[e],r=e+t.length-1;if(r>=0){const e=o[r],t=e[e.length-1]-a[i];for(let e=i;e<u;++e)o[r].push(a[e+1]+t)}i=a[i],u=a[u]}u!==i&&(r.push([i,u]),s+=u-i)}return{outSplits:o,valueSlices:r,numValues:s}}(s,i,e,u),p=function(e){const t=[];for(let n=0;n<e.length;++n){const a=we("int32",e[n].length);t.push(a),e[n].forEach(((e,t)=>a[t]=e))}return t}(l),d=function(e,t,n,a,r){const s=t.slice();s[0]=r;const i=we(n,oe(s)),o=e.length;return function(e,t,n,a,r,s){const i=SA(t,2)[1],o=SA(s,2)[1];let u=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<a;++t)r[u*o+t]=e[n*i+t];++u}}(e,t,a,0===o?0:o/t[0],i,s),[i,s]}(n,a,r,c,h);return[p,d[0],d[1]]}const CA={kernelName:sa,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{paramsNestedSplits:r,paramsDenseValues:s,indices:i}=t,{outputRaggedRank:o}=a,u=r.map((e=>n.data.get(e.dataId).values)),l=r.map((e=>e.shape)),c=n.data.get(s.dataId).values,h=n.data.get(i.dataId).values,[p,d,f]=TA(u,l,c,s.shape,s.dtype,h,i.shape),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,s.dtype,d);return m.concat([g])}};var $A=hf;class EA{constructor(e,t,n,a,r,s,i,o,u,l){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=a,this.valuesDType=r,this.defaultValue=s,this.defaultValueShape=i,this.rowPartitionValues=o,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=df(l),this.raggedRank=ff(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===$A.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===$A.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case $A.VALUE_ROWIDS:return EA.getMaxWidthValueRowID(t);case $A.ROW_SPLITS:return EA.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${$A[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let a=0;a<t-1;++a){const t=e[a+1]-e[a];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,a=e[0],r=0;for(let s=1;s<t;++s){const t=e[s];t!==a&&(a=t,r=Math.max(s-n,r),n=s)}return Math.max(t-n,r)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return AA(e,n)}calculateOutputSize(e){const t=this.valuesShape;mf(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=pf(this.raggedRank,n,t);a[0]<0&&(a[0]=e);for(let e=1;e<=this.raggedRank;++e)a[e]<0&&(a[e]=this.getMaxWidth(e));return a}calculateFirstParentOutputIndex(e,t,n){const a=Math.min(e,n),r=[];let s=0;for(let e=0;e<a;++e,s+=t)r.push(s);for(let t=a;t<e;++t)r.push(-1);return ae(r.length===e,(()=>"Final length of result must be equal to firstDimension.")),r}calculateOutputIndexRowSplit(e,t,n,a){const r=e.length,s=[];for(let i=0;i<r-1;++i){const r=e[i+1]-e[i];let o=Math.min(a,r),u=t[i];-1===u&&(o=0);for(let e=0;e<o;++e)s.push(u),u+=n;for(let e=0;e<r-o;++e)s.push(-1)}if(r>0&&s.length!==e[r-1])throw new Error("Invalid row split size.");return s}calculateOutputIndexValueRowID(e,t,n,a){const r=e.length,s=[];if(0===r)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let u=t[o];s.push(u);for(let l=1;l<r;++l){const r=e[l];if(r===o)u>=0&&(++i,i<a?u+=n:u=-1);else{if(i=0,o=r,r>=t.length)throw new Error(`Got nextValueRowId=${r} which is not less than ${t.length}`);u=t[r]}s.push(u)}if(s.length!==e.length)throw new Error("Invalid row ids.");return s}calculateOutputIndex(e,t,n,a){const r=this.getRowPartitionTensor(e),s=this.getRowPartitionTypeByDimension(e);switch(s){case $A.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(r,t,n,a);case $A.ROW_SPLITS:if(r.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${r.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(r,t,n,a);default:throw new Error(`Unsupported partition type: ${$A[s]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case $A.FIRST_DIM_SIZE:return e[0];case $A.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case $A.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${$A[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const a=AA(t,!1),r=we(this.valuesDType,oe(a));if(n[0]*t[0]>0){let s=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)s=this.calculateOutputIndex(e-1,s,n[e],t[e]);this.setOutput(this.raggedRank,s,r,a)}return[a,r]}setOutput(e,t,n,a){if(0===n.length)return;const r=this.values,s=n;let i=a.slice();i=i.slice(e+1);const o=oe(i),u=t.length;let l=this.defaultValue;if(l.length!==o&&1!==l.length){const e=this.defaultValueShape;go((()=>{const t=Al(l,e),n=jl(t,i);l=n.dataSync()}))}let c=0,h=0,p=0;for(let e=0;e<=u;++e){let a=e<u?t[e]:-1;if(a!==p){if(h<p){const e=r.subarray(c*o);_A(s.subarray(h*o),e,(p-h)*o)}if(e>=u){const e=n.length;a=Math.floor(e/o)}if(a>p)if(1===this.defaultValue.length)s.subarray(p*o,a*o).fill(this.defaultValue[0]),p=a;else for(;a>p;)_A(s.slice(p*o),l,o),++p;a<0?(c=e+1,h=p):(c=e,h=p,p=h+1)}else++p}}}function _A(e,t,n){for(let a=0;a<n;a++)e[a]=t[a]}function AA(e,t){const n=[];for(let a of e){if(a<0){if(!t)throw new Error(`Dimension ${a} must be >= 0`);if(a<-1)throw new Error(`Dimension ${a} must be >= -1`);a=-1}n.push(a)}return n}function RA(e,t,n,a,r,s,i,o,u,l){return new EA(e,t,n,a,r,s,i,o,u,l).compute()}const FA={kernelName:ia,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{shape:r,values:s,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:u}=a,l=n.data.get(r.dataId).values,c=n.data.get(s.dataId).values,h=n.data.get(i.dataId).values,p=o.map((e=>n.data.get(e.dataId).values)),d=o.map((e=>e.shape)),[f,m]=RA(l,r.shape,c,s.shape,s.dtype,h,i.shape,p,d,u);return n.makeTensorInfo(f,s.dtype,m)}};function DA(e,t,n,a){if(e===t||e<t&&n<0||t<e&&n>1)return Le(0,a);const r=Le(Math.abs(Math.ceil((t-e)/n)),a);t<e&&1===n&&(n=-1),r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+n;return r}const OA={kernelName:oa,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:a,stop:r,dtype:s,step:i}=n,o=DA(a,r,i,s);return t.makeTensorInfo([o.length],s,o)}},MA=GT(la,(e=>1/e)),LA={kernelName:la,backendName:"cpu",kernelFunc:MA},zA={kernelName:fa,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:s,halfPixelCenters:i,size:o}=a;WT(r,"resizeBilinear");const u=Fe(r.shape),[l,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(oe([h,l,c,f])),y=[s&&l>1?p-1:p,s&&c>1?d-1:d],b=[s&&l>1?l-1:l,s&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<l;t++){let n;n=i?w*(t+.5)-.5:w*t;const a=Math.max(0,Math.floor(n)),r=n-a,s=Math.min(p-1,Math.ceil(n)),o=e*u[0]+a*u[1],l=e*u[0]+s*u[1];for(let e=0;e<c;e++){let t;t=i?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),a=t-n,s=Math.min(d-1,Math.ceil(t)),c=o+n*u[2],h=l+n*u[2],p=o+s*u[2],y=l+s*u[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],s=t+(m[p+e]-t)*a,i=s+(n+(m[y+e]-n)*a-s)*r;g[x++]=i}}}return n.makeTensorInfo([h,l,c,f],"float32",g)}},PA={kernelName:ma,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r,dy:s}=t,{alignCorners:i}=a;WT([s,r],"resizeBilinearGrad");const o=Fe(r.shape),[u,l,c,h]=r.shape,[,p,d]=s.shape,f=new Float32Array(u*l*c*h),m=[i&&p>1?l-1:l,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(s.dataId).values;let w=0;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,a=Math.floor(n),r=Math.min(Math.ceil(n),l-1),s=t+a*o[1],i=t+r*o[1],u=n-a,p=1-u;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),a=Math.min(Math.ceil(t),c-1),r=t-n,l=1-r,d=s+n*o[2],m=s+a*o[2],g=i+n*o[2],y=i+a*o[2],k=p*l,v=p*r,I=u*l,N=u*r;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*I,f[y+e]+=t*N}}}}return n.makeTensorInfo([u,c,l,h],"float32",f)}},BA={kernelName:pa,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:s,halfPixelCenters:i,size:o}=a;WT(r,"resizeNearestNeighbor");const u=Fe(r.shape),[l,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*l*c*f),y=[s&&l>1?p-1:p,s&&c>1?d-1:d],b=[s&&l>1?l-1:l,s&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*u[0];for(let e=0;e<l;e++){const n=i?x*(e+.5):x*e;let a=Math.min(p-1,s?Math.round(n):Math.floor(n));i&&(a=Math.max(0,a));const r=t+a*u[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,s?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const a=r+n*u[2];for(let e=0;e<f;e++){const t=m[a+e];g[k++]=t}}}}return n.makeTensorInfo([h,l,c,f],r.dtype,g)}},WA={kernelName:da,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r,dy:s}=t,{alignCorners:i}=a;WT([s,r],"resizeNearestNeighborGrad");const o=Fe(r.shape),u=Fe(s.shape),[l,c,h,p]=r.shape,[,d,f]=s.shape,m=new Float32Array(l*c*h*p),g=n.data.get(s.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,I=2*Math.ceil(k)+2,N=2*Math.ceil(v)+2;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],a=Math.floor(e*k),r=Math.floor(a-I/2);for(let a=0;a<h;a++){const s=n+a*o[2],l=Math.floor(a*v),y=Math.floor(l-N/2);for(let n=0;n<p;n++){let o=0;for(let s=0;s<I;s++){const l=s+r;if(l<0||l>=d)continue;const p=t+l*u[1],m=l*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*u[2],s=t*w;a===Math.min(h-1,i?Math.round(s):Math.floor(s))&&(o+=g[r+n])}}m[s+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}},VA={kernelName:ya,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dims:s}=a;WT(r,"reverse");const i=r.shape.length,o=ye(s,r.shape);if(0===i)return KT({inputs:{x:r},backend:n});const u=new Zr(r.shape,r.dtype),l=n.bufferSync(r);for(let e=0;e<u.size;e++){const t=u.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),u.set(l.get(...n),...t)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},UA={kernelName:ir,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,{radians:r,fillValue:s,center:i}=t,o=n,u=xe(a.dtype,oe(a.shape)),[l,c,h,p]=a.shape,[d,f]=bf(i,c,h),m=Math.sin(r),g=Math.cos(r),y=o.data.get(a.dataId).values;for(let e=0;e<l;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let a=0;a<h;a++){const r=a*p;for(let i=0;i<p;i++){const o=[l,e,a,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=s;"number"!=typeof s&&(v=3===i?255:s[i]),w>=0&&w<h&&k>=0&&k<c&&(v=y[t+k*(h*p)+w*p+i]),u[t+n+r+i]=v}}}}return{dataId:o.write(u,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},GA=GT(ba,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),HA={kernelName:ba,backendName:"cpu",kernelFunc:GA},jA=iC((e=>1/Math.sqrt(e))),qA=HT(xa,jA),KA={kernelName:xa,backendName:"cpu",kernelFunc:qA};function XA(e,t,n,a,r,s,i,o,u,l){const c=[a/r,r],h=e.values,p=t.values;if(0===a)return Oi(n,t.dtype);const d=Oi(c,t.dtype);"string"==typeof u||"number"==typeof u?d.values.fill(u):"boolean"==typeof u&&d.values.fill(+u);for(let e=0;e<s;e++){const s=[];let u=0;for(let t=0;t<i;t++){const n=h[e*i+t];s.push(n),u+=n*o[t]}if(u<0||u>=a/r)throw new Error(`Invalid indices: ${s} does not index into ${n}`);for(let n=0;n<r;n++)l?d.values[u*r+n]+=p[e*r+n]:d.values[u*r+n]=0===t.rank?p[0]:p[e*r+n]}return d}const YA={kernelName:wa,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:r,updates:s}=t,{shape:i}=a,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=jo(0,r,i),p=XA(n.bufferSync(r),n.bufferSync(s),i,h,l,u,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};function ZA(e,t){let n=0,a=e.length,r=0;for(;n<a;)r=Math.floor((n+a)/2),e[r]<t?n=r+1:a=r;return a}function JA(e,t){let n=0,a=e.length,r=0;for(;n<a;)r=Math.floor((n+a)/2),e[r]<=t?n=r+1:a=r;return a}const QA={kernelName:ka,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sortedSequence:r,values:s}=t,{side:i}=a,o=function(e,t,n,a,r,s){const i=we("int32",n*r);for(let o=0;o<n;++o){const n=e.slice(o*a,(o+1)*a),u=o*r;for(let e=0;e<r;++e)i[u+e]="left"===s?ZA(n,t[e+u]):JA(n,t[e+u])}return i}(n.data.get(r.dataId).values,n.data.get(s.dataId).values,r.shape[0],r.shape[1],s.shape[1],i);return n.makeTensorInfo(s.shape,"int32",o)}},eR={kernelName:va,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:a,t:r,e:s}=t;WT([a,r,s],"select");const i=a.shape.length,o=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,c=cs(r.dtype,s.dtype),h=Le(oe(r.shape),c);let p=0;const d=0===i||i>1||1===r.shape.length?1:oe(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<d;t++)1===o[e]?h[p++]=u[e]:h[p++]=l[e];return n.makeTensorInfo(r.shape,c,h)}},tR=Nf,nR=Sf,aR=GT(Ia,(e=>e>=0?nR*e:tR*(Math.exp(e)-1))),rR={kernelName:Ia,backendName:"cpu",kernelFunc:aR},sR=GT(Ca,(e=>e<0?-1:e>0?1:0)),iR={kernelName:Ca,backendName:"cpu",kernelFunc:sR},oR=GT(Sa,(e=>Math.sin(e))),uR={kernelName:Sa,backendName:"cpu",kernelFunc:oR},lR=GT(Ta,(e=>Math.sinh(e))),cR={kernelName:Ta,backendName:"cpu",kernelFunc:lR},hR=Math.log(1.1920928955078125e-7)+2,pR=GT(Ea,(e=>{const t=e>-hR,n=e<hR,a=Math.exp(e);let r;return r=n?a:t?e:Math.log(1+a),r})),dR={kernelName:Ea,backendName:"cpu",kernelFunc:pR},fR={kernelName:Ra,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:s,paddings:i}=a;WT([r],"spaceToBatchND");const o=oe(s),u=[[0,0]];u.push(...i);for(let e=1+s.length;e<r.shape.length;++e)u.push([0,0]);const l=xA.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:u,constantValue:0}}),c=xf(l.shape,s,o,!1),h=wf(c.length,s.length,!1),p=kf(l.shape,s,o,!1),d=SC({inputs:{x:l},backend:n,attrs:{shape:c}}),f=zC({inputs:{x:d},backend:n,attrs:{perm:h}}),m=SC({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function mR(e,t,n,a,r,s,i){const o=t[0],u=s[0],l=new Array(u),c=new Array(o),h=t[1];if(0===u){if(0!==o)throw new Error(Zf(o));return[we(n,0),[0,h],we(r,0),l,c]}let p=!0,d=0;const f=new Array(u).fill(0);for(let t=0;t<o;++t){const n=e[t*h];if(n<0)throw new Error(Jf(t,n));if(n>=u)throw new Error(Qf(t,n,u));++f[n],p=p&&n>=d,d=n}let m=!0;for(let e=0;e<u;++e){const t=0===f[e];l[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&p){const t=e,n=a;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,l,c]}{const t=f[u-1],s=we(n,t*h),p=we(r,t),d=new Array(u).fill(0);for(let t=0;t<o;++t){const n=e[t*h],r=d[n],i=(0===n?0:f[n-1])+r;d[n]++;for(let n=0;n<h;++n)s[i*h+n]=e[t*h+n];p[i]=a[t],c[t]=i}for(let e=0;e<u;++e)if(0===d[e]){const t=0===e?0:f[e-1];s[t*h+0]=e;for(let e=1;e<h;++e)s[t*h+e]=0;p[t]=i}return[s,[t,h],p,l,c]}}const gR={kernelName:Oa,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:a,values:r,denseShape:s,defaultValue:i}=t;if(1!==s.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${s.shape}`);if(2!==a.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=mR(o,a.shape,a.dtype,u,r.dtype,l,c);return[n.makeTensorInfo(p,a.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],a.dtype,new Int32Array(m))]}};function yR(e,t,n,a,r){const s=oe(a),i=t[0],o=r.length,u=[];let l=1,c=-1;for(let e=0;e<o;++e){const t=r[e];if(-1===t){if(-1!==c)throw new Error(em(c,e));c=e,u.push(1)}else{if(t<0)throw new Error(tm(e,t));l*=t,u.push(t)}}if(-1!==c){if(l<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(s/l);if(l*e!==s)throw new Error(am(a,u));u[c]=e}if(oe(u)!==s)throw new Error(rm(a,u));const h=a.length,p=[];if(h>0){p[h-1]=1;for(let e=h-2;e>=0;--e)p[e]=p[e+1]*a[e+1]}const d=[];if(o>0){d[o-1]=1;for(let e=o-2;e>=0;--e)d[e]=d[e+1]*u[e+1]}const f=we(n,i*o);for(let t=0;t<i;++t){let n=0;for(let a=0;a<h;++a)n+=e[t*h+a]*p[a];for(let e=0;e<o;++e)f[t*o+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[i,o],u]}const bR={kernelName:Ma,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:a,inputShape:r,newShape:s}=t;if(2!==a.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(a.dataId).values,u=Array.from(n.data.get(s.dataId).values),[l,c,h]=yR(o,a.shape,a.dtype,i,u);return[n.makeTensorInfo(c,a.dtype,l),n.makeTensorInfo([h.length],s.dtype,new Int32Array(h))]}};function xR(e,t,n,a,r,s=!1,i=0){const o=a.length,u=[t[0],e.length/t[0]],l=u[1],c=o>0?r[o-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const p=we(n,h.reduce(((e,t)=>e*t),1));if(0===o)return c>0&&p.fill(i),[p,h];if(c<=0)throw new Error("segment ids must be >= 0");let d=0,f=1,m=0,g=r[d];for(;;){let t=0;if(f<o){if(t=r[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(om(g,c));g>m&&p.fill(i,m*l,g*l);for(let t=d;t<f;++t){const n=a[t];if(n<0||n>=u[0])throw new Error(um(t,a[t],u[0]));for(let t=0;t<l;t++)p[g*l+t]+=e[n*l+t]}if(s)for(let e=0;e<l;e++)p[g*l+e]/=f-d;if(d=f,++f,m=g+1,g=t,f>o)break}return m<c&&p.fill(i,m*l,c*l),[p,h]}const wR={kernelName:La,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:s}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${s.shape}`);if(r.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(a.dataId).values,o=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,[l,c]=xR(i,a.shape,a.dtype,o,u,!0);return n.makeTensorInfo(c,a.dtype,l)}},kR={kernelName:za,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:s}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${s.shape}`);if(r.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(a.dataId).values,o=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,[l,c]=xR(i,a.shape,a.dtype,o,u);return n.makeTensorInfo(c,a.dtype,l)}},vR={kernelName:Pa,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sparseIndices:r,sparseValues:s,defaultValue:i}=t,{outputShape:o}=a,{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:p}=jo(0,r,o),d=!1,f=n.bufferSync(r);let m;switch(s.dtype){case"bool":m=XA(f,n.bufferSync(s),o,p,c,l,u,h,Boolean(n.data.get(i.dataId).values[0]),d);break;case"float32":case"int32":m=XA(f,n.bufferSync(s),o,p,c,l,u,h,n.data.get(i.dataId).values[0],d);break;case"string":m=XA(f,n.bufferSync(s),o,p,c,l,u,h,Vr(n.data.get(i.dataId).values[0]),d);break;default:throw new Error(`Unsupported type ${s.dtype}`)}return n.makeTensorInfo(o,m.dtype,m.values)}},IR={kernelName:Fa,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{numOrSizeSplits:s,axis:i}=a,o=ye(i,r.shape)[0],u=Yf(r,s,o),l=new Array(r.shape.length).fill(0),c=r.shape.slice();return u.map((e=>{const t=[...c];t[o]=e;const a=c$({inputs:{x:r},backend:n,attrs:{begin:l,size:t}});return l[o]+=e,a}))}},NR=iC((e=>Math.sqrt(e))),SR=GT(_a,(e=>Math.sqrt(e))),TR={kernelName:_a,backendName:"cpu",kernelFunc:SR},CR={kernelName:Wa,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,a=t;WT(n,"square");const r=a.data.get(n.dataId).values,s=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];s[e]=t*t}return{dataId:a.write(s,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},$R=JT(((e,t)=>{const n=e-t;return n*n})),ER=xC(Ba,$R),_R={kernelName:Ba,backendName:"cpu",kernelFunc:ER},AR=GT(rr,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),RR={kernelName:rr,backendName:"cpu",kernelFunc:AR};function FR(e,t,n,a){const r=Oi(e,t.dtype);for(let e=0;e<r.size;e++){const s=r.indexToLoc(e),i=new Array(s.length);for(let e=0;e<i.length;e++)i[e]=s[e]*n[e]+a[e];r.set(t.get(...i),...s)}return r}const DR={kernelName:Va,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:s,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=a;WT(r,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=cu(r.shape,s,i,o,u,l,c,h,p);let k;if(m)k=SC({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){ae(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=Zo(b,x,w),t=c$({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});k=SC({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=FR(d,n.bufferSync(r),w,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};class OR{constructor(e,t,n,a,r,s){this.separator=Wr(e),this.nGramWidths=t,this.leftPad=Wr(n),this.rightPad=Wr(a),this.padWidth=r,this.preserveShort=s}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,a,r,s){for(let i=0;i<r;++i){const o=this.getPadWidth(s),u=Math.max(0,o-i),l=Math.max(0,o-(r-(i+1))),c=s-(u+l),h=t+(u>0?0:i-o);let p=0;p+=u*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=l*this.rightPad.length,p+=(u+l+c-1)*this.separator.length,n[a+i]=new Uint8Array(p);const d=n[a+i];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,a=t.length;if(a>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<a;++r){let a=t[r]>=e;if(a=a&&t[r]<=n,!a)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=a-1,s=we("int32",a);if(0===n||0===a){const e=new Array(n);for(let e=0;e<=r;++e)s[e]=0;return[e,s]}s[0]=0;for(let e=1;e<=r;++e){const n=t[e]-t[e-1];let a=0;this.nGramWidths.forEach((e=>{a+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===a&&(a=1),s[e]=s[e-1]+a}const i=new Array(s[r]);for(let n=0;n<r;++n){const a=t[n];let r=s[n];if(this.nGramWidths.forEach((s=>{const o=t[n+1]-t[n],u=this.getNumNGrams(o,s);this.createNGrams(e,a,i,r,u,s),r+=u})),this.preserveShort&&r===s[n]){const s=t[n+1]-t[n];if(0===s)continue;const o=s+2*this.padWidth,u=1;this.createNGrams(e,a,i,r,u,o)}}return[i,s]}}function MR(e,t,n,a,r,s,i,o){return new OR(n,a,r,s,i,o).compute(e,t)}const LR={kernelName:Ua,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{separator:r,nGramWidths:s,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:l}=a,{data:c,dataSplits:h}=t,p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values,[f,m]=MR(p,d,r,s,i,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function zR(e,t,n,a){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)a.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let s=e.indexOf(r);for(;-1!==s;){const t=e.subarray(0,s);n&&0===t.length||a.push(t),s=(e=e.subarray(s+1)).indexOf(r)}return void(n&&0===e.length||a.push(e))}let r=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){const t=e.subarray(r,s);n&&0===t.length||a.push(t),r=s+1}}function PR(e,t,n){const a=e.length,r=[];let s=0,i=0;const o=new Array(a);for(let u=0;u<a;++u){const a=r.length;zR(e[u],t,n,r);const l=r.length-a;o[u]=l,s+=l,i=Math.max(i,l)}const u=we("int32",2*s),l=new Array(s),c=[a,i];let h=0;for(let e=0;e<a;++e)for(let t=0;t<o[e];++t)u[2*h]=e,u[2*h+1]=t,l[h]=r[h],++h;return[u,l,c]}const BR={kernelName:Ga,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{skipEmpty:r}=a,{input:s,delimiter:i}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(s.dataId).values,u=n.data.get(i.dataId).values[0],[l,c,h]=PR(o,u,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function WR(e,t){const n=we("int32",e.length);for(let a=0;a<e.length;++a)n[a]=Mr(e[a]).modulo(t).getLowBitsUnsigned();return n}const VR={kernelName:Ha,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{numBuckets:r}=a,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=WR(n.data.get(s.dataId).values,r);return n.makeTensorInfo(s.shape,"int32",i)}},UR=GT(qa,(e=>Math.tan(e))),GR={kernelName:qa,backendName:"cpu",kernelFunc:UR},HR=GT(Ka,(e=>Math.tanh(e)));function jR(e,t){const n=new Array(e.rank);for(let a=0;a<n.length;a++)n[a]=e.shape[a]*t[a];const a=Oi(n,e.dtype);for(let t=0;t<a.values.length;++t){const n=a.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const s=e.locToIndex(r);a.values[t]=e.values[s]}return a}const qR={kernelName:Xa,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reps:s}=a;WT(r,"tile");const i=jR(n.bufferSync(r),s);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},KR=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function XR(e,t,n=0,a=e.length-1){for(;a>n;){if(a-n>600){const r=a-n+1,s=t-n+1,i=Math.log(r),o=.5*Math.exp(2*i/3),u=.5*Math.sqrt(i*o*(r-o)/r)*Math.sign(s-r/2);XR(e,t,Math.max(n,Math.floor(t-s*o/r+u)),Math.min(a,Math.floor(t+(r-s)*o/r+u)))}const r=e[t];let s=n,i=a;for(Q(e,n,t),KR(e[a],r)>0&&Q(e,n,a);s<i;){for(Q(e,s,i),s++,i--;KR(e[s],r)<0;)s+=1;for(;KR(e[i],r)>0;)i-=1}0===KR(e[n],r)?Q(e,n,i):(i+=1,Q(e,i,a)),i<=t&&(n=i+1),t<=i&&(a=i-1)}}function YR(e,t,n,a,r){const s=t[t.length-1],[i,o]=[e.length/s,s],u=xe(n,i*a),l=xe("int32",i*a);for(let t=0;t<i;t++){const n=t*o,s=e.subarray(n,n+o);let i=new Array(s.length);s.forEach(((e,t)=>i[t]={value:e,index:t})),a<i.length&&(XR(i,a),i=i.slice(0,a)),r&&i.sort(KR);const c=t*a,h=u.subarray(c,c+a),p=l.subarray(c,c+a);for(let e=0;e<a;e++)h[e]=i[e].value,p[e]=i[e].index}const c=t.slice();return c[c.length-1]=a,[Oi(c,n,u),Oi(c,"int32",l)]}const ZR={kernelName:Ya,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{k:s,sorted:i}=a;WT(r,"topk");const o=n.data.get(r.dataId).values,[u,l]=YR(o,r.shape,r.dtype,s,i);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},JR={kernelName:Za,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{image:r,transforms:s}=t,{interpolation:i,fillMode:o,fillValue:u,outputShape:l}=n,[c,h,p,d]=r.shape,[f,m]=null!=l?l:[h,p],g=[c,f,m,d],y=Fe(r.shape),b=y[0],x=y[1],w=y[2],k=Fe(g),v=k[0],I=k[1],N=k[2],S=xe(r.dtype,oe(g));S.fill(u);const T=a.data.get(r.dataId).values,C=a.data.get(s.dataId).values;for(let e=0;e<c;++e){const t=1===s.shape[0]?C:C.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let a=0;a<m;++a)for(let r=0;r<d;++r){let s;const l=t[6]*a+t[7]*n+1;if(0===l)continue;const c=(t[0]*a+t[1]*n+t[2])/l,d=(t[3]*a+t[4]*n+t[5])/l,f=QR(c,p,o),m=QR(d,h,o);switch(i){case"nearest":s=tF(T,h,p,b,x,w,e,m,f,r,u);break;case"bilinear":s=nF(T,h,p,b,x,w,e,m,f,r,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}S[e*v+n*I+a*N+r]=s}return a.makeTensorInfo(g,r.dtype,S)}return{dataId:a.write(S,g,r.dtype),shape:r.shape,dtype:r.dtype}}};function QR(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return Z(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return Z(0,n,t-1)}(e,t);case"nearest":return function(e,t){return Z(0,e,t-1)}(e,t);default:return e}}function eF(e,t,n,a,r,s,i,o,u,l,c){return 0<=o&&o<t&&0<=u&&u<n?e[i*a+o*r+u*s+l]:c}function tF(e,t,n,a,r,s,i,o,u,l,c){return eF(e,t,n,a,r,s,i,Math.round(o),Math.round(u),l,c)}function nF(e,t,n,a,r,s,i,o,u,l,c){const h=Math.floor(o),p=Math.floor(u),d=h+1,f=p+1;return(d-o)*((f-u)*eF(e,t,n,a,r,s,i,h,p,l,c)+(u-p)*eF(e,t,n,a,r,s,i,h,f,l,c))+(o-h)*((f-u)*eF(e,t,n,a,r,s,i,d,p,l,c)+(u-p)*eF(e,t,n,a,r,s,i,d,f,l,c))}function aF(e,t,n,a){const r=ye(t,n)[0],s=[1,n[0],1];for(let e=0;e<r;e++)s[0]*=n[e];s[1]=n[r];for(let e=r+1;e<n.length;e++)s[2]*=n[e];const i={},o=new Int32Array(n[r]),u=new Zr(s,a,e),l=[],c=1===s[0]&&1===s[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<s[0];n++)for(let a=0;a<s[2];a++)e.push(u.get(n,t,a));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,l.push(t)}}const h=s.slice();h[1]=Object.keys(i).length;const p=new Zr(h,a);l.forEach(((e,t)=>{for(let n=0;n<s[0];n++)for(let a=0;a<s[2];a++)p.set(u.get(n,e,a),n,t,a)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const rF={kernelName:Qa,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{axis:r}=n,{x:s}=t;WT(s,"unique");const i=a.data.get(s.dataId).values,{outputValues:o,outputShape:u,indices:l}=aF(i,r,s.shape,s.dtype);return[a.makeTensorInfo(u,s.dtype,o),a.makeTensorInfo([l.length],"int32",l)]}},sF={kernelName:er,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{value:r}=t;let{axis:s}=a;s<0&&(s+=r.shape.length);const i=r.shape.length,o=r.shape[s],u=new Array(i-1);let l=0;for(let e=0;e<i;e++)e!==s&&(u[l++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[s]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[s]=e;const t=c$({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=SC({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return p}},iF={kernelName:tr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,segmentIds:s}=t,{numSegments:i}=a;WT(r,"unsortedSegmentSum");const o=[],u=[],l=r.shape.length-s.shape.length;let c=s;for(let e=0;e<l;++e){const t=wE({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,u.push(t)}for(let e=0;e<i;++e){const t=Lr(e,"int32"),a=n.makeTensorInfo([],"int32",t),s=oE({inputs:{a,b:c},backend:n}),i=yC({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),l=eE({inputs:{a:i,b:r},backend:n}),h=nE({inputs:{x:l},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),u.push(a),u.push(s),u.push(i),u.push(l),u.push(h)}const h=yA({inputs:o,backend:n,attrs:{axis:0}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},oF=[EC,AC,FC,OC,NC,MC,BC,WC,VC,UC,HC,qC,XC,JC,e$,r$,s$,i$,o$,$C,u$,p$,m$,g$,bC,x$,k$,pC,v$,C$,E$,_$,A$,R$,F$,D$,M$,z$,P$,B$,W$,V$,U$,H$,j$,q$,K$,X$,Y$,Z$,rE,qT,sE,uE,gE,xE,kE,NE,OE,LE,zE,WE,GE,HE,jE,KE,YE,QE,n_,XT,a_,S$,s_,o_,l_,ZT,p_,m_,y_,w_,v_,S_,C_,__,A_,R_,O_,z_,P_,B_,W_,V_,U_,G_,H_,K_,X_,J_,tA,tE,aA,sA,oA,lA,pA,dA,gA,bA,xA,vA,tC,NA,CA,FA,OA,mC,CE,LA,aC,sC,TC,zA,PA,BA,WA,VA,UA,HA,KA,YA,QA,eR,rR,lC,iR,uR,cR,h$,eA,dR,fR,gR,bR,wR,kR,vR,IR,TR,CR,_R,RR,DR,LR,BR,VR,AE,aE,GR,{kernelName:Ka,backendName:"cpu",kernelFunc:HR},qR,ZR,JR,PC,rF,sF,iF,mA];for(const e of oF)yr(e);const uF={},lF={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function cF(e,t){if(!(e in uF)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete uF[e]}),!1),je().getBool("SOFTWARE_WEBGL_ENABLED")&&(lF.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",lF)||n.getContext("experimental-webgl",lF):n.getContext("webgl2",lF)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;uF[e]=n}const n=uF[e];return null==n||n.isContextLost()?(delete uF[e],cF(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),uF[e])}var hF,pF,dF;function fF(e,t){return[t,e]}function mF(e){const t=oe(e);return pe(Math.ceil(t/4))}function gF(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function yF(e,t){const n=e;let a,r,s,i,o,u,l,c,h,p;return 2===je().getNumber("WEBGL_VERSION")?(a=n.R32F,r=n.R16F,s=n.RGBA16F,i=n.RGBA32F,o=n.RED,l=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT,u=n.RGBA8):(a=e.RGBA,r=e.RGBA,s=e.RGBA,i=n.RGBA,o=e.RGBA,l=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,u=e.RGBA),{internalFormatFloat:a,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function bF(e,t){const n=t();return je().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function xF(e){return!!(je().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function wF(e,t){return EF(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(hF||(hF={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(pF||(pF={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(dF||(dF={}));const kF=/ERROR: [0-9]+:([0-9]+):/g;function vF(e,t){const n=kF.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const a=+n[1],r=e.split("\n"),s=r.length.toString().length+2,i=r.map(((e,t)=>fe((t+1).toString(),s)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const u=i.slice(0,a-1),l=i.slice(a-1,a),c=i.slice(a);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${fe(l[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function IF(e,t){if(bF(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function NF(e,t,n,a,r,s,i){const o=e.getAttribLocation(t,n);return-1!==o&&(bF(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,a))),bF(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,s,i))),bF(e,(()=>e.enableVertexAttribArray(o))),!0)}function SF(e,t,n,a){bF(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,a=t+e.TEXTURE0;if(a<e.TEXTURE0||a>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),bF(e,(()=>e.activeTexture(e.TEXTURE0+n))),bF(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,a))),bF(e,(()=>e.uniform1i(n,a)))}function TF(e,t,n){bF(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),bF(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function CF(e,t){bF(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),bF(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function $F(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function EF(e,t,n){const a=bF(e,(()=>t()));if(null==a)throw new Error(n);return a}function _F(e,t=2){return oe(e.slice(0,e.length-t))}function AF(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function RF(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[_F(e),...AF(e)]),t}function FF(e){return e%2==0}function DF(e,t){if(le(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],a=t.slice(-1)[0];if(n===a)return!0;if(FF(n)&&FF(a)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&FF(e[0])&&FF(t[0])}let OF,MF;function LF(e,t){return null!=e.getExtension(t)}function zF(e){try{if(null!=cF(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function PF(e){const t=yF(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(a),r}function BF(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&ae("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const WF=je();function VF(){let e,t,n,a,r,s,i,o,u,l;return 2===je().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",a="in",r="texture",s="outputColor",i="out vec4 outputColor;",o=je().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",a="varying",r="texture2D",s="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:a,texture2D:r,output:s,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:u,defineRound:l}}function UF(e,t,n="index"){const a=Fe(t);return a.map(((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===a.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function GF(e,t,n="index"){const a=Fe(t);return a.map(((t,r)=>`int ${e[r]} = ${n} / outShapeStrides[${r}]; ${r===a.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function HF(e){const t=Fe(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}WF.registerFlag("HAS_WEBGL",(()=>WF.getNumber("WEBGL_VERSION")>0)),WF.registerFlag("WEBGL_VERSION",(()=>zF(2)?2:zF(1)?1:0)),WF.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),WF.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===WF.get("WEBGL_VERSION"))),WF.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),WF.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),WF.registerFlag("WEBGL_PACK",(()=>WF.getBool("HAS_WEBGL"))),WF.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>WF.getBool("WEBGL_PACK"))),WF.registerFlag("WEBGL_PACK_CLIP",(()=>WF.getBool("WEBGL_PACK"))),WF.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>WF.getBool("WEBGL_PACK"))),WF.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>WF.getBool("WEBGL_PACK"))),WF.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>WF.getBool("WEBGL_PACK"))),WF.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>WF.getBool("WEBGL_PACK"))),WF.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>WF.getBool("WEBGL_PACK"))),WF.registerFlag("WEBGL_PACK_REDUCE",(()=>WF.getBool("WEBGL_PACK"))),WF.registerFlag("WEBGL_LAZILY_UNPACK",(()=>WF.getBool("WEBGL_PACK"))),WF.registerFlag("WEBGL_CONV_IM2COL",(()=>WF.getBool("WEBGL_PACK"))),WF.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==OF){const t=cF(e);OF=t.getParameter(t.MAX_TEXTURE_SIZE)}return OF}(WF.getNumber("WEBGL_VERSION")))),WF.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==MF){const t=cF(e);MF=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,MF)}(WF.getNumber("WEBGL_VERSION")))),WF.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=WF.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=cF(e);return t=LF(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:LF(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),WF.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>WF.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Ss())),WF.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=cF(e);if(1===e){if(!LF(t,"OES_texture_float"))return!1}else if(!LF(t,"EXT_color_buffer_float"))return!1;return PF(t)}(WF.getNumber("WEBGL_VERSION")))),WF.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!WF.getBool("WEBGL_FORCE_F16_TEXTURES")&&WF.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),WF.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=cF(e);if(1!==e){if(LF(t,"EXT_color_buffer_float"))return PF(t);const e="EXT_color_buffer_half_float";if(LF(t,e)){const n=t.getExtension(e);return function(e,t){const n=yF(e,t),a=e.createTexture();e.bindTexture(e.TEXTURE_2D,a),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,a,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(a),e.deleteFramebuffer(r),s}(t,n)}return!1}return!!LF(t,"OES_texture_float")&&!!LF(t,"WEBGL_color_buffer_float")&&PF(t)}(WF.getNumber("WEBGL_VERSION")))),WF.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=WF.getNumber("WEBGL_VERSION"))&&null!=cF(e).fenceSync;var e})),WF.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>WF.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),WF.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),WF.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Ss()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),WF.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),WF.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),WF.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),WF.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),WF.registerFlag("WEBGL_EXP_CONV",(()=>!1)),WF.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>WF.getBool("IS_TEST"))),WF.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),WF.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),WF.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1));const jF="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:qF}=m;function KF(e,t,n){const a=[];if(e.forEach((e=>{const t=oe(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?a.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(a.push(`uniform sampler2D ${e.name};`),a.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=rD(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:a.push(`uniform int ${e.name}Shape;`);break;case 2:a.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:a.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:a.push(`uniform ivec4 ${e.name}Shape;`)}a.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:a.push("uniform int outShape;");break;case 2:a.push("uniform ivec2 outShape;"),a.push("uniform int outShapeStrides;");break;case 3:a.push("uniform ivec3 outShape;"),a.push("uniform ivec2 outShapeStrides;");break;case 4:a.push("uniform ivec4 outShape;"),a.push("uniform ivec3 outShapeStrides;")}a.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{a.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const r=a.join("\n"),s=e.map((e=>function(e,t,n=!1,a){let r="";r+=n?YF(e,a):XF(e,a);const s=e.shapeInfo.logicalShape,i=t.logicalShape;return s.length<=i.length&&(r+=n?function(e,t){const n=e.name,a=n.charAt(0).toUpperCase()+n.slice(1),r="get"+a+"AtOutCoords",s=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=qF(e.shapeInfo.logicalShape,t.logicalShape),u=aD(i),l=i-s;let c;const h=["x","y","z","w","u","v"];c=0===s?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+l]} = 0;`)).join("\n");let p="";p=i<2&&s>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+l]}`)).join(", ");let d="return outputValue;";const f=1===oe(e.shapeInfo.logicalShape),m=1===oe(t.logicalShape);if(1!==s||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=s-2,t=s-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${a}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,a=n.charAt(0).toUpperCase()+n.slice(1),r="get"+a+"AtOutCoords",s=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===u&&null==e.shapeInfo.flatOffset&&le(i,s))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=aD(u),c=qF(e.shapeInfo.logicalShape,t.logicalShape),h=u-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":u<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";return f=u<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", "),`\n    float ${r}() {\n      ${l} coords = getOutputCoords();\n      ${p}\n      return get${a}(${f});\n    }\n  `}(e,t)),r}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,o=VF(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let l,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${ZF}\n    ${JF}\n    ${QF}\n  `}(o);return t.isPacked?(l=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===a[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${a[1]}.0);\n      }\n    `:1===a[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${a[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n      return 2 * (resTexRC.x * ${a[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(le(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${a[0]}, ${a[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n\n      int index = resTexRC.x * ${a[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),s=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n      int index = resTexRC.x * ${a[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const a=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),s=r*Math.ceil(e[e.length-2]/2);let i=s,o="",u="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,u=`b${t}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${a[0]}, ${a[1]}));\n      int index = resTexRC.x * ${a[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(l=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return le(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${GF(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const a=UF(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${a}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${GF(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const a=UF(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${a}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=UF(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=UF(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=eD),[h,u,c,r,l,s,n.userCode].join("\n")}function XF(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${a}() {return ${n};}`;const[r,s]=e.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${a}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=tD(n);if(t)return`\n    float ${a}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,u]=e.shapeInfo.texShape;return`\n    float ${a}() {\n      vec2 uv = uvFromFlat(${o}, ${u}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${a}(int index) {\n        ${nD(e)}\n      }\n    `;const r=e.shapeInfo.texShape,s=r[0],i=r[1];if(1===i&&1===s)return`\n      float ${a}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=tD(n);return 1===i?t?`\n      float ${a}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${a}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${s}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===s?t?`\n      float ${a}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${a}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${a}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${a}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),s=e.shapeInfo.texShape;if(null!=s&&le(n,s)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `;const e=s[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${s[1]}.0, ${e}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=be(n),u=i;if(u.length<n.length){const n=["row","col"];return`\n      ${XF(sD(e,u),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${iD(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${nD(e)}\n      }\n    `;const l=s[0],c=s[1],h=tD(a);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${a}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${a}TexShape[0]));\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `:1===l?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${a}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${a}TexShape[1]), 0.5);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${a}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\n    return sampleTexture(${a}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),s=n[1]*n[2],i=n[2],{newShape:o,keptDims:u}=be(n),l=o;if(l.length<n.length){const n=["row","col","depth"];return`\n        ${XF(sD(e,l),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${iD(n,u)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${i}, 1)));\n        ${nD(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],p=c[1],d=e.shapeInfo.flatOffset;if(p===s&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${a}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${h}.0);\n          return sampleTexture(${a}, uv);\n        }\n      `;if(p===i&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${a}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);\n      return sampleTexture(${a}, uv);\n    }\n  `;const f=tD(a);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${a}Shape[1] * ${a}Shape[2];\n      int stride1 = ${a}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);\n      return sampleTexture(${a}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${p}, index);\n        return sampleTexture(${a}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),s=n[3],i=n[2]*s,o=n[1]*i,{newShape:u,keptDims:l}=be(n);if(u.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${XF(sD(e,u),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${iD(n,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${s}, 1)));\n        ${nD(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1],f=`int stride2 = ${a}Shape[3];`,m=`int stride1 = ${a}Shape[2] * stride2;`,g=`int stride0 = ${a}Shape[1] * stride1;`;if(d===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;if(d===s&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${a}Shape[1] * ${a}Shape[2], ${a}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${a}TexShape[1], ${a}TexShape[0]);\n        return sampleTexture(${a}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${a}, uv);\n      }\n    `;const y=tD(a);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index + ${y});\n      return sampleTexture(${a}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${y});\n      return sampleTexture(${a}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],s=t[3]*r,i=t[2]*s,o=t[1]*i,{newShape:u,keptDims:l}=be(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${XF(sD(e,u))}\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        return ${a}(${iD(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${s}, ${r})) +\n          depth3;\n        ${nD(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${s}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${a}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${s} +\n          depth2 * ${r} + depth3 + ${tD(n)};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:s}=be(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${XF(sD(e,r))}\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${a}(${iD(t,s)});\n      }\n    `}const i=t[5],o=t[4]*i,u=t[3]*o,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${nD(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${tD(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function YF(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${VF().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,s=VF();if(t)return`\n    vec4 ${a}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${s.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${a}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),s=e.shapeInfo.texShape,i=s[0],o=s[1],u=VF();if(null!=s&&le(n,s))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);\n\n        return ${u.texture2D}(${a}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${u.texture2D}(${a}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${a}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${u.texture2D}(${a}, uv);\n    }\n  `;const l=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${u.texture2D}(${a}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),s=e.shapeInfo.texShape,i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===n[0]){const a=[1,2],s=["b","row","col"];return`\n        ${YF(sD(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${iD(s,a)});\n        }\n      `}const o=VF();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${a}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${a}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${a}, uv);\n    }\n  `;const u=i[0],l=i[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${l}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${o.texture2D}(${a}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=VF();if(t)return`\n    vec4 ${a}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const s=e.shapeInfo.logicalShape,i=s.length,o=e.shapeInfo.texShape,u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],l=u[0],c=u[1],h=Math.ceil(s[i-1]/2);let p=h*Math.ceil(s[i-2]/2),d="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)d=`int b${e}, `+d,p*=s[i-e-1],f=`b${e} * ${p} + `+f;return`\n    vec4 ${a}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const ZF="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",JF="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",QF="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",eD="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function tD(e){return`offset${e}`}function nD(e){const t=e.name,n=oe(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function aD(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function rD(e,t,n){const{newShape:a,keptDims:r}=be(t),s=t.length,i=e&&3===s&&1===t[0],o=i?t.slice(1):a,u=!e&&s>1&&!le(t,n)&&a.length<s||i;return{useSqueezeShape:u,uniformShape:u?o:t,keptDims:r}}function sD(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function iD(e,t){return t.map((t=>e[t])).join(", ")}function oD(e,t,n){const a={},r={},s={},i=[];let o,u,l,c=null,h=null;h=e.getUniformLocation(n,"NAN",!1),1===je().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(n,"INFINITY",!1));const p=!1;for(let i=0;i<t.variableNames.length;i++){const o=t.variableNames[i];a[o]=e.getUniformLocation(n,o,p),a[`offset${o}`]=e.getUniformLocation(n,`offset${o}`,p),t.enableShapeUniforms&&(r[`${o}Shape`]=e.getUniformLocation(n,`${o}Shape`,p),s[`${o}TexShape`]=e.getUniformLocation(n,`${o}TexShape`,p))}return t.enableShapeUniforms&&(o=e.getUniformLocation(n,"outShape",p),l=e.getUniformLocation(n,"outShapeStrides",p),u=e.getUniformLocation(n,"outTexShape",p)),t.customUniforms&&t.customUniforms.forEach(((t,a)=>{i[a]=e.getUniformLocation(n,t.name,p)})),{uniformLocations:a,customUniformLocations:i,infLoc:c,nanLoc:h,inShapesLocations:r,inTexShapesLocations:s,outShapeLocation:o,outShapeStridesLocation:l,outTexShapeLocation:u}}function uD(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const a=e.logicalShape,r=t[n],s=r.shape;if(!le(a,s))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${a} and ${s} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!le(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}function lD(e){return je().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class cD{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=hF.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=VF();this.outputShape=e,this.enableShapeUniforms=lD(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?GF(["r","c","d"],e):UF(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class hD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=hF.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=VF();this.outputShape=e,this.enableShapeUniforms=lD(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?GF(["r","c","d"],e):UF(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class pD{constructor(e){this.variableNames=["A"],this.outTexUsage=pF.DOWNLOAD;const t=VF();this.outputShape=e,this.userCode=`\n      ${jF}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class dD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=pF.DOWNLOAD;const t=VF();this.outputShape=e,this.userCode=`\n      ${jF}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class fD{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=VF();this.outputShape=e,this.enableShapeUniforms=lD(this.outputShape.length);let a="result";t&&(a="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":HF(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${a}, 0., 0., 0.);\n      }\n    `}}class mD{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=VF();this.outputShape=e,this.enableShapeUniforms=lD(this.outputShape.length);let a="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let r=0;r<=1;r++){const s=2*t+r;a+=`\n          localCoords = coords;\n          if(localCoords[2] + ${r} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${r};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${s}] = values[0];\n            } else if (offset == 1) {\n              result[${s}] = values[1];\n            } else if (offset == 2) {\n              result[${s}] = values[2];\n            } else {\n              result[${s}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":HF(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${a}\n\n          ${n.output} = ${r};\n        }\n    `}}function gD(e,t,n,a,r,s){!function(e,t){const n=je().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return EF(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return bF(e,(()=>e.bindTexture(o,i))),bF(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),bF(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),bF(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),bF(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===je().getNumber("WEBGL_VERSION")?bF(e,(()=>e.texImage2D(o,0,a,t,n,0,r,s,null))):bF(e,(()=>e.texStorage2D(o,1,a,t,n))),bF(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function yD(e){return e.internalFormatFloat}function bD(e){return e.internalFormatHalfFloat}function xD(e){return e.downloadTextureFormat}function wD(e){return e.internalFormatPackedFloat}function kD(e){return e.internalFormatPackedHalfFloat}class vD{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=je().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){uF[e]=t}(t,e)):this.gl=cF(t);let n="WEBGL_color_buffer_float";const a="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===je().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=wF(this.gl,e),LF(this.gl,t))this.textureHalfFloatExtension=wF(this.gl,t);else if(je().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),LF(this.gl,a))this.colorBufferHalfFloatExtension=wF(this.gl,a);else if(je().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",LF(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!LF(this.gl,a))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(a)}this.vertexBuffer=function(e){return function(e,t){const n=EF(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return bF(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),bF(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=EF(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return bF(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),bF(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return EF(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=yF(this.gl,this.textureHalfFloatExtension)}get debug(){return je().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;bF(e,(()=>e.finish())),bF(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),bF(e,(()=>e.deleteFramebuffer(this.framebuffer))),bF(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),bF(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),bF(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[r,s]=fF(t,n);return gD(e,r,s,yD(a),a.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[r,s]=fF(t,n);return gD(e,r,s,bD(a),a.textureFormatFloat,a.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[r,s]=fF(t,n);return gD(e,r,s,xD(a),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){bF(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===je().getNumber("WEBGL_VERSION")?bF(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):bF(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===je().getNumber("WEBGL_VERSION")?bF(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):bF(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),bF(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,a){this.throwIfDisposed(),function(e,t,n,a,r,s){let i,o,u;bF(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*a*4),o=e.UNSIGNED_BYTE,u=e.RGBA):(i=new Float32Array(n*a*4),o=e.FLOAT,u=s.internalFormatPackedFloat),i.set(r),2===je().getNumber("WEBGL_VERSION")?bF(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,a,e.RGBA,o,i))):bF(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,a,0,e.RGBA,o,i))),bF(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,a,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[r,s]=gF(t,n);return gD(e,r,s,kD(a),e.RGBA,a.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[r,s]=gF(t,n);return gD(e,r,s,wD(a),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(CF(this.gl,this.framebuffer),this.outputTexture=null),bF(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,a){const[r,s]=fF(t,n),i=new Uint8Array(t*n*4);return bF(e,(()=>e.readPixels(0,0,r,s,a.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,a,r,s){return function(e,t,n,a,r,s,i){const o=e,u=new Float32Array(function(e,t){const[n,a]=gF(e,t);return n*a*4}(s,i));return o.bindBuffer(o.PIXEL_PACK_BUFFER,t),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,u),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,r,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const a=e,r=new Float32Array(n);return a.bindBuffer(a.PIXEL_PACK_BUFFER,t),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,r),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const a=function(e,t,n){const a=e.createBuffer();bF(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const r=16*t*n;return bF(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,r,e.STREAM_READ))),bF(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),bF(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),a}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(je().getBool("WEBGL_FENCE_API_ENABLED")){const a=e,r=a.fenceSync(a.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=a.clientWaitSync(r,0,0);return e===a.ALREADY_SIGNALED||e===a.CONDITION_SATISFIED},t=r}else je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const a=new Float32Array(t*n*4);return bF(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,a))),a}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){const t=VF();return function(e,t){const n=EF(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(bF(e,(()=>e.shaderSource(n,t))),bF(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t));const n=function(e){return EF(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return bF(t,(()=>t.attachShader(n,this.vertexShader))),bF(t,(()=>t.attachShader(n,e))),function(e,t){if(bF(e,(()=>e.linkProgram(t))),!je().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&IF(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return bF(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),NF(e,t,"clipSpacePos",n,3,20,0)&&NF(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&bF(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&IF(this.gl,this.program),bF(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return EF(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),bF(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),SF(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[a,r]=gF(t,n);this.setOutputMatrixTextureDriver(e,a,r)}setOutputMatrixWriteRegion(e,t,n,a){this.setOutputMatrixWriteRegionDriver(n,e,a,t)}setOutputPackedMatrixWriteRegion(e,t,n,a){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&IF(this.gl,this.program),$F(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),bF(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),bF(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=wF(this.gl,2===je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await me((()=>this.disposed||this.isQueryAvailable(e,je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),a=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),a&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in je().platform&&(n=je().platform.setTimeoutCustom.bind(je().platform)),me((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),TF(this.gl,e,this.framebuffer),this.debug&&$F(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(TF(this.gl,this.outputTexture,this.framebuffer),this.debug&&$F(this.gl)):CF(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const a=this.gl;TF(a,e,this.framebuffer),this.debug&&$F(a),this.outputTexture=e,bF(a,(()=>a.viewport(0,0,t,n))),bF(a,(()=>a.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,a){this.throwIfDisposed(),bF(this.gl,(()=>this.gl.scissor(e,t,n,a)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{mx:ID,XI:ND,Nk:SD,ct:TD,YG:CD,hH:$D,z3:ED,sG:_D,uM:AD,vS:RD,qB:FD,GG:DD,rq:OD,lg:MD,WR:LD,cu:zD,GE:PD,px:BD,jC:WD,He:VD,hE:UD,BF:GD,Dk:HD,cl:jD,_B:qD,ub:KD,Ku:XD,qy:YD,Zy:ZD,bu:JD,zv:QD,dH:eO,HS:tO,yH:nO,l3:aO,z9:rO,x6:sO,eW:iO,GK:oO,SP:uO,f6:lO,dl:cO,Dw:hO,xT:pO,_X:dO,wz:fO}=G;function mO(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function gO(e,t){return 1===t?[e]:mO(e,t)}class yO{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=lD(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=gO("rc",this.rank),t=aD(this.rank),n=this.getOutOfBoundsCondition(e),a=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let a=0;a<=1;a++){let r=`${0===n?"r":"rp1"}, ${0===a?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],a=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${a};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class bO{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=lD(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var a,r;this.userCode=`\n      ${a=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?function(e,t,n="index"){const a=function(e,t){const n=e.length,a=e.map((e=>`${t}[${e}]`)),r=new Array(n-1);r[n-2]=a[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${a[e+1]})`;return r}(e.map(((e,t)=>t)),t);return a.map(((t,r)=>`int ${e[r]} = ${n} / ${a[r]}; ${r===a.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${a[r]}`:`index -= ${e[r]} * ${a[r]}`};`)).join("")}(["r","c","d"],"inputShape"):UF(["r","c","d"],a)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":HF(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class xO{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const a=kO(t,n),r=vO(e,a,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const s=wO(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return a===dF.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===dF.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===dF.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===dF.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===dF.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),i}releaseTexture(e,t,n,a){if(null==this.freeTextures)return;const r=kO(n,a),s=vO(t,r,a);s in this.freeTextures||(this.freeTextures[s]=[]);const i=wO(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,a),o=je().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[s].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[s],l=u.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function wO(e,t,n,a,r){const s=function(e,t){switch(e){case dF.PACKED_2X2_FLOAT32:return wD(t);case dF.PACKED_2X2_FLOAT16:return kD(t);case dF.UNPACKED_FLOAT32:return yD(t);case dF.UNPACKED_FLOAT16:return bD(t);case dF.PACKED_4X1_UNSIGNED_BYTE:return xD(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,a);let i;if(r){const[t,n]=gF(e[0],e[1]);i=t*n}else{const[t,n]=fF(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,s);return i*o}function kO(e,t){if(e===pF.UPLOAD)return dF.PACKED_2X2_FLOAT32;if(e===pF.RENDER||null==e)return function(e){return je().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?dF.PACKED_2X2_FLOAT32:dF.UNPACKED_FLOAT32:e?dF.PACKED_2X2_FLOAT16:dF.UNPACKED_FLOAT16}(t);if(e===pF.DOWNLOAD||e===pF.PIXELS)return dF.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function vO(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class IO{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=lD(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const NO="if (isnan(x)) return x;",SO="return abs(x);",TO=NO+"\n  return (x < 0.0) ? 0.0 : x;\n",CO=NO+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",$O="return x;";class EO{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=lD(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class _O{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=lD(this.outputShape.length);const t=e.length,n=gO("rc",t),a=aD(t),r=function(e,t){if(1===e)return"rc";let n="";for(let a=0;a<e;a++)n+=t[a],a<e-1&&(n+=",");return n}(t,n),s=n.slice(-2),i=t<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`\n      void main() {\n        ${a} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const AO=Pp,RO={},FO=je().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class DO extends q{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!je().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof vD)t=e;else{const n=cF(je().getNumber("WEBGL_VERSION"),e);t=new vD(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=cF(je().getNumber("WEBGL_VERSION"));t=new vD(e),this.binaryCache=((n=je().getNumber("WEBGL_VERSION"))in RO||(RO[n]={}),RO[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new xO(this.gpgpu),this.numMBBeforeWarning=null==je().global.screen?1024:je().global.screen.height*je().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new j(this,po())}nextDataId(){return DO.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((je().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||je().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const a={id:this.nextDataId()};return this.texData.set(a,{shape:t,dtype:n,values:e,usage:pF.UPLOAD,refCount:1}),a}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,a,r){if(je().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===a)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:a,values:t,usage:pF.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:a,complexTensorInfos:r,slice:s,shape:i,isPacked:o}=t;if(null!=s){let t;t=o?new EO(i,$O):new IO(i,$O);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:a}],a),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===a)return n;const u=null!=this.activeTimers;let l,c;return u&&(l=Pr()),c="complex64"===a?Rf(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.getValuesFromTexture(e),u&&(this.downloadWaitMs+=Pr()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:a,slice:r,dtype:s,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new EO(a,$O):new IO(a,$O);const n=this.runWebGLProgram(t,[{dataId:e,shape:a,dtype:s}],s),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(je().getBool("DEBUG")&&!je().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===je().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==s&&je().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...mF(a))}if(this.pendingRead.set(e,[]),"complex64"!==s&&await this.gpgpu.createAndWaitForFence(),"complex64"===s){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);l=Rf(e[0],e[1])}else if(null==c)l=this.getValuesFromTexture(e);else{const e=oe(a);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=u&&this.disposeIntermediateTensorInfo(u),null!=c){const e=this.gpgpu.gl;bF(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,l),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&po().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:a,shape:r,slice:s,dtype:i,isPacked:o,texture:u}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=s){let n;n=o?new EO(r,$O):new IO(r,$O);const a=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:i}],i),s=this.readToGPU(a,t);return this.disposeIntermediateTensorInfo(a),s}if(null==u)throw null!=a?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=this.decode(e,t.customTexShape),c=po().makeTensorFromTensorInfo(l),h=this.texData.get(l.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Vr(e)));return Oi(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Oi(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!xF(n)){if(je().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:a}=this.texData.get(e),r=oe(t);if(je().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),a=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(a.texture.texture,...mF(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),s}const s=je().getBool("WEBGL_PACK")&&!0===a,i=s?RF(t):t,o=s?new dD(i):new pD(i),u=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture.texture,l.texShape[0],l.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(u),c}timerAvailable(){return je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let a=!1;null==this.programTimersStack?(this.programTimersStack=n,a=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=ie(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),s=ie(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,a&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=ee(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:s[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Pr(),endMs:null}}endTimer(e){return je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Pr(),e)}async getQueryTime(e){if(je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:a,usage:r,isPacked:s,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(a,n),this.textureManager.releaseTexture(t,a,r,s)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=FO){return je().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&oe(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){cr("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return AO(e.shape,t)}packedUnaryOp(e,t,n){const a=new EO(e.shape,t),r=this.compileAndRun(a,[e],n);return po().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=eO(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(je().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,SO,e.dtype);const t=new IO(e.shape,SO),n=this.compileAndRun(t,[e]);return po().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let a;if("string"===t&&null!=n&&n.length>0&&Ce(n[0])){const r=n.map((e=>Wr(e)));a=this.write(r,e,t)}else a=this.write(n,e,t);return this.texData.get(a).usage=null,{dataId:a,shape:e,dtype:t}}makeOutput(e,t,n){return po().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new _O(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new yO(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[_F(e.shape),...AF(e.shape)],a={dtype:e.dtype,shape:n,dataId:e.dataId},r=[_F(t),...AF(t)],s=new bO(r,n),i=[n],o=this.runWebGLProgram(s,[a],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:a,shape:r,dtype:s}=n;null!=t&&ae(oe(r)<=t[0]*t[1]*4,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."));const i=RF(r);let o;o=a?new hD(i):new cD(i);const u=[null!=t?t:mF(i)];return{dtype:s,shape:r,dataId:this.runWebGLProgram(o,[{shape:i,dtype:s,dataId:e}],s,u,!0,t).dataId}}runWebGLProgram(e,t,n,a,r=!1,s){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===hF.DENSE){const t=null!=s?s:mF(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===oe(i.shape))return o.values=xe(i.dtype,0),i;const u=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&oe(t.shape)<=je().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!DF(n.shape,t.shape)){const e=t,a=t.shape;t.shape=n.shape,t=this.packedReshape(t,a),u.push(t),n=this.texData.get(t.dataId),e.shape=a}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let a="";t.concat(n).forEach((t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const s=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:u}=rD(e.packedInputs,t.shape,s);let l="",c="",h="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];l=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=Fe(o);h=`${e[0]===s[1]}_${e[e.length-1]===s[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const p=t.shape.length,d=2===o.length&&le(t.shape,s),f=1===oe(t.shape),m=Do(t.shape,n.shape),g=!e.packedInputs&&p===n.shape.length&&le(s,n.texData.texShape),y=e.packedInputs||o.length>2?"":`${s[0]>1}_${s[1]>1}`;a+=`${p}_${g}_${i?u:""}_${o.length}_${f}_${m}_${d}_${l}_${c}_${h}_${y}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;a+=`${t.shape}_${e}_${r}`}}));const r=e.userCode;let s=e.constructor.name;return s+="_"+a+"_"+r+`${je().getNumber("WEBGL_VERSION")}`,s}(e,l,c),p=this.getAndSaveBinary(h,(()=>function(e,t,n,a){const r=n.map(((e,n)=>{const a={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(a.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:a}})),s=r.map((e=>e.shapeInfo)),i={logicalShape:a.shape,texShape:a.texData.texShape,isUniform:!1,isPacked:a.texData.isPacked,flatOffset:null},o=KF(r,i,t),u=function(e,t){const n=EF(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(bF(e,(()=>e.shaderSource(n,t))),bF(e,(()=>e.compileShader(n))),je().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw vF(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,o),l=e.createProgram(u);return je().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:u,source:o,webGLProgram:l,inShapeInfos:s,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:u,source:o,webGLProgram:l,inShapeInfos:s,outShapeInfo:i},oD(e,t,l))}(this.gpgpu,e,l,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),je().get("ENGINE_COMPILE_ONLY")||function(e,t,n,a,r){t.program.enableShapeUniforms||(uD(t.inShapeInfos,n),uD([t.outShapeInfo],[a]));const s=a.texData.texture,i=a.texData.texShape;a.texData.isPacked?e.setOutputPackedMatrixTexture(s.texture,i[0],i[1]):e.setOutputMatrixTexture(s.texture,i[0],i[1]),e.setProgram(t.webGLProgram),1===je().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,a)=>{const r=t.program.variableNames[a],s=t.uniformLocations[r],i=t.uniformLocations[`offset${r}`],o=t.inShapesLocations[`${r}Shape`],u=t.inTexShapesLocations[`${r}TexShape`];if(o){const{uniformShape:a}=rD(t.program.packedInputs,n.shape,n.texData.texShape);switch(a.length){case 1:e.gl.uniform1iv(o,new Int32Array(a));break;case 2:e.gl.uniform2iv(o,new Int32Array(a));break;case 3:e.gl.uniform3iv(o,new Int32Array(a));break;case 4:e.gl.uniform4iv(o,new Int32Array(a))}}if(u&&e.gl.uniform2i(u,n.texData.texShape[0],n.texData.texShape[1]),null!=s)if(n.isUniform)if(oe(n.shape)<2)e.gl.uniform1f(s,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(s,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,s,a)}));const o=t.outShapeLocation;if(o)switch(a.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(a.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(a.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(a.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(a.shape))}if(t.outShapeStridesLocation){const n=Fe(a.shape);switch(a.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,a.texData.texShape[0],a.texData.texShape[1]),t.program.customUniforms&&r&&t.program.customUniforms.forEach(((n,a)=>{const s=t.customUniformLocations[a],i=r[a];if("float"===n.type)e.gl.uniform1fv(s,i);else if("vec2"===n.type)e.gl.uniform2fv(s,i);else if("vec3"===n.type)e.gl.uniform3fv(s,i);else if("vec4"===n.type)e.gl.uniform4fv(s,i);else if("int"===n.type)e.gl.uniform1iv(s,i);else if("ivec2"===n.type)e.gl.uniform2iv(s,i);else if("ivec3"===n.type)e.gl.uniform3iv(s,i);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(s,i)}})),e.executeProgram()}(this.gpgpu,p,l,c,a),u.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=je().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Pr();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!je().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,a,r=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,a,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(je().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=go((()=>{if(!je().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=je().getBool("DEBUG");je().set("DEBUG",!1);const t=this.abs(Gu(1e-8)).dataSync()[0];if(je().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:a,values:r,texture:s,usage:i,isPacked:o}=t;if(null!=s)return;const u=null!=this.activeTimers;let l;u&&(l=Pr());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=je().getNumber("WEBGL_MAX_TEXTURE_SIZE"),a=je().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(a===1/0&&je().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(a=n/2),t&&(n*=2,a*=2,1===(e=e.map(((t,n)=>n>=e.length-2?J(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=be(e);e=t.newShape}let r=oe(e),s=null;e.length<=1&&r<=n?s=[1,r]:2===e.length&&e[0]<=n&&e[1]<=n?s=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?s=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?s=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?s=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(s=[e[0],e[1]*e[2]*e[3]]);const i=null!=s&&Math.max(...s)>a&&Math.min(...s)<=(t?2:1)&&Math.min(...s)>0;if(null==s||i)if(t){const t=_F(e);let n=2,a=2;e.length&&([n,a]=AF(e)),r=t*(n/2)*(a/2),s=pe(r).map((e=>2*e))}else s=pe(r);return s}(n,o),t.texShape=c),null!=r){const e=RF(n);let s,i=c[1],h=c[0];const p=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!o&&p||([i,h]=gF(c[0],c[1])),s=o?new mD(e,p):new fD(e,p);const d=p?[h,i]:c,f=this.makeTensorInfo(d,a),m=this.texData.get(f.dataId);m.usage=p?pF.PIXELS:pF.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,h,r);const g=[[h,i]],y=!0,b=this.runWebGLProgram(s,[f],a,g,y),x=this.texData.get(b.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,je().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=Pr()-l)}else{const e=this.acquireTexture(c,i,a,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:a}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,a)),n.values}acquireTexture(e,t,n,a){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,a)}computeBytes(e,t){return e[0]*e[1]*Se(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await uf(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw vF(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:a,nanLoc:r,inShapesLocations:s,inTexShapesLocations:i,outShapeLocation:o,outShapeStridesLocation:u,outTexShapeLocation:l}=oD(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=a,e.nanLoc=r,e.inShapesLocations=s,e.inTexShapesLocations=i,e.outShapeLocation=o,e.outShapeStridesLocation=u,e.outTexShapeLocation=l}}}DO.nextDataId=0,Ts()&&To("webgl",(()=>new DO),2);const OO="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class MO{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Mo(t,n),this.enableShapeUniforms=lD(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const LO="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class zO{constructor(e,t,n,a=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Mo(t,n);const r=this.outputShape.length;this.enableShapeUniforms=lD(r);let s="";if(a)if(0===r||1===oe(this.outputShape))s="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(s=`\n          ${aD(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?s+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":s+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=gO("coords",r);this.enableShapeUniforms?s+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:s+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${s}\n\n        setOutput(result);\n      }\n    `}}function PO(e){const{inputs:t,backend:n}=e,{x:a}=t;return n.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}const BO={kernelName:pn,backendName:"webgl",kernelFunc:PO};function WO(e){const{inputs:t,backend:n}=e,{real:a,imag:r}=t,s=n.makeTensorInfo(a.shape,"complex64"),i=n.texData.get(s.dataId),o=PO({inputs:{x:a},backend:n}),u=PO({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:u},s}const VO={kernelName:It,backendName:"webgl",kernelFunc:WO},UO="return (a < 0.) ? b * a : a;",GO="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",HO={kernelName:bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{alpha:s}=a,i=n.makeTensorInfo([],"float32",Lr(s,"float32")),o=je().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zO(GO,r.shape,i.shape):new MO(UO,r.shape,i.shape),u=n.runWebGLProgram(o,[r,i],"float32");return n.disposeIntermediateTensorInfo(i),u}},jO="return (a < 0.) ? b * a : a;",qO="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",KO={kernelName:aa,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a,alpha:r}=t,s=je().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zO(qO,a.shape,r.shape):new MO(jO,a.shape,r.shape);return n.runWebGLProgram(s,[a,r],"float32")}},XO="if (isnan(x)) return x;";function YO({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:a}){return({inputs:r,backend:s})=>{const{x:i}=r,o=s,u=a||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,u);return o.makeTensorInfo(i.shape,u,t)}let l;return l=je().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new EO(i.shape,t):new IO(i.shape,e),o.runWebGLProgram(l,[i],u)}}function ZO({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:a=!1,cpuKernelImpl:r,dtype:s}){return({inputs:i,backend:o})=>{const{a:u,b:l}=i,c=o;if(a&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[a,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,a]=t,r={dataId:n.dataId,dtype:n.dtype,shape:u.shape},s={dataId:a.dataId,dtype:a.dtype,shape:l.shape},i=new MO(e,u.shape,l.shape);return c.runWebGLProgram(i,[r,s],cs(n.dtype,a.dtype))})),s=WO({inputs:{real:a,imag:r},backend:c});return c.disposeIntermediateTensorInfo(a),c.disposeIntermediateTensorInfo(r),s}const h=s||cs(u.dtype,l.dtype);if(("string"===u.dtype||"string"===l.dtype||c.shouldExecuteOnCPU([u,l]))&&null!=r){const e=c.texData.get(u.dataId).values,t=c.texData.get(l.dataId).values,n="string"===u.dtype?pm(e):e,a="string"===u.dtype?pm(t):t,[s,i]=r(u.shape,l.shape,n,a,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=s,o}let p;return p=je().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new zO(t,u.shape,l.shape,n):new MO(e,u.shape,l.shape),c.runWebGLProgram(p,[u,l],h)}}function JO(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":TO;if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":CO;if("prelu"===e)return t?qO:jO;if("leakyrelu"===e)return t?GO:UO;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class QO{constructor(e,t,n,a=!1,r=!1,s=!1,i=null,o=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=lD(this.outputShape.length);const l=a?e[1]:e[2],c=Math.ceil(l/2),h=a?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=a?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class eM{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Mo(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const tM="return a * b;";function nM(e){const{inputs:t,backend:n}=e,{a,b:r}=t,s=cs(a.dtype,r.dtype);if("complex64"===a.dtype){const e=n.texData.get(a.dataId),t=n.texData.get(r.dataId),s=new eM("return areal * breal - aimag * bimag;",a.shape,r.shape),i=new eM("return areal * bimag + aimag * breal;",a.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:a.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],u=n.runWebGLProgram(s,o,"float32"),l=n.runWebGLProgram(i,o,"float32"),c=WO({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([a,r])){const e=n.texData.get(a.dataId),t=n.texData.get(r.dataId),[i,o]=GD(a.shape,r.shape,e.values,t.values,s),u=n.makeTensorInfo(o,s);return n.texData.get(u.dataId).values=i,u}let i;return i=je().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zO(tM,a.shape,r.shape):new MO(tM,a.shape,r.shape),n.runWebGLProgram(i,[a,r],s)}const aM={kernelName:Hn,backendName:"webgl",kernelFunc:nM};function rM(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{shape:s}=a,i=n,o=oe(r.shape),u=ge(s,o),l=oe(u);ae(o===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(r.dataId);return!c.isPacked||DF(r.shape,u)||null!==c.texture&&DF(c.shape,u)?(i.incRef(r.dataId),{dataId:r.dataId,shape:u,dtype:r.dtype}):function(e,t,n){const a=[_F(e.shape),...AF(e.shape)],r={dtype:e.dtype,shape:a,dataId:e.dataId},s=[_F(t),...AF(t)],i=new bO(s,a),o=[a],u=n.runWebGLProgram(i,[r],e.dtype,o,!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(r,u,i)}const sM={kernelName:ha,backendName:"webgl",kernelFunc:rM};class iM{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:a,inSize:r,outSize:s}=e;this.outputShape=[a,s];const i=4*Math.floor(n/4),o=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${ce(e)?e.toPrecision(2):e}, ones);`}let l="";r%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class oM{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:a,inSize:r,outSize:s}=e;this.outputShape=[a,s];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}function uM(e,t,n,a){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],a=yf(n);t.push({inSize:n,windowSize:a,outSize:Math.ceil(n/a)})}return t}(e.shape);let s=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:u,outSize:l}=r[i];let c,h;c="mean"===n?0===i?new iM({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},o):new iM({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l}):new oM({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},n),h=s,s=a.runWebGLProgram(c,[s],t),h.dataId!==e.dataId&&a.disposeIntermediateTensorInfo(h)}return s}class lM{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.rank=n.length;const a=aD(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],a=new Array(t);for(let t=0;t<e.length;t++)a[e[t]]=n[t];return a.join()}(t);this.userCode=`\n    void main() {\n      ${a} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class cM{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const a=aD(this.rank),r=mO("rc",this.rank),s=new Array(this.rank);for(let e=0;e<t.length;e++)s[t[e]]=r[e];const i=`vec2(${s.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${s.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${a} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function hM(e,t,n){const a=je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new cM(e.shape,t):new lM(e.shape,t);return n.runWebGLProgram(a,[e],e.dtype)}function pM(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:i}=a;return function(e,t,n,a){const r=t,s=e.shape.length,i=ye(r,e.shape);let o=i;const u=Cc(o,s),l=null!=u;let c=e;l&&(c=hM(e,u,a),o=Ec(o.length,s)),Tc("sum",o,s);const[h,p]=Nc(c.shape,o);let d=h;n&&(d=Sc(h,i));const f=oe(p),m=rM({inputs:{x:c},attrs:{shape:[oe(e.shape)/f,f]},backend:a}),g=uM(m,hs(e.dtype),"sum",a),y=rM({inputs:{x:g},attrs:{shape:d},backend:a});return a.disposeIntermediateTensorInfo(m),a.disposeIntermediateTensorInfo(g),l&&a.disposeIntermediateTensorInfo(c),y}(r,s,i,n)}const dM={kernelName:Aa,backendName:"webgl",kernelFunc:pM};function fM(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{perm:s}=a,i=n,o=r.shape.length,u=new Array(o);for(let e=0;e<u.length;e++)u[e]=r.shape[s[e]];let l;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=dO(e,r.shape,r.dtype,s,u);l=i.makeTensorInfo(u,r.dtype),i.texData.get(l.dataId).values=t}else l=hM(r,s,i);return l}const mM={kernelName:Ja,backendName:"webgl",kernelFunc:fM};function gM({a:e,b:t,transposeA:n,transposeB:a,backend:r,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const l=e.shape.length,c=t.shape.length,h=n?e.shape[l-2]:e.shape[l-1],p=a?t.shape[c-1]:t.shape[c-2],d=n?e.shape[l-1]:e.shape[l-2],f=a?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=oe(m),b=oe(g),x=Mo(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);ae(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${a} must match.`));const w=n?[y,h,d]:[y,d,h],k=a?[b,f,p]:[b,p,f],v=rM({inputs:{x:e},backend:r,attrs:{shape:w}}),I=rM({inputs:{x:t},backend:r,attrs:{shape:k}}),N=[v,I],S=Math.max(y,b),T=n?v.shape[1]:v.shape[2],C=null!=s,$=null!=i,E="leakyrelu"===u,_=null!=u?JO(u,!0):null;let A;if((1===d||1===f)&&T>1e3&&!1===(C||$||E||null!=_)){let e=v,t=I;n&&(e=fM({inputs:{x:v},backend:r,attrs:{perm:[0,2,1]}}),N.push(e)),a&&(t=fM({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),N.push(t));const s=1===f;let i=e;1!==f&&(i=rM({inputs:{x:e},backend:r,attrs:{shape:[S,T,1]}}),N.push(i));const o=1===f?2:1;let u=t;s&&(u=rM({inputs:{x:t},backend:r,attrs:{shape:[S,1,T]}}),N.push(u));const l=nM({inputs:{a:i,b:u},backend:r});A=pM({inputs:{x:l},backend:r,attrs:{axis:o,keepDims:!0}}),N.push(l)}else{const u=cs(e.dtype,t.dtype),l=new QO(w,k,[S,d,f],n,a,C,_,$,E),c=[v,I];if(null!=s&&c.push(s),$&&c.push(i),E){const e=r.makeTensorInfo([],"float32",Lr(o,"float32"));c.push(e),N.push(e)}A=r.runWebGLProgram(l,c,u)}const R=rM({inputs:{x:A},backend:r,attrs:{shape:x}});N.push(A);for(const e of N)r.disposeIntermediateTensorInfo(e);return R}const yM={kernelName:or,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{a:r,b:s,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=a;return gM({a:r,b:s,transposeA:u,transposeB:l,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},bM="return abs(x);",xM={kernelName:Ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t;if(n.shouldExecuteOnCPU([a])&&"complex64"!==a.dtype){const e=n.texData.get(a.dataId),t=eO(e.values);return n.makeTensorInfo(a.shape,a.dtype,t)}let r;return r=je().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new EO(a.shape,bM):new IO(a.shape,bM),n.runWebGLProgram(r,[a],a.dtype)}},wM=YO({opSnippet:NO+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),kM={kernelName:Je,backendName:"webgl",kernelFunc:wM},vM=YO({opSnippet:NO+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),IM={kernelName:Qe,backendName:"webgl",kernelFunc:vM},NM="return a + b;",SM=ZO({opSnippet:NM,packedOpSnippet:NM,supportsComplex:!0,cpuKernelImpl:ID}),TM={kernelName:et,backendName:"webgl",kernelFunc:SM};class CM{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const a=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${a};\n        setOutput(result);\n      }\n    `}}class $M{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const a=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${a};\n        setOutput(result);\n      }\n    `}}const EM={kernelName:tt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:a}=t,r=n;if(1===r.length)return PO({inputs:{x:r[0]},backend:a});if(r.length>je().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:a}),s=e({inputs:r.slice(t),backend:a});return e({inputs:[n,s],backend:a})}const s=r.map((e=>e.dtype)).reduce(((e,t)=>cs(e,t))),i=r.map((e=>e.shape)),o=je().getBool("WEBGL_PACK")?new $M(r[0].shape,i):new CM(r[0].shape,i);return a.runWebGLProgram(o,r,s)}},_M={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:i}=a,o=r.shape.length,u=ye(s,r.shape);let l=u;const c=Cc(l,o);let h=r;null!=c&&(h=fM({inputs:{x:r},backend:n,attrs:{perm:c}}),l=Ec(l.length,o)),Tc("all",l,o);const[p,d]=Nc(h.shape,l),f=rM({inputs:{x:h},backend:n,attrs:{shape:[-1,oe(d)]}}),m=uM(f,f.dtype,"all",n);let g;return g=rM(i?{inputs:{x:m},backend:n,attrs:{shape:Sc(p,u)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},AM={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:i}=a,o=r.shape.length,u=ye(s,r.shape);let l=u;const c=Cc(l,o);let h=r;null!=c&&(h=fM({inputs:{x:r},backend:n,attrs:{perm:c}}),l=Ec(l.length,o)),Tc("any",l,o);const[p,d]=Nc(h.shape,l),f=rM({inputs:{x:h},backend:n,attrs:{shape:[-1,oe(d)]}}),m=uM(f,f.dtype,"any",n);let g;return g=rM(i?{inputs:{x:m},backend:n,attrs:{shape:Sc(p,u)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class RM{constructor(e,t,n){this.variableNames=["A"];const{windowSize:a,batchSize:r,outSize:s}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,s];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${a};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${a}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class FM{constructor(e,t,n,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,ae(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],s=Math.ceil(r/t);this.outputShape=e.slice(0,-1),s>1&&this.outputShape.push(s),a||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=aD(o),l=gO("coords",o);let c,h;if(1===s){h=o+1;const e=aD(h);c=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[o-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[o-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[o-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[o-2]};`}else h=o,c=`\n        ${u} sourceLocR = coords;\n        ++${l[o-1]};\n        ${u} sourceLocG = coords;\n        ++${l[o-2]};\n        ${u} sourceLocA = coords;\n        --${l[o-1]};\n        ${u} sourceLocB = coords;\n        --${l[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=gO("sourceLocR",h-1).concat("inIdx.r"),g=gO("sourceLocG",h-1).concat("inIdx.g"),y=gO("sourceLocB",h-1).concat("inIdx.b"),b=gO("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=a?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=a?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${l[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function DM(e,t,n,a=null){let r=t.shape[0],s=t.shape[1];null!=a&&(r=a.shape[0],s=a.shape[1]);const i=yf(s),o={windowSize:i,inSize:s,batchSize:r,outSize:Math.ceil(s/i)},u=new RM(o,n,null==a),l=[t];null!=a&&l.push(a);const c=e.runWebGLProgram(u,l,"int32");if(1===c.shape[1])return c;const h=DM(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function OM(e,t,n,a=null){const r=null!=a?a.shape:t.shape,s=yf(r[r.length-1]),i=new FM(r,s,n,null==a),o=null==a?[t]:[t,a],u=e.runWebGLProgram(i,o,"int32");if(u.shape.length===t.shape.length){const a=OM(e,t,n,u);return e.disposeIntermediateTensorInfo(u),a}return u}function MM(e,t,n,a){const r=[n];if(Tc("arg"+a.charAt(0).toUpperCase()+a.slice(1),r,t.shape.length),!je().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],s=e.texData.get(t.dataId);let i=t;null!==s&&s.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,u]=Nc(i.shape,r),l=oe(u),c=rM({inputs:{x:i},backend:e,attrs:{shape:[-1,l]}});n.push(c);const h=DM(e,c,a);n.push(h);const p=rM({inputs:{x:h},backend:e,attrs:{shape:o}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),p}return OM(e,t,a)}const LM={kernelName:rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s}=a;let i=ye(s,r.shape);const o=Cc(i,r.shape.length);let u=r;const l=[];null!=o&&(u=fM({inputs:{x:r},backend:n,attrs:{perm:o}}),l.push(u),i=Ec(i.length,u.shape.length)),Tc("argMax",[i[0]],u.shape.length);const c=MM(n,u,i[0],"max");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},zM={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s}=a;let i=ye(s,r.shape);const o=Cc(i,r.shape.length);let u=r;const l=[];null!=o&&(u=fM({inputs:{x:r},backend:n,attrs:{perm:o}}),l.push(u),i=Ec(i.length,u.shape.length)),Tc("argMin",[i[0]],u.shape.length);const c=MM(n,u,i[0],"min");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},PM=YO({opSnippet:NO+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),BM={kernelName:it,backendName:"webgl",kernelFunc:PM},WM=YO({opSnippet:NO+"return log(x + sqrt(x * x + 1.0));"}),VM={kernelName:ot,backendName:"webgl",kernelFunc:WM},UM=YO({opSnippet:NO+"\n  return atan(x);\n"}),GM={kernelName:ut,backendName:"webgl",kernelFunc:UM},HM=ZO({opSnippet:OO+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+LO+"\n  return result;\n"}),jM={kernelName:ct,backendName:"webgl",kernelFunc:HM},qM=YO({opSnippet:NO+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),KM={kernelName:lt,backendName:"webgl",kernelFunc:qM};class XM{constructor(e,t,n,a=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,i=e.strideHeight,o=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${a?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(s/4),w=s%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class YM{constructor(e,t,n,a=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,i=e.strideDepth,o=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${a?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(s/4),v=s%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const ZM={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t;BF(r,"avgPool");const{filterSize:s,strides:i,pad:o,dimRoundingMode:u}=a;ae($l(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=bl(r.shape,s,i,1,o,u);if(1===l.filterWidth&&1===l.filterHeight&&le(l.inShape,l.outShape))return PO({inputs:{x:r},backend:n});const c=new XM(l,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}},JM={kernelName:dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=a,c=xl(r.shape,s,i,[1,1,1],o,u,l),h=new YM(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class QM{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,r=e.strideWidth,s=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=o-1-e.padInfo.top,c=u-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class eL{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,a=e.filterWidth,r=e.strideDepth,s=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*a);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const tL={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,i=s,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=a,h=xl(i.shape,o,u,[1,1,1],l,c),p=new eL(h);return n.runWebGLProgram(p,[r],i.dtype)}},nL={kernelName:pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,i=s;BF([r,s],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=a,c=bl(i.shape,o,u,1,l),h=new QM(c);return n.runWebGLProgram(h,[r],i.dtype)}},aL={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{a:r,b:s}=t,{transposeA:i,transposeB:o}=a;return gM({a:r,b:s,transposeA:i,transposeB:o,backend:n})}};class rL{constructor(e,t,n,a,r,s){this.outputShape=[],this.variableNames=["x","mean","variance"],Mo(e,t),Mo(e,n);let i="0.0";null!=a&&(Mo(e,a),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Mo(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${s}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class sL{constructor(e,t,n,a,r,s){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Mo(e,t),Mo(e,n);let i="vec4(0.0)";null!=a&&(Mo(e,a),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Mo(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${s}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const iL={kernelName:on,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,mean:r,variance:s,offset:i,scale:o}=e;ae(r.shape.length===s.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ae(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ae(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const l=[a,r,s];let c=null;null!=i&&(c=i.shape,l.push(i));let h=null;null!=o&&(h=o.shape,l.push(o));const p=je().getBool("WEBGL_PACK_NORMALIZATION")?new sL(a.shape,r.shape,s.shape,c,h,u):new rL(a.shape,r.shape,s.shape,c,h,u);return t.runWebGLProgram(p,l,l[0].dtype)}};class oL{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=aD(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return uL.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let a;a=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${uL[t]} = start[${t}] + coords.${uL[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${a}\n        setOutput(getSource(${n}));\n      }\n    `}}const uL=["x","y","z","w","u","v"];class lL{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=aD(this.rank),n=gO("coords",this.rank),a=gO("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${a.slice(-2).join()})`,s=`getChannel(getSource(${a.join()}), ${r})`,i=`\n      result.x = ${s};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${a[this.rank-1]};\n        result.y = ${s};\n        --${a[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${a[this.rank-2]};\n        result.z = ${s};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${a[this.rank-1]};\n          result.w = ${s};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${a[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function cL(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:s,size:i}=a,[o,u]=lu(r,s,i);if(Xo(r,o,u),0===oe(u))return n.makeTensorInfo(u,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=tO(e.values,o,u,r.shape,r.dtype);return n.makeTensorInfo(u,r.dtype,t)}const{isPacked:l}=n.texData.get(r.dataId),c=ou(r.shape,o,u);if(l||!c){const e=je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new lL(u):new oL(u),t=[o];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,a){const r=a.texData.get(e.dataId),s=a.makeTensorInfo(n,e.dtype),i=a.texData.get(s.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=uu(t,Fe(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const u=a.dataRefCount.get(i.slice.origDataId)||1;return a.dataRefCount.set(i.slice.origDataId,u+1),s}(r,o,u,n)}const hL={kernelName:Na,backendName:"webgl",kernelFunc:cL},pL={kernelName:gt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:s,crops:i}=a;ae(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=s.reduce(((e,t)=>e*t)),u=xf(r.shape,s,o),l=wf(u.length,s.length),c=kf(r.shape,s,o),h=vf(i,s.length),p=If(c,i,s.length),d=[],f=rM({inputs:{x:r},backend:n,attrs:{shape:u}}),m=fM({inputs:{x:f},backend:n,attrs:{perm:l}}),g=rM({inputs:{x:m},backend:n,attrs:{shape:c}}),y=cL({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},dL={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,weights:s}=t,{size:i}=a,o=n.readSync(r.dataId),u=n.readSync(s.dataId),l=ND(o,u,s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,l)}},fL={kernelName:xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:a,s1:r}=t,s=n.readSync(a.dataId),i=n.readSync(r.dataId),o=Mo(Array.from(s),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},mL=ZO({opSnippet:"return float(a != b);",cpuKernelImpl:jD,dtype:"bool"}),gL={kernelName:qn,backendName:"webgl",kernelFunc:mL};function yL(e){const{inputs:t,backend:n}=e,{input:a}=t;return PO({inputs:{x:n.texData.get(a.dataId).complexTensorInfos.real},backend:n})}const bL={kernelName:ua,backendName:"webgl",kernelFunc:yL},xL={kernelName:wt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:a,attrs:r}=t,{x:s}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===s.dtype)return PO({inputs:{x:s},backend:a});const t=gh(s.shape),n=e({inputs:{x:s},backend:a,attrs:{dtype:"float32"}}),r=WO({inputs:{real:n,imag:t},backend:a});return t.dispose(),a.disposeIntermediateTensorInfo(n),r}if("complex64"===s.dtype){const t=yL({inputs:{input:s},backend:a}),n=e({inputs:{x:t},backend:a,attrs:{dtype:i}});return a.disposeIntermediateTensorInfo(t),n}if(!Ie(s.dtype,i)){const e=PO({inputs:{x:s},backend:a});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(a.shouldExecuteOnCPU([s])){const e=a.texData.get(s.dataId).values,[t,n,r]=TD(e,s.shape,s.dtype,i);return a.makeTensorInfo(t,n,r)}if("int32"===i)return function(e,t){const n=new IO(e.shape,"return float(int(x));"),a=t.runWebGLProgram(n,[e],"int32");return{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}(s,a);if("bool"===i){const e=a.makeTensorInfo([],"bool",xe("bool",1)),t=mL({inputs:{a:s,b:e},backend:a});return a.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${i}`)}},wL="return ceil(x);",kL=YO({opSnippet:wL,packedOpSnippet:wL,cpuKernelImpl:CD}),vL={kernelName:kt,backendName:"webgl",kernelFunc:kL};class IL{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class NL{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const SL={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{clipValueMin:s,clipValueMax:i}=a;let o;o=je().getBool("WEBGL_PACK_CLIP")?new NL(r.shape):new IL(r.shape);const u=[[s],[i]];return n.runWebGLProgram(o,[r],r.dtype,u)}};class TL{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function CL(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const $L={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t,r=n.texData.get(a.dataId),s=new TL(a.shape),i=[CL(a,r.complexTensorInfos.real),CL(a,r.complexTensorInfos.imag)];return n.runWebGLProgram(s,i,i[0].dtype)}};class EL{constructor(e){this.outputShape=[],this.outputShape=cf(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const a=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${a}));`)}const a=t.length,r=t[t.length-1];n.push(`else setOutput(getT${a}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class _L{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=cf(e,t);const n=this.outputShape,a=n.length,r=aD(a),s=gO("coords",a),i=["x","y","z","w","u","v"].slice(0,a);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const u=i[t],l=i.slice(-2),c=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${u} < ${o[e]}  && ${u} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${AL(i,u,t)}),\n            vec2(${AL(l,u,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${AL(i,u,d)}),\n          vec2(${AL(l,u,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${s}), 0., 0., 0.);\n\n        ${s[a-1]} = ${s[a-1]} + 1;\n        if (${s[a-1]} < ${n[a-1]}) {\n          result.g = getValue(${s});\n        }\n\n        ${s[a-2]} = ${s[a-2]} + 1;\n        if (${s[a-2]} < ${n[a-2]}) {\n          result.a = getValue(${s});\n        }\n\n        ${s[a-1]} = ${s[a-1]} - 1;\n        if (${s[a-2]} < ${n[a-2]} &&\n            ${s[a-1]} < ${n[a-1]}) {\n          result.b = getValue(${s});\n        }\n        setOutput(result);\n      }\n    `}}function AL(e,t,n){const a=e.indexOf(t);return e.map(((e,t)=>t===a?`${e} - ${n}`:e)).join()}function RL(e){const{inputs:t,backend:n}=e,{input:a}=t;return PO({inputs:{x:n.texData.get(a.dataId).complexTensorInfos.imag},backend:n})}const FL={kernelName:fn,backendName:"webgl",kernelFunc:RL};function DL(e,t,n){const a=e[0].dtype;if("complex64"===a){const a=e.map((e=>yL({inputs:{input:e},backend:n}))),r=e.map((e=>RL({inputs:{input:e},backend:n}))),s=DL(a,t,n),i=DL(r,t,n),o=WO({inputs:{real:s,imag:i},backend:n});return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i),o}let r=n.shouldExecuteOnCPU(e);if("string"===a&&(r=!0),r){const r=e.map((e=>{const a=oe(e.shape.slice(t));return rM({inputs:{x:e},backend:n,attrs:{shape:[-1,a]}})})),s=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=cf(r.map((e=>e.shape)),1),o=1===r[0].shape[0],u=$D(s,i,a,o),l=cf(e.map((e=>e.shape)),t),c=n.makeTensorInfo(l,a,u);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const s=je().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(e.length>s){const a=[];for(let r=0;r<e.length;r+=s){const i=e.slice(r,r+s);a.push(DL(i,t,n))}const r=DL(a,t,n);for(const e of a)n.disposeIntermediateTensorInfo(e);return r}if(je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new _L(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,a)}const{tensors2D:i,outShape:o}=function(e,t,n){const a=cf(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>rM({inputs:{x:e},attrs:{shape:[-1,oe(e.shape.slice(t))]},backend:n}))),outShape:a}}(e,t,n),u=new EL(i.map((e=>e.shape))),l=n.runWebGLProgram(u,i,a);i.forEach((e=>n.disposeIntermediateTensorInfo(e)));const c=rM({inputs:{x:l},attrs:{shape:o},backend:n});return n.disposeIntermediateTensorInfo(l),c}function OL(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a,s=ye(r,t[0].shape)[0];lf(t.map((e=>e.shape)),s);const i=cf(t.map((e=>e.shape)),s);if(0===oe(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>oe(e.shape)>0));return 1===o.length?PO({inputs:{x:o[0]},backend:n}):DL(o,s,n)}const ML={kernelName:St,backendName:"webgl",kernelFunc:OL};class LL{constructor(e,t=!1,n=null,a=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=a?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${u});\n      const ivec2 pads = ivec2(${s}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class zL{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,a=e.padInfo.left,r=e.strideDepth,s=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${s}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${a});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class PL{constructor(e,t=!1,n=null,a=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=lD(this.outputShape.length);const s=e.padInfo.left,i=e.strideWidth,o=e.dilationWidth,u=e.filterHeight,l=e.filterWidth,c=l;let h="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<l;e++)h+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;h+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<l;e++)h+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;h+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(h+=`\n           xC = xCCorner + ${n*o};\n           `,1===i){if(n<l&&(s%2==1?(h+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,h+=1===o&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):h+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<l)){const e=s%2==0?J(o):o;o%2==0&&s%2==1||o%2!=0&&s%2!=1?(h+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,h+=o>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):h+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<l&&(s%2==1?(h+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<l&&(h+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(h+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<l&&(h+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<l&&(h+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<l&&(h+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}h+="\n     }\n   ",h+="\n     }\n   ",h+="\n     }\n   ";let p="",d="";n&&(p=a?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:r?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,d="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${h}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${d}\n         setOutput(result);\n       }\n     `}}class BL{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=lD(this.outputShape.length);const{dataFormat:n}=t,a=VF(),r="channelsLast"===n,s=r?1:2,i=r?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let u="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)u+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${s}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${a.output} = result;\n      }\n    `}}function WL(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function VL({x:e,filter:t,convInfo:n,backend:a,bias:r=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:o=null}){const u=e.shape,l=a.texData.get(e.dataId),c=n.inChannels,h=u[0]*u[1]*u[2],p=n.outChannels,d="channelsLast"===n.dataFormat,f=!1;let m;const g=[];if(null!=s){const e=WL(s.shape,d);null!=e&&(s=rM({inputs:{x:s},backend:a,attrs:{shape:e}}),g.push(s))}if(null!=r){const e=WL(r.shape,d);null!=e&&(r=rM({inputs:{x:r},backend:a,attrs:{shape:e}}),g.push(r))}if((1!==h&&1!==p||!(c>1e3))&&l.isPacked&&d&&null!=l.texture&&u[2]%2!=0&&le(l.shape.slice(-3),u.slice(-3))){const c=u[0]*u[1]*(u[2]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,ae(DF(l.shape,h.shape),(()=>`packed reshape ${l.shape} to ${h.shape} isn't free`));const d=rM({inputs:{x:t},backend:a,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(d);const y=gM({a:h,b:d,backend:a,transposeA:!1,transposeB:f,bias:r,activation:o,preluActivationWeights:s,leakyreluAlpha:i}),b=a.texData.get(y.dataId);ae(b.isPacked,(()=>"batchMatMul result is expected to be packed")),l.shape=p,b.shape=n.outShape,m=PO({inputs:{x:y},backend:a}),m.shape=n.outShape,g.push(y)}else{const u=n.outHeight*n.outWidth,l=rM({inputs:{x:e},backend:a,attrs:{shape:d?[n.batchSize,u,n.inChannels]:[n.batchSize,n.inChannels,u]}}),c=rM({inputs:{x:t},backend:a,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=gM({a:d?l:c,b:d?c:l,transposeA:!d,transposeB:f,backend:a,bias:r,activation:o,preluActivationWeights:s,leakyreluAlpha:i});m=rM({inputs:{x:h},backend:a,attrs:{shape:n.outShape}}),g.push(l),g.push(c),g.push(h)}for(const e of g)a.disposeIntermediateTensorInfo(e);return m}function UL({x:e,filter:t,convInfo:n,backend:a,bias:r=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:u,filterHeight:l,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,m=u*l*c,g=p*h,y=[n.batchSize,m,g],b=[];if(null!=s){const e=WL(s.shape,f);null!=e&&(s=rM({inputs:{x:s},backend:a,attrs:{shape:e}}),b.push(s))}if(null!=r){const e=WL(r.shape,f);null!=e&&(r=rM({inputs:{x:r},backend:a,attrs:{shape:e}}),b.push(r))}const x=rM({inputs:{x:t},backend:a,attrs:{shape:[1,m,oe(t.shape)/m]}});b.push(x);const w=new BL(y,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],v=a.runWebGLProgram(w,[e],"float32",k),I=rM({inputs:{x:v},backend:a,attrs:{shape:y}});b.push(v),b.push(I);const N=null!=r,S=null!=s,T="leakyrelu"===o,C=o?JO(o,!0):null,$=new QO(f?I.shape:x.shape,f?x.shape:I.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,N,C,S,T),E=f?[I,x]:[x,I];if(r&&E.push(r),S&&E.push(s),T){const e=a.makeTensorInfo([],"float32",Lr(i,"float32"));E.push(e),b.push(e)}const _=a.runWebGLProgram($,E,"float32"),A=rM({inputs:{x:_},backend:a,attrs:{shape:n.outShape}});b.push(_);for(const e of b)a.disposeIntermediateTensorInfo(e);return A}const GL={kernelName:Tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=a,h=El(u),p=wl(r.shape,s.shape,i,l,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(p.strideWidth<=2&&"channelsLast"===h&&je().getBool("WEBGL_EXP_CONV")){const e=new PL(p),t=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];d=n.runWebGLProgram(e,[r,s],"float32",t)}else if(je().getBool("WEBGL_CONV_IM2COL"))d=UL({x:r,filter:s,convInfo:p,backend:n});else{const e=new LL(p);d=n.runWebGLProgram(e,[r,s],"float32")}else d=VL({x:r,filter:s,convInfo:p,backend:n});const f=rM({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class HL{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,a=e.padInfo.top,r=e.padInfo.left,s="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${a};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${s}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class jL{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,r=e.strideWidth,s="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,u=s?1:2,l=s?2:3,c=s?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${s}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class qL{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,a=e.strideWidth,r=e.padInfo.front,s=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${s};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${a} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class KL{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,a=e.filterWidth,r=e.strideDepth,s=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=a-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${a}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${a} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const XL={kernelName:Ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=a,h=El(u),p=wl(r.shape,c,i,1,o,l,!1,h),d=new HL(p);return n.runWebGLProgram(d,[r,s],"float32")}},YL={kernelName:$t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=a,h=El(l),p=wl(i,s.shape,o,1,u,c,!1,h),d=new jL(p);return n.runWebGLProgram(d,[r,s],"float32")}},ZL={kernelName:Et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:i,pad:o,dilations:u}=a,l=kl(r.shape,s.shape,i,u,o),c=new zL(l);return n.runWebGLProgram(c,[r,s],"float32")}},JL={kernelName:_t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:i,pad:o,filterShape:u}=a,l=kl(r.shape,u,i,1,o),c=new qL(l);return n.runWebGLProgram(c,[r,s],"float32")}},QL={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{pad:i,strides:o,inputShape:u}=a,l=kl(u,s.shape,o,1,i),c=new KL(l);return n.runWebGLProgram(c,[r,s],"float32")}},ez=YO({opSnippet:XO+"\n  return cos(x);\n"}),tz={kernelName:Rt,backendName:"webgl",kernelFunc:ez},nz=YO({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),az={kernelName:Ft,backendName:"webgl",kernelFunc:nz};class rz{constructor(e,t,n,a,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[s,i,o,u]=e,[l]=t,[c,h]=n;this.outputShape=[l,c,h,u];const p="bilinear"===a?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${s}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const sz={kernelName:Mt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{image:r,boxes:s,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=a,c=new rz(r.shape,s.shape,o,u,l);return n.runWebGLProgram(c,[r,s,i],"float32")}};var iz;!function(e){e.Prod="*",e.Sum="+"}(iz||(iz={}));class oz{constructor(e,t,n,a){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const r=this.outputShape.length,s=this.op===iz.Prod?"1.0":"0.0",i=n?s:`getX(${uz(r,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let u="",l="";n?(u=a?"end != "+(o-1):"end != 0",l=a?"end + 1":"end - 1"):(u=a?`end + pow2 < ${o}`:"end >= pow2",l=a?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${aD(r)} coords = getOutputCoords();\n        int end = ${lz(r,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${l};\n          ${lz(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${uz(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function uz(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function lz(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function cz(e,t,n,a,r,s){const i=t.shape.length,o=Cc([a],i);let u=t;null!=o&&(u=fM({inputs:{x:t},backend:n,attrs:{perm:o}}));const l=Ec(1,i)[0];if(l!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${a}`);const c=u.shape[l];let h=PO({inputs:{x:u},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const a=new oz(e,u.shape,!1,s),r=[[t]],i=h;h=n.runWebGLProgram(a,[h],h.dtype,r),n.disposeIntermediateTensorInfo(i)}if(r){const t=new oz(e,u.shape,r,s),a=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(a)}if(null!=o){const e=fM({inputs:{x:h},backend:n,attrs:{perm:$c(o)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(u),e}return h}const hz={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,exclusive:i,reverse:o}=a;return cz(iz.Prod,r,n,s,i,o)}},pz={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,exclusive:i,reverse:o}=a;return cz(iz.Sum,r,n,s,i,o)}},dz={kernelName:Lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,weights:s}=t,{size:i,binaryOutput:o}=a;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(s.dataId),a=ND(e,t,s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,a)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(s),a=SD(e,t,i,o);return n.makeTensorInfo(a.shape,s.dtype,a.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class fz{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const mz={kernelName:zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockSize:s,dataFormat:i}=a,o=r.shape[0],u=("NHWC"===i?r.shape[1]:r.shape[2])*s,l=("NHWC"===i?r.shape[2]:r.shape[3])*s,c=("NHWC"===i?r.shape[3]:r.shape[1])/(s*s),h=new fz("NHWC"===i?[o,u,l,c]:[o,c,u,l],s,i);return n.runWebGLProgram(h,[r],r.dtype)}};class gz{constructor(e,t=!1,n=null,a=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=lD(this.outputShape.length);const s=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let u="",l="";n&&(u=a?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,l="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${s}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${l}\n        setOutput(result);\n      }\n    `}}class yz{constructor(e,t=!1,n=null,a=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=lD(this.outputShape.length);const s=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,u=e.dilationWidth,l=e.filterHeight,c=e.filterWidth,h=c;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)p+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;p+=`\n    for (int r = 0; r < ${l}; r++) {\n      `;for(let e=0;e<c;e++)p+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(h+1)/2;e++){const t=2*e;if(p+=`\n          xC = xCCorner + ${t*u};\n          `,1===o){if(t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,p+=1===u&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=i%2==0?J(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,p+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):p+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(p+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(p+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let d="",f="";n&&(d=a?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${s};\n        int q = d2 - d1 * ${s};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const bz={kernelName:Pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:i,pad:o,dilations:u,dimRoundingMode:l}=a;let c=u;null==c&&(c=[1,1]),ae($l(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=wl(r.shape,s.shape,i,c,o,l,!0);let p;p=je().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new yz(h):new gz(h);const d=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(p,[r,s],"float32",d)}};class xz{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,a=e.padInfo.top,r=e.padInfo.left,s=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${s} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${a};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wz{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,r=e.strideWidth,s=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const kz={kernelName:Bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=a,h=wl(r.shape,c,i,o,u,l,!0),p=new xz(h);return n.runWebGLProgram(p,[r,s],"float32")}},vz={kernelName:Wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=a,h=wl(c,s.shape,i,o,u,l,!0),p=new wz(h);return n.runWebGLProgram(p,[r,s],"float32")}};class Iz{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const Nz={kernelName:Vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t,r=[...a.shape,...a.shape],s=oe(a.shape),i=rM({inputs:{x:a},backend:n,attrs:{shape:[s]}}),o=new Iz(s),u=n.runWebGLProgram(o,[i],i.dtype),l=rM({inputs:{x:u},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),l}};class Sz{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:a,strideHeight:r,strideWidth:s,filterHeight:i,filterWidth:o,dilationHeight:u,dilationWidth:l}=e,{top:c,left:h}=a;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${s});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const Tz={kernelName:Ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:i,pad:o,dilations:u}=a,l=yl(r.shape,s.shape,i,o,"NHWC",u);let c;const h=new Sz(l);c=n.runWebGLProgram(h,[r,s],"float32");const p=rM({inputs:{x:c},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(c),p}},Cz={kernelName:qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{equation:r}=a,s=t,{allDims:i,summedDims:o,idDims:u}=Gf(r,s.length);jf(i.length,u,s);const{path:l,steps:c}=qf(o,u),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:a}=Hf(d,u[t]);let r;Kf(e)?r=s[t]:(r=fM({inputs:{x:s[t]},backend:n,attrs:{perm:e}}),f.push(r));const i=r.shape.slice();for(let e=0;e<a.length;++e)i.splice(a[e],0,1);le(r.shape,i)||(r=rM({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=nM({inputs:{a:r,b:p},backend:n}),f.push(p))}e<h-1&&(l[e]>=0&&(p=pM({inputs:{x:p},backend:n,attrs:{axis:l[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},$z=YO({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),Ez={kernelName:Kt,backendName:"webgl",kernelFunc:$z},_z={kernelName:Xt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:a,y:r}=t,s=je().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zO("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",a.shape,r.shape):new MO("return (b >= 1.0) ? a : a * (b + 1.0);",a.shape,r.shape);return n.runWebGLProgram(s,[a,r],a.dtype)}},Az=ZO({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:ED}),Rz={kernelName:Zt,backendName:"webgl",kernelFunc:Az},Fz=YO({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Tf};\n  float a1 = ${Cf};\n  float a2 = ${$f};\n  float a3 = ${Ef};\n  float a4 = ${_f};\n  float a5 = ${Af};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),Dz={kernelName:Yt,backendName:"webgl",kernelFunc:Fz},Oz=YO({opSnippet:XO+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:_D,dtype:"float32"}),Mz={kernelName:Jt,backendName:"webgl",kernelFunc:Oz};function Lz(e){const{inputs:t,attrs:n,backend:a}=e,{dim:r}=n,{input:s}=t,i=s.shape.length,o=s.shape.slice();let u=r;return r<0&&(ae(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),u=i+r+1),o.splice(u,0,1),rM({inputs:{x:s},backend:a,attrs:{shape:o}})}const zz={kernelName:Qt,backendName:"webgl",kernelFunc:Lz},Pz="return exp(x) - 1.0;",Bz=YO({opSnippet:Pz,packedOpSnippet:Pz,cpuKernelImpl:AD}),Wz={kernelName:en,backendName:"webgl",kernelFunc:Bz};class Vz{constructor(e,t,n){this.variableNames=["real","imag"];const a=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,s=n?`${a}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${a});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${a}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${s};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function Uz(e,t,n){const a=n.texData.get(e.dataId),r=oe(e.shape),s=e.shape[e.shape.length-1],i=rM({inputs:{x:e},backend:n,attrs:{shape:[r/s,s]}}),o=i.shape,u=new Vz("real",o,t),l=new Vz("imag",o,t),c=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:o},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(u,c,"float32"),p=n.runWebGLProgram(l,c,"float32"),d=WO({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=rM({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const Gz={kernelName:tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t;return Uz(a,!1,n)}};class Hz{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function jz(e){const{backend:t,attrs:n}=e,{shape:a,value:r}=n;let{dtype:s}=n;if(s=s||_e(r),"string"===s){const e=we(s,oe(a));return e.fill(r),t.makeTensorInfo(a,s,e)}{const e=new Hz(a,r),n=[[r]];return t.runWebGLProgram(e,[],s,n)}}const qz={kernelName:nn,backendName:"webgl",kernelFunc:jz};class Kz{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Xz={kernelName:an,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,a=t,r=new Kz(n.shape);return a.runWebGLProgram(r,[n],n.dtype)}},Yz="return floor(x);",Zz=YO({opSnippet:Yz,packedOpSnippet:Yz,cpuKernelImpl:RD}),Jz={kernelName:rn,backendName:"webgl",kernelFunc:Zz},Qz=ZO({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),eP={kernelName:sn,backendName:"webgl",kernelFunc:Qz};class tP{constructor(e){this.variableNames=["A"];const t=VF(),[n,a]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class nP{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=VF(),[n,a]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${a}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const aP={kernelName:sr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e;let{pixels:r}=t;const{numChannels:s}=a,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[u,l]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[l,u],h=[l,u,s];if(o||i){const e=je().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=rP&&e===sP||(sP=e,rP=document.createElement("canvas").getContext("2d",{willReadFrequently:sP})),rP.canvas.width=u,rP.canvas.height=l,rP.drawImage(r,0,0,u,l),r=rP.canvas}const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=pF.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const d=je().getBool("WEBGL_PACK")?new nP(h):new tP(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let rP,sP=je().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const iP={kernelName:ur,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=a,m=El(c),g=wl(r.shape,s.shape,u,h,l,p,!1,m);let y;const b=[],x=null!=i,w=null!=o,k="leakyrelu"===d,v=()=>{const e=[r,s],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=rM({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(i,c)),w&&e.push(t(o,c)),k){const t=n.makeTensorInfo([],"float32",Lr(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&je().getBool("WEBGL_EXP_CONV")){const e=d?JO(d,!0):null,t=new PL(g,x,e,w,k),a=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],r=v();y=n.runWebGLProgram(t,r,"float32",a)}else if(je().getBool("WEBGL_CONV_IM2COL"))y=UL({x:r,filter:s,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=d?JO(d,!1):null,t=new LL(g,x,e,w,k),a=v();y=n.runWebGLProgram(t,a,"float32")}else y=VL({x:r,filter:s,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const I=rM({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}},oP={kernelName:lr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=a,f=[];let m=c;null==m&&(m=[1,1]),ae($l(u,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`));const g=wl(r.shape,s.shape,u,m,l,h,!0),y=je().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?JO(p,y):null,x=[r,s],w=null!=i,k=null!=o,v="leakyrelu"===p;if(w&&x.push(i),k&&x.push(o),v){const e=n.makeTensorInfo([],"float32",Lr(d,"float32"));x.push(e),f.push(e)}let I;I=y?new yz(g,w,b,k,v):new gz(g,w,b,k,v);const N=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],S=n.runWebGLProgram(I,x,"float32",N);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};class uP{constructor(e,t,n,a){this.sliceDim=e,this.strides=t,this.paramsShape=a,this.variableNames=["x","indices"],this.outputShape=n;const r=aD(n.length);let s="\n    int index;";for(let e=0;e<this.sliceDim;e++)s+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${s}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const lP={kernelName:ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:a,indices:r}=t,s=r.shape,i=s[s.length-1],o=oe(a.shape),[u,l,c,h]=Uo(a,r),p=rM({inputs:{x:r},backend:n,attrs:{shape:[l,i]}}),d=rM({inputs:{x:a},backend:n,attrs:{shape:[oe(a.shape)/c,c]}});if(n.shouldExecuteOnCPU([a,r])||"string"===a.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(a),s=FD(e,t,a.dtype,l,i,c,h,a.shape,o);return n.makeTensorInfo(u,a.dtype,s.values)}const f=new uP(i,h,[l,c],a.shape),m=n.runWebGLProgram(f,[d,p],d.dtype),g=rM({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class cP{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=aD(this.rank),a=function(e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let a=0;a<e.length;a++)2===a?n.push("index"):n.push(`${t[a]}`);return n.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${a}));\n      }\n    `}}function hP(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,indices:s}=t,{axis:i,batchDims:o}=a,u=ye(i,r.shape)[0];if(je().get("DEBUG")){const e=n.readSync(s.dataId),t=r.shape[u];for(let n=0;n<e.length;++n){const a=e[n];ae(a<=t-1&&a>=0,(()=>`GatherV2: the index value ${a} is not in [0, ${t-1}]`))}}const l=hm(r,s,u,o),c=oe(s.shape),h=[],p=rM({inputs:{x:r},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),d=rM({inputs:{x:s},backend:n,attrs:{shape:[l.batchSize,c/l.batchSize]}});h.push(p),h.push(d);const f=[l.batchSize,l.outerSize,c/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.bufferSync(d),t=n.bufferSync(p),a=DD(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,a.dtype,a.values)}const m=new cP(p.shape,f),g=n.runWebGLProgram(m,[p,d],p.dtype);h.push(g);const y=rM({inputs:{x:g},backend:n,attrs:{shape:l.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const pP={kernelName:un,backendName:"webgl",kernelFunc:hP},dP=ZO({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:OD,dtype:"bool"}),fP={kernelName:cn,backendName:"webgl",kernelFunc:dP},mP=ZO({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:MD}),gP={kernelName:hn,backendName:"webgl",kernelFunc:mP},yP={kernelName:dn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t;return Uz(a,!0,n)}},bP=YO({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),xP={kernelName:mn,backendName:"webgl",kernelFunc:bP},wP=YO({opSnippet:"return float(isinf(x));",dtype:"bool"}),kP={kernelName:gn,backendName:"webgl",kernelFunc:wP},vP=YO({opSnippet:"return float(isnan(x));",dtype:"bool"}),IP={kernelName:yn,backendName:"webgl",kernelFunc:vP},NP=ZO({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:LD,dtype:"bool"}),SP={kernelName:xn,backendName:"webgl",kernelFunc:NP},TP=ZO({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:zD,dtype:"bool"}),CP={kernelName:wn,backendName:"webgl",kernelFunc:TP},$P={kernelName:kn,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:a,stop:r,num:s}=n,i=PD(a,r,s);return t.makeTensorInfo([i.length],"float32",i)}},EP=YO({opSnippet:XO+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:BD}),_P={kernelName:vn,backendName:"webgl",kernelFunc:EP},AP=YO({opSnippet:XO+"\n  return log(1.0 + x);\n"}),RP={kernelName:In,backendName:"webgl",kernelFunc:AP},FP=ZO({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),DP={kernelName:Nn,backendName:"webgl",kernelFunc:FP},OP=YO({opSnippet:"return float(!(x >= 1.0));"}),MP={kernelName:Sn,backendName:"webgl",kernelFunc:OP},LP=ZO({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),zP={kernelName:Tn,backendName:"webgl",kernelFunc:LP};class PP{constructor(e,t,n,a,r){this.variableNames=["x"],this.outputShape=[];const s=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${a}) * sum`;o=.5===r?`inversesqrt(${u})`:1===r?`1.0/(${u})`:`exp(log(${u}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${s}; j <= ${s}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class BP{constructor(e,t,n,a,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const s=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${a}) * sum`;o=.5===r?`inversesqrt(${u})`:1===r?`1.0/(${u})`:`exp(log(${u}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${s};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${s}; j <= ${s}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const WP={kernelName:_n,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{depthRadius:s,bias:i,alpha:o,beta:u}=a,l=je().getBool("WEBGL_PACK_NORMALIZATION")?new BP(r.shape,s,i,o,u):new PP(r.shape,s,i,o,u);return n.runWebGLProgram(l,[r],r.dtype)}};class VP{constructor(e,t,n,a,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=a,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${a}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${a})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const UP={kernelName:An,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r,y:s,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=a,h=new VP(r.shape,o,u,l,c);return n.runWebGLProgram(h,[r,s,i],r.dtype)}};function GP(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reductionIndices:s,keepDims:i}=a,o=r.shape.length,u=ye(s,r.shape);let l=u;const c=Cc(l,o),h=null!=c,p=n.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const a=dO(e,r.shape,r.dtype,c,t);d=n.makeTensorInfo(t,r.dtype),n.texData.get(d.dataId).values=a}else d=hM(r,c,n);l=Ec(l.length,o)}Tc("max",l,o);const[f,m]=Nc(d.shape,l);let g,y=f;if(i&&(y=Sc(f,u)),p){const e=n.texData.get(d.dataId).values,t=WD(e,oe(m),y,r.dtype);g=n.makeTensorInfo(y,r.dtype),n.texData.get(g.dataId).values=t}else g=function(e,t,n,a){const r=oe(t),s=rM({inputs:{x:e},attrs:{shape:[oe(e.shape)/r,r]},backend:a}),i=uM(s,e.dtype,"max",a),o=rM({inputs:{x:i},attrs:{shape:n},backend:a});return a.disposeIntermediateTensorInfo(s),a.disposeIntermediateTensorInfo(i),o}(d,m,y,n);return h&&n.disposeIntermediateTensorInfo(d),g}const HP={kernelName:Rn,backendName:"webgl",kernelFunc:GP},jP=ZO({opSnippet:OO+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+LO+"\n  return result;\n",cpuKernelImpl:VD}),qP={kernelName:Fn,backendName:"webgl",kernelFunc:jP},KP={kernelName:Dn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t;BF(r,"maxPool");const{filterSize:s,strides:i,pad:o,dimRoundingMode:u}=a;ae($l(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=bl(r.shape,s,i,1,o,u);if(1===l.filterWidth&&1===l.filterHeight&&le(l.inShape,l.outShape))return PO({inputs:{x:r},backend:n});const c=new XM(l,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}},XP={kernelName:Mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:s,strides:i,pad:o,dataFormat:u,dimRoundingMode:l}=a,c=xl(r.shape,s,i,[1,1,1],o,l,u),h=new YM(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class YP{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,a=e.dilationHeight,r=e.effectiveFilterHeight,s=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=s-1-e.padInfo.left,u=r*s-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${s} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ZP{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,a=e.strideWidth,r=e.dilationDepth,s=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=u-1-e.padInfo.top,p=l-1-e.padInfo.left,d=o*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${s}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${a}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const JP={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,i=s,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=a,h=xl(i.shape,o,u,[1,1,1],l,c),p=new YM(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new ZP(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}},QP={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s,output:i}=t,o=s;BF([s,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=a,p=bl(o.shape,u,l,1,c,h),d=new XM(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new YP(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},eB={kernelName:zn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:a}=e,{filterSize:r,strides:s,pad:i,includeBatchInIndex:o}=t,u=n;ae(4===a.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${a.shape.length}.`));const l=[1,1];ae($l(s,l),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${l}'`));const c=bl(a.shape,r,s,l,i),[h,p]=function(e,t,n,a){let r=new XM(n,"max",!1);const s=a.runWebGLProgram(r,[e],"float32");return r=new XM(n,"max",!0,!0,t),[s,a.runWebGLProgram(r,[e],"float32")]}(a,o,c,u);return[h,p]}},tB={kernelName:Pn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:a}=e,{keepDims:r,axis:s}=t,i=n,o=a.shape.length,u=ye(s,a.shape);let l=u;const c=Cc(l,o),h=null!=c,p=i.shouldExecuteOnCPU([a]),d=[];let f=a;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=a.shape[c[e]];const n=dO(e,a.shape,a.dtype,c,t);f=i.makeTensorInfo(t,a.dtype),i.texData.get(f.dataId).values=n}else f=hM(a,c,i);d.push(f),l=Ec(l.length,o)}Tc("sum",l,o);const[m,g]=Nc(f.shape,l);let y=m;r&&(y=Sc(m,u));const b=function(e,t,n,a){const r=oe(t),s=rM({inputs:{x:e},attrs:{shape:[oe(e.shape)/r,r]},backend:a}),i=uM(s,"float32","mean",a),o=rM({inputs:{x:i},attrs:{shape:n},backend:a});return a.disposeIntermediateTensorInfo(s),a.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}},nB={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:i}=a,o=r.shape.length,u=ye(s,r.shape);let l=u;const c=Cc(l,o);let h=r;null!=c&&(h=fM({inputs:{x:r},backend:n,attrs:{perm:c}}),l=Ec(l.length,r.shape.length)),Tc("min",l,o);const[p,d]=Nc(h.shape,l),f=rM({inputs:{x:h},backend:n,attrs:{shape:[-1,oe(d)]}}),m=uM(f,f.dtype,"min",n);let g;return g=rM(i?{inputs:{x:m},backend:n,attrs:{shape:Sc(p,u)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},aB=ZO({opSnippet:OO+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+LO+"\n  return result;\n",cpuKernelImpl:UD}),rB={kernelName:Wn,backendName:"webgl",kernelFunc:aB};class sB{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,r=aD(a),s=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a),u="reflect"===n?0:1;this.userCode=1!==a?`\n      ${r} start = ${r}(${s});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${a}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${s};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class iB{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,r=aD(a),s=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=gO("rc",a),u=gO("source",a),l=`${o[a-1]} < ${this.outputShape[a-1]}`,c=1===a?"source":`vec2(${u.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===a){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[a-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[a-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[a-2]} += 1;\n        if(${o[a-2]} < ${this.outputShape[a-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${o[a-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${s});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const oB={kernelName:Vn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a}=e,{paddings:r,mode:s}=n,i=je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new iB(a.shape,r,s):new sB(a.shape,r,s);return t.runWebGLProgram(i,[a],a.dtype)}},uB=ZO({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+LO+"\n  return result;\n"}),lB={kernelName:Un,backendName:"webgl",kernelFunc:uB};class cB{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const hB=ZO({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),pB={kernelName:jt,backendName:"webgl",kernelFunc:hB},dB="return a - b;",fB=ZO({opSnippet:dB,packedOpSnippet:dB,supportsComplex:!0,cpuKernelImpl:cO}),mB={kernelName:ja,backendName:"webgl",kernelFunc:fB};function gB(e){const{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{dim:s}=a,i=ye([s],r.shape),o=GP({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),u=Sc(o.shape,i),l=rM({inputs:{x:o},backend:n,attrs:{shape:u}}),c=fB({inputs:{a:r,b:l},backend:n}),h=Oz({inputs:{x:c},backend:n}),p=pM({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=rM({inputs:{x:p},backend:n,attrs:{shape:u}}),f=hB({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const yB={kernelName:Da,backendName:"webgl",kernelFunc:gB},bB={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{numSamples:s,seed:i,normalized:o}=a,u=o?r:gB({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),l=u.shape[0],c=u.shape[1],h=new cB(l,c,s),p=[[i]],d=n.runWebGLProgram(h,[u],"int32",p);return o||n.disposeIntermediateTensorInfo(u),d}},xB=NO+"\n  return -x;\n",wB={kernelName:jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t;if(n.shouldExecuteOnCPU([a])){const e=n.texData.get(a.dataId),[t,r]=HD(e.values,a.shape,a.dtype);return n.makeTensorInfo(r,a.dtype,t)}let r;return r=je().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new EO(a.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new IO(a.shape,xB),n.runWebGLProgram(r,[a],a.dtype)}},kB=bd,vB={kernelName:Kn,backendName:"webgl",kernelFunc:function(e){cr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=a,l=n.readSync(r.dataId),c=n.readSync(s.dataId),{selectedIndices:h}=kB(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},IB=xd,NB={kernelName:Xn,backendName:"webgl",kernelFunc:function(e){cr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=a,c=n.readSync(r.dataId),h=n.readSync(s.dataId),{selectedIndices:p,validOutputs:d}=IB(c,h,i,o,u,l);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},SB=wd,TB={kernelName:Yn,backendName:"webgl",kernelFunc:function(e){cr("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=a,c=n.readSync(r.dataId),h=n.readSync(s.dataId),p=i,d=o,f=u,m=l,{selectedIndices:g,selectedScores:y}=SB(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class CB{constructor(e,t,n,a){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${a}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const $B={kernelName:Jn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{indices:r}=t,{dtype:s,depth:i,onValue:o,offValue:u}=a,l=oe(r.shape),c=new CB(l,i,o,u),h=rM({inputs:{x:r},backend:n,attrs:{shape:[l]}}),p=n.runWebGLProgram(c,[h],s);n.disposeIntermediateTensorInfo(h);const d=rM({inputs:{x:p},backend:n,attrs:{shape:[...r.shape,i]}});return n.disposeIntermediateTensorInfo(p),d}};function EB(e){const{inputs:t,backend:n}=e,{x:a}=t;if("complex64"===a.dtype){const e=yL({inputs:{input:a},backend:n}),t=EB({inputs:{x:e},backend:n}),r=RL({inputs:{input:a},backend:n}),s=EB({inputs:{x:r},backend:n}),i=WO({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),i}return jz({attrs:{shape:a.shape,dtype:a.dtype,value:"string"===a.dtype?"":0},backend:n})}const _B={kernelName:ar,backendName:"webgl",kernelFunc:EB},AB={kernelName:Zn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:a}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=yL({inputs:{input:r},backend:a}),n=e({inputs:{x:t},backend:a}),s=RL({inputs:{input:r},backend:a}),i=EB({inputs:{x:s},backend:a}),o=WO({inputs:{real:n,imag:i},backend:a});return a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(s),a.disposeIntermediateTensorInfo(i),o}return jz({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:a})}},RB={kernelName:Qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a;if(1===t.length)return Lz({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const s=t[0].shape,i=t[0].dtype;t.forEach((e=>{re(s,e.shape,"All tensors passed to stack must have matching shapes"),ae(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],u=OL({inputs:t.map((e=>{const t=Lz({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}};class FB{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,r=aD(a),s=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a);this.userCode=1!==a?`\n      ${r} start = ${r}(${s});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${s};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class DB{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,r=aD(a),s=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=gO("rc",a),u=gO("source",a),l=`${o[a-1]} < ${this.outputShape[a-1]}`,c=1===a?"source":`vec2(${u.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[a-1]} += 1;\n       if(${l}) {\n      `,1===a?"":`}\n       rc = outputLoc;\n       ${o[a-2]} += 1;\n       if(${o[a-2]} < ${this.outputShape[a-2]}) {`,1===a?"":`  ${o[a-1]} += 1;\n         if(${l}) {`],p=1===a?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===a?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;d+=1===a?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${s});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const OB=e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{paddings:s,constantValue:i}=a;if(0===oe(r.shape)){const e=s.map(((e,t)=>e[0]+r.shape[t]+e[1]));return jz({backend:n,attrs:{shape:e,value:i,dtype:r.dtype}})}const o=je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new DB(r.shape,s,i):new FB(r.shape,s,i),u=[[i]];return n.runWebGLProgram(o,[r],r.dtype,u)},MB={kernelName:ea,backendName:"webgl",kernelFunc:OB},LB=ZO({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+LO+"\n  return result;\n"}),zB={kernelName:na,backendName:"webgl",kernelFunc:LB},PB={kernelName:ra,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:i}=a,o=r.shape.length,u=[],l=ye(s,r.shape);let c=l;const h=Cc(c,o);let p,d=r;if(null!=h&&(d=fM({inputs:{x:r},backend:n,attrs:{perm:h}}),c=Ec(c.length,o),u.push(d)),Tc("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:a,outDtype:r}=qD(d.shape,d.dtype,e,c);p=n.makeTensorInfo(a,r,t)}else{const[e,t]=Nc(d.shape,c),a=oe(t),s=rM({inputs:{x:d},backend:n,attrs:{shape:[-1,a]}}),i=uM(s,hs(r.dtype),"prod",n);p=rM({inputs:{x:i},backend:n,attrs:{shape:e}}),u.push(s),u.push(i)}if(i){u.push(p);const e=Sc(p.shape,l);p=rM({inputs:{x:p},backend:n,attrs:{shape:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},BB={kernelName:sa,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{paramsNestedSplits:r,paramsDenseValues:s,indices:i}=t,{outputRaggedRank:o}=a,u=r.map((e=>n.readSync(e.dataId))),l=r.map((e=>e.shape)),c=n.readSync(s.dataId),h=n.readSync(i.dataId),[p,d,f]=KD(u,l,c,s.shape,s.dtype,h,i.shape,o),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,s.dtype,d);return m.concat([g])}},WB={kernelName:ia,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{shape:r,values:s,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:u}=a,l=n.readSync(r.dataId),c=n.readSync(s.dataId),h=n.readSync(i.dataId),p=o.map((e=>n.readSync(e.dataId))),d=o.map((e=>e.shape)),[f,m]=XD(l,r.shape,c,s.shape,s.dtype,h,i.shape,p,d,u);return n.makeTensorInfo(f,s.dtype,m)}},VB=e=>{const{backend:t,attrs:n}=e,{start:a,stop:r,step:s,dtype:i}=n,o=YD(a,r,s,i);return t.makeTensorInfo([o.length],i,o)},UB={kernelName:oa,backendName:"webgl",kernelFunc:VB},GB=YO({opSnippet:"return 1.0 / x;"}),HB={kernelName:la,backendName:"webgl",kernelFunc:GB},jB=YO({opSnippet:NO+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),qB={kernelName:ca,backendName:"webgl",kernelFunc:jB},KB=YO({opSnippet:NO+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),XB={kernelName:ga,backendName:"webgl",kernelFunc:KB};class YB{constructor(e,t,n,a,r){this.variableNames=["A"],this.outputShape=[];const[s,i,o,u]=e;this.outputShape=[s,t,n,u];const l=[a&&t>1?i-1:i,a&&n>1?o-1:o],c=[a&&t>1?t-1:t,a&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class ZB{constructor(e,t,n,a,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,i,o,u]=e;this.outputShape=[s,t,n,u];const l=[a&&t>1?i-1:i,a&&n>1?o-1:o],c=[a&&t>1?t-1:t,a&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const JB={kernelName:fa,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:s,halfPixelCenters:i,size:o}=a,[u,l]=o,c=je().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ZB(r.shape,u,l,s,i):new YB(r.shape,u,l,s,i);return n.runWebGLProgram(c,[r],"float32")}};class QB{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,a,r]=t,[,s,i]=e,o=[n&&s>1?a-1:a,n&&i>1?r-1:r],u=[n&&s>1?s-1:s,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${a-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const eW={kernelName:ma,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r,dy:s}=t,{alignCorners:i}=a,o=new QB(s.shape,r.shape,i);return n.runWebGLProgram(o,[s],s.dtype)}};class tW{constructor(e,t,n,a,r){this.variableNames=["A"],this.outputShape=[];const[s,i,o,u]=e;this.outputShape=[s,t,n,u];const l=[a&&t>1?i-1:i,a&&n>1?o-1:o],c=[a&&t>1?t-1:t,a&&n>1?n-1:n],h=a?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class nW{constructor(e,t,n,a,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,i,o,u]=e;this.outputShape=[s,t,n,u];const l=[a&&t>1?i-1:i,a&&n>1?o-1:o],c=[a&&t>1?t-1:t,a&&n>1?n-1:n],h=a?"0.5":"0.0";let p;p=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const aW={kernelName:pa,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:s,halfPixelCenters:i,size:o}=a,[u,l]=o,c=je().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new nW(r.shape,u,l,s,i):new tW(r.shape,u,l,s,i);return n.runWebGLProgram(c,[r],r.dtype)}};class rW{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,a,r]=t,[,s,i]=e,o=[n&&s>1?a-1:a,n&&i>1?r-1:r],u=[n&&s>1?s-1:s,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const sW={kernelName:da,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r,dy:s}=t,{alignCorners:i}=a,o=new rW(s.shape,r.shape,i);return n.runWebGLProgram(o,[s],s.dtype)}};class iW{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const a=e.map(((n,a)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(a))).join(","),r=aD(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${a}));\n      }\n    `}}class oW{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const a=gO("rc",n),r=`${a[n-1]} + 1 < ${this.outputShape[n-1]}`,s=`${a[n-2]} + 1 < ${this.outputShape[n-2]}`,i=aD(n);function o(n){const a=e.map(((a,r)=>function(n,a){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${a[n]} - 1`:`${a[n]}`}(r,n)));return`getChannel(getX(${a.join(",")}), vec2(${a.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(a.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(a.slice())};\n          }\n          if(${s}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(a.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(a.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const uW={kernelName:ya,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dims:s}=a,i=r.shape.length,o=ye(s,r.shape);if(0===i)return PO({inputs:{x:r},backend:n});const u=je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new oW(r.shape,o):new iW(r.shape,o);return n.runWebGLProgram(u,[r],r.dtype)}};class lW{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],a=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const cW={kernelName:ir,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,{radians:r,fillValue:s,center:i}=t,o=n,u=new lW(a.shape,s),[l,c]=bf(i,a.shape[1],a.shape[2]),h=[[l,c,Math.sin(r),Math.cos(r)]];return o.runWebGLProgram(u,[a],a.dtype,h)}},hW=YO({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),pW={kernelName:ba,backendName:"webgl",kernelFunc:hW},dW=YO({opSnippet:"return inversesqrt(x);",cpuKernelImpl:ZD}),fW={kernelName:xa,backendName:"webgl",kernelFunc:dW};class mW{constructor(e,t,n,a,r,s,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=s;const o=aD(r.length),u=aD(s.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let h="";1===a?h="i":2===a&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const gW={kernelName:wa,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:r,updates:s}=t,{shape:i}=a,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=jo(0,r,i),p=[h/l,l];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=rM({inputs:{x:r},backend:n,attrs:{shape:[u,o]}}),f=rM({inputs:{x:s},backend:n,attrs:{shape:[u,l]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new mW(u,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=rM({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class yW{constructor(e,t,n,a){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const r=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,s=2===je().getNumber("WEBGL_VERSION")?"while (left < right) {":r,i="left"===a?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${s}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const bW={kernelName:ka,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sortedSequence:r,values:s}=t,{side:i}=a,o=new yW(r.shape[0],r.shape[1],s.shape[1],i),u=[[r.shape[1]]];return n.runWebGLProgram(o,[r,s],"int32",u)}};class xW{constructor(e,t,n){let a,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",a="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],i=[];for(let a=0;a<t.length;a++)i.push(`${n[a]}`),a<e&&s.push(`${n[a]}`);a=s.join(),r=i.join()}const s=aD(n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        float cVal = getC(${a});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const wW={kernelName:va,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:a,t:r,e:s}=t,i=new xW(a.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[a,r,s],cs(r.dtype,s.dtype))}},kW=YO({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Nf};\n  float scale = ${Sf};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),vW={kernelName:Ia,backendName:"webgl",kernelFunc:kW},IW=YO({opSnippet:XO+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:QD}),NW={kernelName:$a,backendName:"webgl",kernelFunc:IW},SW=YO({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),TW={kernelName:Ca,backendName:"webgl",kernelFunc:SW},CW=YO({opSnippet:XO+"\n  return sin(x);\n"}),$W={kernelName:Sa,backendName:"webgl",kernelFunc:CW},EW=YO({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),_W={kernelName:Ta,backendName:"webgl",kernelFunc:EW},AW=YO({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),RW={kernelName:Ea,backendName:"webgl",kernelFunc:AW},FW={kernelName:Ra,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:s,paddings:i}=a;ae(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=s.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...i);for(let e=1+s.length;e<r.shape.length;++e)u.push([0,0]);const l=[],c=OB({inputs:{x:r},backend:n,attrs:{paddings:u,constantValue:0}}),h=xf(c.shape,s,o,!1),p=wf(h.length,s.length,!1),d=kf(c.shape,s,o,!1),f=rM({inputs:{x:c},backend:n,attrs:{shape:h}}),m=fM({inputs:{x:f},backend:n,attrs:{perm:p}}),g=rM({inputs:{x:m},backend:n,attrs:{shape:d}});return l.push(c),l.push(f),l.push(m),l.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},DW={kernelName:Oa,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:a,values:r,denseShape:s,defaultValue:i}=t;if(1!==s.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${s.shape}`);if(2!==a.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${a.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(a.dataId),u=n.readSync(r.dataId),l=n.readSync(s.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=nO(o,a.shape,a.dtype,u,r.dtype,l,c);return[n.makeTensorInfo(p,a.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],a.dtype,new Int32Array(m))]}},OW={kernelName:Ma,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:a,inputShape:r,newShape:s}=t;if(2!==a.shape.length)throw new Error(`Input indices should be a matrix but received shape ${a.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(a.dataId),u=Array.from(n.readSync(s.dataId)),[l,c,h]=aO(o,a.shape,a.dtype,i,u);return[n.makeTensorInfo(c,a.dtype,l),n.makeTensorInfo([h.length],s.dtype,new Int32Array(h))]}},MW={kernelName:La,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:s}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${s.shape}`);const i=n.readSync(a.dataId),o=n.readSync(r.dataId),u=n.readSync(s.dataId),[l,c]=rO(i,a.shape,a.dtype,o,u,!0);return n.makeTensorInfo(c,a.dtype,l)}},LW={kernelName:za,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:s}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${s.shape}`);const i=n.readSync(a.dataId),o=n.readSync(r.dataId),u=n.readSync(s.dataId),[l,c]=rO(i,a.shape,a.dtype,o,u);return n.makeTensorInfo(c,a.dtype,l)}},zW={kernelName:Pa,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sparseIndices:r,sparseValues:s,defaultValue:i}=t,{outputShape:o}=a,{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:p}=jo(0,r,o),d=!1;if("string"===s.dtype){const e=n.bufferSync(r),t=n.bufferSync(s),a=Vr(n.readSync(i.dataId)[0]),f=JD(e,t,o,p,c,l,u,h,a,d);return n.makeTensorInfo(o,f.dtype,f.values)}const f=new mW(l,u,r.shape.length,s.shape.length,h,[p,1],d),m=n.runWebGLProgram(f,[s,r,i],s.dtype),g=rM({inputs:{x:m},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(m),g}},PW={kernelName:Fa,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{numOrSizeSplits:s,axis:i}=a,o=ye(i,r.shape)[0],u=Yf(r,s,o),l=r.shape.length,c=new Array(l).fill(0),h=r.shape.slice();return u.map((e=>{const t=[...h];t[o]=e;const a=cL({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,a}))}},BW="return sqrt(x);",WW=YO({opSnippet:BW,packedOpSnippet:BW,cpuKernelImpl:sO}),VW={kernelName:_a,backendName:"webgl",kernelFunc:WW},UW=YO({opSnippet:"return x * x;"}),GW={kernelName:Wa,backendName:"webgl",kernelFunc:UW},HW="return (a - b) * (a - b);",jW=ZO({opSnippet:HW,packedOpSnippet:HW}),qW={kernelName:Ba,backendName:"webgl",kernelFunc:jW},KW={kernelName:rr,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:a}=e,r=NO+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,s=new IO(a.shape,r);return n.runWebGLProgram(s,[a],a.dtype)}};class XW{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const a=n.length,r=aD(n.length),s=aD(n.length);let i="";if(1===a)i="coords * strides + begin";else{let e=0;i=n.map(((t,a)=>(e++,1===n.length?`coords * strides[${a}] + begin[${a}]`:`coords[${e-1}] * strides[${a}] + begin[${a}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const YW={kernelName:Va,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:s,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=a,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=cu(r.shape,s,i,o,u,l,c,h,p);let k;if(m)k=rM({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){ae(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=Zo(b,x,w),t=cL({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});k=rM({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=Oi(r.shape,r.dtype,e),a=iO(d,t,w,b);k=n.makeTensorInfo(f,r.dtype,a.values)}else{const e=new XW(b,w,d);k=n.runWebGLProgram(e,[r],r.dtype)}const v=rM({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),v}},ZW={kernelName:Ua,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{separator:r,nGramWidths:s,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:l}=a,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=oO(p,d,r,s,i,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},JW={kernelName:Ga,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{skipEmpty:r}=a,{input:s,delimiter:i}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(s.dataId),u=n.readSync(i.dataId)[0],[l,c,h]=uO(o,u,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},QW={kernelName:Ha,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{numBuckets:r}=a,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(s.dataId),o=lO(i,r);return n.makeTensorInfo(s.shape,"int32",o)}},eV=YO({opSnippet:"return tan(x);"}),tV={kernelName:qa,backendName:"webgl",kernelFunc:eV},nV=YO({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),aV={kernelName:Ka,backendName:"webgl",kernelFunc:nV};class rV{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.rank=n.length;const a=aD(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],a=[];for(let t=0;t<e.length;t++)a.push(`imod(${n[t]}, ${e[t]})`);return a.join()}(e);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function sV(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reps:s}=a;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>Vr(e))):e,a=Oi(r.shape,r.dtype,t),i=hO(a,s);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new rV(r.shape,s);return n.runWebGLProgram(i,[r],r.dtype)}const iV={kernelName:Xa,backendName:"webgl",kernelFunc:sV};class oV{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class uV{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function lV(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function cV(e){let t=1;for(;t<e;)t*=2;return t}const hV={kernelName:Ya,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{k:s,sorted:i}=a,o=je().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),u=je().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),l=r.shape,c=l[l.length-1];if(n.shouldExecuteOnCPU([r])||c<o||s>u){const e=n.readSync(r.dataId),[t,a]=pO(e,l,r.dtype,s,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(a.shape,a.dtype,a.values)]}if(0===s)return l[l.length-1]=0,[n.makeTensorInfo(l,r.dtype,[]),n.makeTensorInfo(l,"int32",[])];if(1===c)return[r,jz({attrs:{shape:l,dtype:"int32",value:0},backend:n})];const h=n.texData.get(r.dataId),p=null!==h&&h.isPacked,d=p?n.unpackTensor(r):r,f=oe(l)/c,m=rM({inputs:{x:d},attrs:{shape:[f,c]},backend:n});p&&lV(n,d);const g=cV(s),y=cV(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,a)=>{const r=x(),s=new oV(a),i=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=b;b=n.runWebGLProgram(s,r,"int32",i),lV(n,o)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),a=new uV([f,e/2]),r=[[c],[null===b?1:0],[g]],s=b;b=n.runWebGLProgram(a,t,"int32",r),lV(n,s);const i=g/2,o=2*i;for(let e=i;e>=1;e/=2)w(o,e,b.shape)}let k=b;b=cL({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,s]}}),lV(n,k);let v=hP({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});lV(n,m);const I=l.slice(0,-1);I.push(s),k=b,b=rM({inputs:{x:b},attrs:{shape:I},backend:n}),lV(n,k);const N=v;return v=rM({inputs:{x:v},attrs:{shape:I},backend:n}),lV(n,N),[v,b]}};class pV{constructor(e,t,n,a,r,s){this.variableNames=["Image","Transforms"],this.outputShape=s;const i="nearest"===n?1:2;let o;switch(a){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const dV={kernelName:Za,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{image:r,transforms:s}=t,{interpolation:i,fillMode:o,fillValue:u,outputShape:l}=a,[c,h,p,d]=r.shape,[f,m]=null!=l?l:[h,p],g=new pV(h,p,i,o,u,[c,f,m,d]);return n.runWebGLProgram(g,[r,s],"float32")}},fV={kernelName:Qa,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{axis:r}=n,{x:s}=t;BF(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=a.readSync(s.dataId),{outputValues:o,outputShape:u,indices:l}=fO(i,r,s.shape,s.dtype);return[a.makeTensorInfo(u,s.dtype,o),a.makeTensorInfo([l.length],"int32",l)]}},mV={kernelName:er,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{value:r}=t;let{axis:s}=a;s<0&&(s+=r.shape.length);const i=r,o=i.shape.length,u=r.shape[s],l=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==s&&(l[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[s]=1;const f=new Array(u);for(let e=0;e<f.length;e++){p[s]=e;const t=cL({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),a=rM({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=a,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class gV{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,a=e.batchSize,r=e.inSize,s=e.numSegments,i=s*Math.ceil(r/n);this.outputShape=[a,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${s})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${s})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const yV={kernelName:tr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,segmentIds:s}=t,{numSegments:i}=a,o=r.shape.length,u=[];let l=0;const c=Cc([l],o);let h=r;null!=c&&(h=fM({inputs:{x:r},backend:n,attrs:{perm:c}}),u.push(h),l=Ec(1,o)[0]);const p=cm(h.shape,l,i),d=oe([h.shape[l]]),f=rM({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});u.push(f);const m=hs(r.dtype),g=(e,t,a,r,s)=>{const i=e.shape[0],o=e.shape[1],l=lm(o,s),c=new gV({windowSize:l,inSize:o,batchSize:i,numSegments:s},t),h=n.compileAndRun(c,[e,a],r);if(u.push(h),h.shape[1]===s)return h;const p=VB({backend:n,attrs:{start:0,stop:s,step:1,dtype:"float32"}}),d=sV({inputs:{x:p},backend:n,attrs:{reps:[o/l]}});return u.push(p),u.push(d),g(h,t,d,r,s)},y=rM({inputs:{x:g(f,"unsortedSegmentSum",s,m,i)},backend:n,attrs:{shape:p}});let b=y;if(null!=c){u.push(y);const e=$c(c);b=fM({inputs:{x:b},backend:n,attrs:{perm:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},bV=[yM,xM,kM,IM,TM,EM,_M,AM,LM,zM,BM,VM,GM,jM,KM,ZM,JM,tL,nL,aL,iL,pL,dL,fL,xL,vL,SL,VO,$L,ML,GL,XL,YL,ZL,JL,QL,tz,az,sz,hz,pz,dz,mz,bz,kz,vz,Nz,Tz,Cz,Ez,_z,Rz,Dz,Mz,zz,Wz,Gz,qz,Xz,Jz,eP,aP,iP,oP,lP,pP,fP,gP,BO,yP,FL,xP,kP,IP,HO,SP,CP,$P,_P,RP,DP,MP,zP,WP,UP,HP,qP,KP,XP,JP,QP,eB,tB,nB,rB,oB,lB,bB,aM,wB,vB,NB,TB,gL,$B,AB,RB,MB,zB,KO,PB,BB,WB,UB,bL,pB,HB,qB,XB,sM,JB,eW,aW,sW,uW,cW,pW,fW,gW,bW,wW,vW,NW,TW,$W,_W,hL,yB,RW,FW,DW,OW,MW,LW,zW,PW,VW,GW,qW,KW,YW,ZW,JW,QW,mB,dM,tV,aV,iV,hV,dV,mM,fV,mV,yV,_B];for(const e of bV)yr(e);const xV={"tfjs-core":Eu,"tfjs-backend-cpu":"3.21.0","tfjs-backend-webgl":"3.21.0","tfjs-data":BT,"tfjs-layers":Zx,"tfjs-converter":FS,tfjs:"3.21.0"};var wV,kV;let vV;!function(e){e[e.float32=0]="float32",e[e.int32=1]="int32",e[e.bool=2]="bool",e[e.string=3]="string",e[e.complex64=4]="complex64"}(wV||(wV={})),function(e){e[e.linear=0]="linear",e[e.relu=1]="relu",e[e.relu6=2]="relu6",e[e.prelu=3]="prelu",e[e.leakyrelu=4]="leakyrelu",e[e.sigmoid=5]="sigmoid",e[e.elu=6]="elu"}(kV||(kV={}));const IV={kernelName:or,backendName:"wasm",setupFunc:function(e){vV=e.wasm.cwrap(or,null,["number","array","number","number","array","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{a:r,b:s,bias:i,preluActivationWeights:o}=t;if("float32"!==r.dtype||"float32"!==s.dtype)throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");const{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=a,p=n.dataIdMap.get(r.dataId).id,d=n.dataIdMap.get(s.dataId).id;let f=0;if(null!=i){const e=n.dataIdMap.get(i.dataId);if(1!==e.shape.length)throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${e.shape.length}.`);f=e.id}const m=null==o?0:n.dataIdMap.get(o.dataId).id,g=kV[c];if(null==g)throw new Error(`${c} activation not yet supported for FusedConv2D in the wasm backend.`);const y=u?r.shape[2]:r.shape[1],b=l?s.shape[1]:s.shape[2],x=Mo(r.shape.slice(0,-2),s.shape.slice(0,-2)),w=n.makeOutput([...x,y,b],r.dtype),k=n.dataIdMap.get(w.dataId).id,v=new Uint8Array(new Int32Array(r.shape).buffer),I=new Uint8Array(new Int32Array(s.shape).buffer);return vV(p,v,r.shape.length,d,I,s.shape.length,u,l,g,f,m,h||0,k),w}};function NV(e,t){let n;return{kernelName:e,backendName:"wasm",setupFunc:function(t){n=t.wasm.cwrap(e,null,["number","number","number"])},kernelFunc:function(e){const{backend:a,inputs:{x:r}}=e,s=a.dataIdMap.get(r.dataId).id,i=a.makeOutput(r.shape,t||r.dtype),o=a.dataIdMap.get(i.dataId).id;return 0===oe(i.shape)||n(s,wV[r.dtype],o),i}}}const SV=NV(Ze);function TV(e,t,n){let a;return{kernelName:e,backendName:"wasm",setupFunc:function(t){a=t.wasm.cwrap(e,null,["number","array","number","number","array","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:r}=e,{a:s,b:i}=r,o=t.dataIdMap.get(s.dataId).id,u=t.dataIdMap.get(i.dataId).id,l=null!=n?n:s.dtype,c=Mo(s.shape,i.shape),h=t.makeOutput(c,l);if(0===oe(c))return h;const p=new Uint8Array(new Int32Array(s.shape).buffer),d=new Uint8Array(new Int32Array(i.shape).buffer),f=t.dataIdMap.get(h.dataId).id;return a(o,p,s.shape.length,u,d,i.shape.length,wV[s.dtype],f),h}}}const CV=TV(et);let $V;const EV={kernelName:tt,backendName:"wasm",setupFunc:function(e){$V=e.wasm.cwrap(tt,null,["array","number","number","number"])},kernelFunc:function(e){const{inputs:t,backend:n}=e,a=n.makeOutput(t[0].shape,t[0].dtype);if(0===oe(a.shape))return a;const r=t.map((e=>n.dataIdMap.get(e.dataId).id)),s=new Uint8Array(new Int32Array(r).buffer),i=n.dataIdMap.get(a.dataId).id;return $V(s,r.length,wV[a.dtype],i),a}};function _V(e){const{inputs:{x:t},backend:n}=e,a=n.makeOutput(t.shape,t.dtype),r=n.typedArrayFromHeap(t);return n.typedArrayFromHeap(a).set(r),a}const AV={kernelName:pn,backendName:"wasm",kernelFunc:_V};let RV;function FV(e){const{inputs:t,backend:n,attrs:a}=e,[r,s]=function(e,t){const n=[],a=[];for(let r=0;r<e.length;++r)1!==e[r]&&n.push(e[r]),1!==e[t[r]]&&a.push(t[r]);for(let e=0;e<a.length;++e){let t=-1;for(let n=0;n<a.length;++n)a[n]>=e&&(-1===t||a[t]>a[n])&&(t=n);a[t]=e}return[n,a]}(t.x.shape,a.perm);let i=!0;for(let e=0;e<s.length;e++)s[e]!==e&&(i=!1);const o=function(e,t){const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];return n}(t.x.shape,a.perm),u={dataId:t.x.dataId,shape:r,dtype:t.x.dtype};if(i){const e=_V({inputs:t,backend:n});return e.shape=o,e}const l=n.makeOutput(o,u.dtype),c=n.dataIdMap.get(u.dataId).id,h=n.dataIdMap.get(l.dataId).id,p=new Uint8Array(new Int32Array(s).buffer),d=new Uint8Array(new Int32Array(u.shape).buffer);return RV(c,d,u.shape.length,wV[u.dtype],h,p,s.length),l}const DV={kernelName:Ja,backendName:"wasm",kernelFunc:FV,setupFunc:function(e){RV=e.wasm.cwrap(Ja,null,["number","array","number","number","number","array","number"])}};function OV(e,t,n){const a=e.shape,r=e.shape.length,s=ye(t,a);let i=s;const o=Cc(i,r);let u=null,l=!1;if(null!=o){const t=new Array(r);for(let e=0;e<t.length;e++)t[e]=a[o[e]];i=Ec(i.length,r),u=FV({inputs:{x:e},attrs:{perm:o},backend:n});const s=n.dataIdMap.get(e.dataId).id;n.dataIdMap.get(u.dataId).id!==s&&(l=!0)}return{transposed:u,originalAxes:s,axes:i,inputWasTransposed:l}}let MV;const LV={kernelName:nt,backendName:"wasm",setupFunc:function(e){MV=e.wasm.cwrap(nt,null,["number, number, number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:s}=a,{x:i}=n;let o=t.dataIdMap.get(i.dataId).id,u=i;const{transposed:l,axes:c,originalAxes:h,inputWasTransposed:p}=OV(i,r,t);p&&(u=l,o=t.dataIdMap.get(l.dataId).id),Tc("all",c,u.shape.length);const[d,f]=Nc(u.shape,c),m=oe(f),g=t.makeOutput(d,i.dtype);if(0!==oe(u.shape)){const e=t.dataIdMap.get(g.dataId).id;MV(o,m,e)}if(p&&t.disposeData(l.dataId),s){const e=Sc(g.shape,h);g.shape=e}return g}};let zV;const PV={kernelName:at,backendName:"wasm",setupFunc:function(e){zV=e.wasm.cwrap(at,null,["number, number, number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:s}=a,{x:i}=n;let o=t.dataIdMap.get(i.dataId).id,u=i;const{transposed:l,axes:c,originalAxes:h,inputWasTransposed:p}=OV(i,r,t);p&&(u=l,o=t.dataIdMap.get(l.dataId).id),Tc("any",c,u.shape.length);const[d,f]=Nc(u.shape,c),m=oe(f),g=t.makeOutput(d,i.dtype);if(0!==oe(u.shape)){const e=t.dataIdMap.get(g.dataId).id;zV(o,m,e)}if(p&&t.disposeData(l.dataId),s){const e=Sc(g.shape,h);g.shape=e}return g}};let BV;const WV={kernelName:rt,backendName:"wasm",kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{axis:r}=a,{x:s}=n,i=t.dataIdMap.get(s.dataId).id;let o=i,u=s;const{transposed:l,axes:c,inputWasTransposed:h}=OV(s,r,t);if(h){const e=t.dataIdMap.get(l.dataId).id;e!==i&&(u=l,o=e)}const p=u.shape.slice(0,-1),d=t.makeOutput(p,"int32"),f=t.dataIdMap.get(d.dataId).id,m=oe(d.shape),g=u.shape[c[0]];return BV(o,wV[u.dtype],m,g,f),h&&t.disposeData(l.dataId),d},setupFunc:function(e){BV=e.wasm.cwrap(rt,null,["number","number","number","number","number"])}};let VV;const UV={kernelName:ht,backendName:"wasm",setupFunc:function(e){VV=e.wasm.cwrap(ht,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,r=t.x,s=a.dataIdMap.get(r.dataId).id,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=n,c=bl(r.shape,i,o,1,u,l),h=c.filterHeight,p=c.filterWidth,d=c.padInfo.top,f=c.padInfo.right,m=c.padInfo.bottom,g=c.padInfo.left,y=c.strideHeight,b=c.strideWidth,x=c.inChannels;if("channelsLast"!==c.dataFormat)throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);if(1!==c.dilationWidth||1!==c.dilationHeight)throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${c.dilationHeight}, ${c.dilationWidth}].`);const w=a.makeOutput(c.outShape,"float32"),k=a.dataIdMap.get(w.dataId).id;return VV(s,r.shape[0],r.shape[1],r.shape[2],h,p,d,f,m,g,y,b,x,k),w}};function GV(e){const{inputs:t,attrs:n}=e,{x:a}=t,{shape:r}=n,s=oe(a.shape),i=ge(r,s);return ae(s===oe(i),(()=>`new shape: ${i}, old shape: ${a.shape}. New shape and old shape must have the same number of elements.`)),e.backend.incRef(a.dataId),{dataId:a.dataId,shape:i,dtype:a.dtype}}const HV={kernelName:ha,backendName:"wasm",kernelFunc:GV};let jV;const qV={kernelName:mt,backendName:"wasm",setupFunc:function(e){jV=e.wasm.cwrap(mt,null,["number","array","number","number","array","number","number","number","number"])},kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{a:r,b:s}=t,{transposeA:i,transposeB:o}=a;if("float32"!==r.dtype||"float32"!==s.dtype)throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");const u=r.shape.length,l=s.shape.length,c=i?r.shape[u-2]:r.shape[u-1],h=o?s.shape[l-1]:s.shape[l-2],p=i?r.shape[u-1]:r.shape[u-2],d=o?s.shape[l-2]:s.shape[l-1],f=r.shape.slice(0,-2),m=s.shape.slice(0,-2),g=oe(f),y=oe(m),b=Mo(r.shape.slice(0,-2),s.shape.slice(0,-2)).concat([p,d]);ae(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${s.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=GV({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),k=GV({inputs:{x:s},backend:n,attrs:{shape:x}}),v=n.dataIdMap.get(w.dataId).id,I=n.dataIdMap.get(k.dataId).id,N=i?w.shape[2]:w.shape[1],S=o?k.shape[1]:k.shape[2],T=Math.max(g,y),C=n.makeOutput([T,N,S],w.dtype),$=n.dataIdMap.get(C.dataId).id,E=new Uint8Array(new Int32Array(w.shape).buffer),_=new Uint8Array(new Int32Array(k.shape).buffer);return jV(v,E,w.shape.length,I,_,k.shape.length,i,o,$),n.disposeData(w.dataId),n.disposeData(k.dataId),C.shape=b,C}};function KV(e){const{inputs:{x:t},attrs:{begin:n,size:a},backend:r}=e,[s,i]=lu(t,n,a),o=ou(t.shape,s,i),u=r.readSync(t.dataId),l=r.makeOutput(i,t.dtype),c=Fe(t.shape),h=r.dataIdMap.get(l.dataId);if(o){const e=uu(s,c);return"string"===t.dtype?h.stringBytes=u.slice(e,e+oe(i)):r.typedArrayFromHeap(l).set(u.subarray(e,e+oe(i))),l}if("string"===t.dtype){const e=l$(u,s,i,t.shape,t.dtype);return h.stringBytes=e,l}const p=r.typedArrayFromHeap(l),d=t.shape.length;if(2===d)!function(e,t,n,a,r){let s=0;const i=a[0],o=a[1],u=i+r[0];for(let a=i;a<u;a++){const i=a*t+o;n.set(e.subarray(i,i+r[1]),s),s+=r[1]}}(u,c[0],p,s,i);else if(3===d)!function(e,t,n,a,r,s){let i=0;const o=r[0],u=r[1],l=r[2],c=o+s[0],h=u+s[1];for(let r=o;r<c;r++)for(let o=u;o<h;o++){const u=r*t+o*n+l;a.set(e.subarray(u,u+s[2]),i),i+=s[2]}}(u,c[0],c[1],p,s,i);else if(4===d)!function(e,t,n,a,r,s,i){let o=0;const u=s[0],l=s[1],c=s[2],h=u+i[0],p=l+i[1],d=c+i[2],f=s[3];for(let s=u;s<h;s++)for(let u=l;u<p;u++)for(let l=c;l<d;l++){const c=s*t+u*n+l*a+f;r.set(e.subarray(c,c+i[3]),o),o+=i[3]}}(u,c[0],c[1],c[2],p,s,i);else{const e=l$(u,s,i,t.shape,t.dtype);p.set(e)}return l}const XV={kernelName:Na,backendName:"wasm",kernelFunc:KV},YV={kernelName:gt,backendName:"wasm",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:s,crops:i}=a,o=s.reduce(((e,t)=>e*t)),u=xf(r.shape,s,o),l=wf(u.length,s.length),c=kf(r.shape,s,o),h=vf(i,s.length),p=If(c,i,s.length),d=GV({inputs:{x:r},backend:n,attrs:{shape:u}}),f=FV({inputs:{x:d},backend:n,attrs:{perm:l}}),m=KV({inputs:{x:GV({inputs:{x:f},backend:n,attrs:{shape:c}})},backend:n,attrs:{begin:h,size:p}});return n.disposeData(d.dataId),n.disposeData(f.dataId),n.disposeData(d.dataId),m}};function ZV(e){const{inputs:{x:t},attrs:{dtype:n},backend:a}=e,r=a.makeOutput(t.shape,n),s=a.typedArrayFromHeap(t);return a.typedArrayFromHeap(r).set(s),r}const JV={kernelName:wt,backendName:"wasm",kernelFunc:ZV},QV=NV(kt);let eU;const tU={kernelName:vt,backendName:"wasm",setupFunc:function(e){eU=e.wasm.cwrap(vt,null,["number","number","number","number"])},kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{clipValueMin:s,clipValueMax:i}=a,o=n.dataIdMap.get(r.dataId).id,u=n.makeOutput(r.shape,r.dtype),l=n.dataIdMap.get(u.dataId).id;return eU(o,s,i,l),u}};function nU(e){const{inputs:t,backend:n}=e,a=ye(e.attrs.axis,t[0].shape)[0];lf(t.map((e=>e.shape)),a);let r=cf(t.map((e=>e.shape)),a);const s=t.filter((e=>oe(e.shape)>0));if(1===s.length)return _V({inputs:{x:s[0]},backend:n});const i=n.makeOutput(r,t[0].dtype);if(0===oe(r))return i;if("string"===s[0].dtype){const e=s.map((e=>{const t=oe(e.shape.slice(a));return GV({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),o=e.map((e=>({vals:n.readSync(e.dataId),shape:e.shape})));r=cf(e.map((e=>e.shape)),1);const u=1===e[0].shape[0],l=I$(o,r,t[0].dtype,u),c=cf(s.map((e=>e.shape)),a);return i.shape=c,n.dataIdMap.get(i.dataId).stringBytes=dm(l),e.forEach((e=>n.disposeData(e.dataId))),i}const o=oe(s[0].shape.slice(0,a));let u=0;const l=s.map((e=>{const t=oe(e.shape.slice(a));return u+=t,t})),c=s.map((e=>n.typedArrayFromHeap(e))),h=n.typedArrayFromHeap(i);for(let e=0;e<o;e++){let t=e*u;for(let n=0;n<c.length;n++){const a=l[n],r=e*a,s=c[n].subarray(r,r+a);h.set(s,t),t+=a}}return i}const aU={kernelName:St,backendName:"wasm",kernelFunc:nU};let rU;const sU={kernelName:Tt,backendName:"wasm",setupFunc:function(e){rU=e.wasm.cwrap(Tt,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{x:r,filter:s}=t,i=a.dataIdMap.get(r.dataId).id,o=a.dataIdMap.get(s.dataId).id,{strides:u,dilations:l,pad:c,dimRoundingMode:h,dataFormat:p}=n,d=El(p),f=wl(r.shape,s.shape,u,l,c,h,!1,d),m=f.filterHeight,g=f.filterWidth,y=f.padInfo.top,b=f.padInfo.right,x=f.padInfo.bottom,w=f.padInfo.left,k=f.dilationHeight,v=f.dilationWidth,I=f.strideHeight,N=f.strideWidth,S=f.inChannels,T=f.outChannels,C="SAME"===f.padInfo.type?1:0;if("channelsLast"!==f.dataFormat)throw new Error(`wasm backend Conv2D does not support dataFormat:'${f.dataFormat}'. Please use 'channelsLast'.`);const $=a.makeOutput(f.outShape,"float32"),E=a.dataIdMap.get($.dataId).id;return rU(i,r.shape[0],r.shape[1],r.shape[2],o,m,g,y,b,x,w,C,k,v,I,N,S,T,E),$}};let iU;const oU={kernelName:$t,backendName:"wasm",setupFunc:function(e){iU=e.wasm.cwrap($t,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{dy:r,filter:s}=n,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,inputShape:c}=a,h=El(u),p=wl(c,s.shape,i,1,o,l,!1,h),{batchSize:d,filterHeight:f,filterWidth:m,inChannels:g,inHeight:y,inWidth:b,outChannels:x,outHeight:w,outWidth:k,strideHeight:v,strideWidth:I}=p,N=f-1-p.padInfo.top,S=m-1-p.padInfo.left,T="channelsLast"===p.dataFormat,C=Fe(p.inShape),$=Fe(r.shape),[E,_,A]=Fe(s.shape),R=C[0],F=T?C[1]:C[2],D=T?C[2]:1,O=T?1:C[1],M=$[0],L=T?$[1]:$[2],z=T?$[2]:1,P=T?1:$[1],B=t.makeOutput(p.inShape,"float32"),W=t.dataIdMap.get(B.dataId).id,V=t.dataIdMap.get(r.dataId).id,U=t.dataIdMap.get(s.dataId).id;return iU(V,U,d,f,m,y,b,g,w,k,x,v,I,N,S,E,_,A,R,F,D,O,M,L,z,P,W),B}},uU=NV(Rt),lU=NV(Ft);var cU;let hU;!function(e){e[e.bilinear=0]="bilinear",e[e.nearest=1]="nearest"}(cU||(cU={}));const pU={kernelName:Mt,backendName:"wasm",setupFunc:function(e){hU=e.wasm.cwrap(Mt,null,["number","number","number","number","array","number","number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{method:r,extrapolationValue:s,cropSize:i}=a,{image:o,boxes:u,boxInd:l}=n,c=u.shape[0],[h,p]=i,d=[c,h,p,o.shape[3]];let f,m=t.dataIdMap.get(o.dataId);"float32"!==o.dtype&&(f=ZV({backend:t,inputs:{x:o},attrs:{dtype:"float32"}}),m=t.dataIdMap.get(f.dataId));const g=m.id,y=t.dataIdMap.get(u.dataId).id,b=t.dataIdMap.get(l.dataId).id,x=t.makeOutput(d,"float32"),w=t.dataIdMap.get(x.dataId).id,k=new Uint8Array(new Int32Array(o.shape).buffer);return hU(g,y,b,c,k,h,p,cU[r],s,w),null!=f&&t.disposeData(f.dataId),x}};let dU;const fU={kernelName:Dt,backendName:"wasm",setupFunc:function(e){dU=e.wasm.cwrap(Dt,null,["number","number","number","number","number","number"])},kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,exclusive:i,reverse:o}=a,u=r.shape.length;ae("float32"===r.dtype||"int32"===r.dtype,(()=>`cumprod does not support ${r.dtype} tensors in the WASM backend`));const l=Cc([s],u);let c=r;null!==l&&(c=FV({inputs:{x:r},attrs:{perm:l},backend:n}));const h=Ec(1,u)[0];Tc("cumprod",[h],u);const p=n.makeOutput(c.shape,c.dtype),d=c.shape[h],f=n.dataIdMap.get(c.dataId).id,m=n.dataIdMap.get(p.dataId).id;dU(f,i?1:0,o?1:0,d,m,wV[r.dtype]);let g=p;return null!==l&&(g=FV({inputs:{x:p},attrs:{perm:$c(l)},backend:n}),n.disposeData(c.dataId),n.disposeData(p.dataId)),g}};let mU;const gU={kernelName:Ot,backendName:"wasm",setupFunc:function(e){mU=e.wasm.cwrap(Ot,null,["number","number","number","number","number","number"])},kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,exclusive:i,reverse:o}=a,u=r.shape.length;ae("float32"===r.dtype||"int32"===r.dtype,(()=>`cumsum does not support ${r.dtype} tensors in the WASM backend`));const l=Cc([s],u);let c=r;null!==l&&(c=FV({inputs:{x:r},attrs:{perm:l},backend:n}));const h=Ec(1,u)[0];Tc("cumsum",[h],u);const p=n.makeOutput(c.shape,c.dtype),d=c.shape[h],f=n.dataIdMap.get(c.dataId).id,m=n.dataIdMap.get(p.dataId).id;mU(f,i?1:0,o?1:0,d,m,wV[r.dtype]);let g=p;return null!==l&&(g=FV({inputs:{x:p},attrs:{perm:$c(l)},backend:n}),n.disposeData(c.dataId),n.disposeData(p.dataId)),g}};let yU;const bU={kernelName:zt,backendName:"wasm",setupFunc:function(e){yU=e.wasm.cwrap(zt,null,["number","number","number","array","number","array","array","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{x:r}=n,{blockSize:s,dataFormat:i}=a,o=r.shape[0],u=("NHWC"===i?r.shape[1]:r.shape[2])*s,l=("NHWC"===i?r.shape[2]:r.shape[3])*s,c=("NHWC"===i?r.shape[3]:r.shape[1])/(s*s),h="NHWC"===i?[o,u,l,c]:[o,c,u,l],p=t.makeOutput(h,"float32"),d=t.dataIdMap.get(r.dataId).id,f=new Uint8Array(new Int32Array(Fe(r.shape)).buffer),m=new Uint8Array(new Int32Array(h).buffer),g=new Uint8Array(new Int32Array(Fe(h)).buffer),y=t.dataIdMap.get(p.dataId).id;return yU(d,s,"NHWC"===i?1:0,f,r.shape.length-1,m,g,h.length,y),p}};let xU;const wU={kernelName:Pt,backendName:"wasm",setupFunc:function(e){xU=e.wasm.cwrap(Pt,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{x:r,filter:s}=t,i=a.dataIdMap.get(r.dataId).id,o=a.dataIdMap.get(s.dataId).id,{strides:u,dilations:l,pad:c,dimRoundingMode:h}=n,p=null==l?[1,1]:l,d=wl(r.shape,s.shape,u,p,c,h,!0),f=d.filterHeight,m=d.filterWidth,g=d.padInfo.top,y=d.padInfo.right,b=d.padInfo.bottom,x=d.padInfo.left,w=d.dilationHeight,k=d.dilationWidth,v=d.strideHeight,I=d.strideWidth,N=d.inChannels,S=d.outChannels,T="SAME"===d.padInfo.type?1:0;if("channelsLast"!==d.dataFormat)throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${d.dataFormat}'. Please use 'channelsLast'.`);const C=a.makeOutput(d.outShape,"float32"),$=a.dataIdMap.get(C.dataId).id;return xU(i,r.shape[0],r.shape[1],r.shape[2],o,f,m,g,y,b,x,T,w,k,v,I,N,S,$),C}},kU=NV(Kt),vU=TV(Zt,0,"bool"),IU=NV(Jt,"float32");function NU(e){const{inputs:t,attrs:n,backend:a}=e,{input:r}=t,{dim:s}=n,i=r.shape.length,o=r.shape.slice();let u=s;return s<0&&(ae(-(i+1)<=s,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),u=i+s+1),o.splice(u,0,1),GV({inputs:{x:r},backend:a,attrs:{shape:o}})}const SU={kernelName:Qt,backendName:"wasm",kernelFunc:NU};function TU(e){const{attrs:{shape:t,value:n,dtype:a},backend:r}=e,s=r.makeOutput(t,a);return r.typedArrayFromHeap(s).fill(n),s}const CU={kernelName:nn,backendName:"wasm",kernelFunc:TU};let $U;const EU={kernelName:an,backendName:"wasm",kernelFunc:function(e){const{inputs:t,backend:n}=e,{image:a}=t,r=n.makeOutput(a.shape,a.dtype),s=n.dataIdMap.get(a.dataId).id,i=n.dataIdMap.get(r.dataId).id,[o,u,l,c]=a.shape;return $U(s,o,u,l,c,i),r},setupFunc:function(e){$U=e.wasm.cwrap(an,null,["number","number","number","number","number","number"])}},_U=NV(rn),AU=TV(sn);let RU;const FU={kernelName:on,backendName:"wasm",setupFunc:function(e){RU=e.wasm.cwrap(on,null,["number","number","number","number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{varianceEpsilon:r}=a,{x:s,mean:i,variance:o,offset:u,scale:l}=n,c=t.dataIdMap.get(s.dataId).id,h=t.dataIdMap.get(i.dataId).id,p=t.dataIdMap.get(o.dataId).id,d=null!=u?t.dataIdMap.get(u.dataId).id:0,f=null!=l?t.dataIdMap.get(l.dataId).id:0,m=t.makeOutput(s.shape,s.dtype);if(0===oe(s.shape))return m;const g=t.dataIdMap.get(m.dataId).id;return RU(c,h,p,d,f,r,g),m}};let DU;const OU={kernelName:ur,backendName:"wasm",setupFunc:function(e){DU=e.wasm.cwrap(ur,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{x:r,filter:s,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dilations:c,dataFormat:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=n,m=wl(r.shape,s.shape,u,c,l,p),g=kV[d];if(null==g)throw new Error(`${d} activation not yet supported for FusedConv2D in the wasm backend.`);const y=a.dataIdMap.get(r.dataId).id,b=a.dataIdMap.get(s.dataId).id,x=m.outChannels;let w=0;if(null!=i){const e=a.dataIdMap.get(i.dataId);if(1!==e.shape.length)throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${e.shape.length}.`);if(e.shape[0]!==x)throw new Error(`FusedConv2D bias shape (${e.shape}) does not match the number of output channels (${x})`);w=e.id}const k=m.filterHeight,v=m.filterWidth,I=m.padInfo.top,N=m.padInfo.right,S=m.padInfo.bottom,T=m.padInfo.left,C=m.dilationHeight,$=m.dilationWidth,E=m.strideHeight,_=m.strideWidth,A=m.inChannels,R="SAME"===m.padInfo.type?1:0,F=m.batchSize,D=m.inHeight,O=m.inWidth;if("NHWC"!==h)throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${h}'. Please use 'NHWC'.`);const M=a.makeOutput(m.outShape,"float32"),L=a.dataIdMap.get(M.dataId).id,z=null==o?0:a.dataIdMap.get(o.dataId).id;return DU(y,F,D,O,b,k,v,w,I,N,S,T,R,C,$,E,_,A,x,g,z,f||0,L),M}};let MU;const LU={kernelName:lr,backendName:"wasm",setupFunc:function(e){MU=e.wasm.cwrap(lr,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{x:r,filter:s,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dilations:c,dataFormat:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=n,m=wl(r.shape,s.shape,u,c,l,p,!0),g=kV[d];if(null==g)throw new Error(`${d} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);const y=a.dataIdMap.get(r.dataId).id,b=a.dataIdMap.get(s.dataId).id,x=m.outChannels;let w=0;if(null!=i){const e=a.dataIdMap.get(i.dataId);if(1!==e.shape.length)throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${e.shape.length}.`);if(e.shape[0]!==x)throw new Error(`FusedDepthwiseConv2D bias shape (${e.shape}) does not match the number of output channels (${x})`);w=e.id}const k=m.filterHeight,v=m.filterWidth,I=m.padInfo.top,N=m.padInfo.right,S=m.padInfo.bottom,T=m.padInfo.left,C=m.dilationHeight,$=m.dilationWidth,E=m.strideHeight,_=m.strideWidth,A=m.inChannels,R="SAME"===m.padInfo.type?1:0,F=m.batchSize,D=m.inHeight,O=m.inWidth;if("NHWC"!==h)throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${h}'. Please use 'NHWC'.`);const M=a.makeOutput(m.outShape,"float32"),L=a.dataIdMap.get(M.dataId).id,z=null==o?0:a.dataIdMap.get(o.dataId).id;return MU(y,F,D,O,b,k,v,w,I,N,S,T,R,C,$,E,_,A,x,g,z,f||0,L),M}};let zU;const PU={kernelName:ln,backendName:"wasm",setupFunc:function(e){zU=e.wasm.cwrap(ln,null,["number","number","number","number","number","number","array","number"])},kernelFunc:function(e){const{backend:t,inputs:n}=e,{params:a,indices:r}=n,[s,i,o,u]=Uo(a,r),l=t.makeOutput(s,a.dtype);if(0===i)return l;const c=r.shape,h=c[c.length-1],p=t.dataIdMap.get(a.dataId).id,d=t.dataIdMap.get(r.dataId).id,f=new Uint8Array(new Int32Array(u).buffer),m=t.dataIdMap.get(l.dataId).id;return zU(p,wV[a.dtype],d,i,h,o,f,m),l}};let BU;const WU={kernelName:un,backendName:"wasm",setupFunc:function(e){BU=e.wasm.cwrap("Gather",null,["number","number","array","number","number","number","array","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{x:r,indices:s}=n,{axis:i,batchDims:o}=a,u=ye(i,r.shape)[0],l=t.readSync(s.dataId),c=r.shape[u];for(let e=0;e<l.length;++e){const t=l[e];ae(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}const h=hm(r,s,u,o),p=GV({inputs:{x:r},attrs:{shape:[h.batchSize,h.outerSize,h.dimSize,h.sliceSize]},backend:t}),d=oe(s.shape),f=GV({inputs:{x:s},attrs:{shape:[h.batchSize,d/h.batchSize]},backend:t}),m=[h.batchSize,h.outerSize,d/h.batchSize,h.sliceSize],g=t.makeOutput(m,r.dtype);if(0===oe(r.shape))return g;const y=p.shape.length-1,b=t.dataIdMap.get(p.dataId).id,x=t.dataIdMap.get(f.dataId).id,w=t.dataIdMap.get(g.dataId).id,k=new Uint8Array(new Int32Array(Fe(p.shape)).buffer),v=new Uint8Array(new Int32Array(Fe(m)).buffer);return BU(b,wV[r.dtype],k,y,x,h.batchSize,v,w),t.disposeData(p.dataId),t.disposeData(f.dataId),g.shape=h.outputShape,g}},VU=TV(cn,0,"bool"),UU=TV(hn,0,"bool");let GU;const HU={kernelName:bn,backendName:"wasm",setupFunc:function(e){GU=e.wasm.cwrap(bn,null,["number","number","number","number"])},kernelFunc:function(e){const{inputs:{x:t},attrs:{alpha:n},backend:a}=e,r=a.dataIdMap.get(t.dataId).id,s=a.makeOutput(t.shape,"float32");if(0!==oe(t.shape)){const e=a.dataIdMap.get(s.dataId).id;GU(r,wV[t.dtype],n,e)}return s}},jU=TV(xn,0,"bool"),qU=TV(wn,0,"bool"),KU=NV(vn),XU=TV(Nn,0,"bool"),YU=NV(Sn),ZU=TV(Tn,0,"bool"),JU=TV(Cn,0,"bool");let QU;const eG={kernelName:Rn,backendName:"wasm",setupFunc:function(e){QU=e.wasm.cwrap(Rn,null,["number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{reductionIndices:r,keepDims:s}=a,{x:i}=n;let o=t.dataIdMap.get(i.dataId).id,u=i;const{transposed:l,axes:c,originalAxes:h,inputWasTransposed:p}=OV(i,r,t);p&&(u=l,o=t.dataIdMap.get(l.dataId).id),Tc("max",c,u.shape.length);const[d,f]=Nc(u.shape,c),m=oe(f),g=t.makeOutput(d,i.dtype);if(0!==oe(u.shape)){const e=t.dataIdMap.get(g.dataId).id;QU(o,wV[i.dtype],m,e)}if(p&&t.disposeData(l.dataId),s){const e=Sc(g.shape,h);g.shape=e}return g}},tG=TV(Fn);let nG;const aG={kernelName:Dn,backendName:"wasm",setupFunc:function(e){nG=e.wasm.cwrap(Dn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,r=t.x,s=a.dataIdMap.get(r.dataId).id;ae("float32"===r.dtype,(()=>`Error in MaxPool: only float32 input is supported. Got ${r.dtype}.`));const{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=n,c=bl(r.shape,i,o,1,u,l),h=c.filterHeight,p=c.filterWidth,d=c.padInfo.top,f=c.padInfo.right,m=c.padInfo.bottom,g=c.padInfo.left,y=c.dilationHeight,b=c.dilationWidth,x=c.strideHeight,w=c.strideWidth,k=c.inChannels,v=c.outChannels;if("channelsLast"!==c.dataFormat)throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);const I=a.makeOutput(c.outShape,"float32"),N=a.dataIdMap.get(I.dataId).id;return nG(s,r.shape[0],r.shape[1],r.shape[2],h,p,d,f,m,g,y,b,x,w,k,v,N),I}};let rG;const sG={kernelName:Pn,backendName:"wasm",setupFunc:function(e){rG=e.wasm.cwrap(Pn,null,["number, number, number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:s}=a,{x:i}=n,o=t.dataIdMap.get(i.dataId).id;let u=o,l=i;const{transposed:c,axes:h,originalAxes:p,inputWasTransposed:d}=OV(i,r,t);let f=h;if(d){const e=t.dataIdMap.get(c.dataId).id;e!==o&&(l=c,u=e,f=Ec(f.length,l.shape.length))}Tc("mean",f,l.shape.length);const[m,g]=Nc(l.shape,f),y=oe(g);let b=l;"float32"!==l.dtype&&(b=ZV({backend:t,inputs:{x:l},attrs:{dtype:"float32"}}),u=t.dataIdMap.get(b.dataId).id);const x=t.makeOutput(m,"float32");if(0!==oe(l.shape)){const e=t.dataIdMap.get(x.dataId).id;rG(u,y,e)}if(d&&t.disposeData(c.dataId),s){const e=Sc(x.shape,p);x.shape=e}return"float32"!==l.dtype&&t.disposeData(b.dataId),x}};let iG;const oG={kernelName:Bn,backendName:"wasm",setupFunc:function(e){iG=e.wasm.cwrap(Bn,null,["number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:s}=a,{x:i}=n,o=t.dataIdMap.get(i.dataId).id;let u=o,l=i;const{transposed:c,axes:h,originalAxes:p,inputWasTransposed:d}=OV(i,r,t);if(d){const e=t.dataIdMap.get(c.dataId).id;e!==o&&(l=c,u=e)}Tc("min",h,l.shape.length);const[f,m]=Nc(l.shape,h),g=oe(m),y=t.makeOutput(f,l.dtype);if(0!==oe(l.shape)){const e=t.dataIdMap.get(y.dataId).id;iG(u,wV[i.dtype],g,e)}if(d&&t.disposeData(c.dataId),s){const e=Sc(y.shape,p);y.shape=e}return y}},uG=TV(Wn);var lG;let cG;!function(e){e[e.reflect=0]="reflect",e[e.symmetric=1]="symmetric"}(lG||(lG={}));const hG={kernelName:Vn,backendName:"wasm",kernelFunc:function(e){const{inputs:{x:t},backend:n,attrs:{paddings:a,mode:r}}=e,s=a.map(((e,n)=>e[0]+t.shape[n]+e[1])),i=n.dataIdMap.get(t.dataId).id,o=n.makeOutput(s,t.dtype),u=n.dataIdMap.get(o.dataId).id,l=new Uint8Array(new Int32Array(t.shape).buffer),c=a.map((e=>e[0])),h=a.map((e=>e[1])),p=new Uint8Array(new Int32Array(c).buffer),d=new Uint8Array(new Int32Array(h).buffer);return cG(i,l,t.shape.length,wV[t.dtype],p,d,lG[r],u),o},setupFunc:function(e){cG=e.wasm.cwrap(Vn,null,["number","array","number","number","array","array","number","number"])}},pG=TV(Hn),dG=NV(jn);function fG(e,t){const n=new Int32Array(e.wasm.HEAPU8.buffer,t,4),a=n[0],r=n[1],s=n[2],i=n[3];return e.wasm._free(t),{pSelectedIndices:a,selectedSize:r,pSelectedScores:s,pValidOutputs:i}}let mG;const gG={kernelName:Kn,backendName:"wasm",setupFunc:function(e){mG=e.wasm.cwrap(Kn,"number",["number","number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{iouThreshold:r,maxOutputSize:s,scoreThreshold:i}=a,{boxes:o,scores:u}=n,l=t.dataIdMap.get(o.dataId).id,c=t.dataIdMap.get(u.dataId).id,h=mG(l,c,s,r,i),{pSelectedIndices:p,selectedSize:d,pSelectedScores:f,pValidOutputs:m}=fG(t,h);return t.wasm._free(f),t.wasm._free(m),t.makeOutput([d],"int32",p)}};let yG;const bG={kernelName:Xn,backendName:"wasm",setupFunc:function(e){yG=e.wasm.cwrap(Xn,"number",["number","number","number","number","number","bool"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{iouThreshold:r,maxOutputSize:s,scoreThreshold:i,padToMaxOutputSize:o}=a,{boxes:u,scores:l}=n,c=t.dataIdMap.get(u.dataId).id,h=t.dataIdMap.get(l.dataId).id,p=yG(c,h,s,r,i,o),{pSelectedIndices:d,selectedSize:f,pSelectedScores:m,pValidOutputs:g}=fG(t,p);return t.wasm._free(m),[t.makeOutput([f],"int32",d),t.makeOutput([],"int32",g)]}};let xG;const wG={kernelName:Yn,backendName:"wasm",setupFunc:function(e){xG=e.wasm.cwrap(Yn,"number",["number","number","number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{iouThreshold:r,maxOutputSize:s,scoreThreshold:i,softNmsSigma:o}=a,{boxes:u,scores:l}=n,c=t.dataIdMap.get(u.dataId).id,h=t.dataIdMap.get(l.dataId).id,p=xG(c,h,s,r,i,o),{pSelectedIndices:d,selectedSize:f,pSelectedScores:m,pValidOutputs:g}=fG(t,p);return t.wasm._free(g),[t.makeOutput([f],"int32",d),t.makeOutput([f],"float32",m)]}},kG=TV(qn,0,"bool");let vG;const IG={kernelName:Jn,backendName:"wasm",setupFunc:function(e){vG=e.wasm.cwrap(Jn,null,["number","number","number","number","number"])},kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:r}=t,{dtype:s,depth:i,onValue:o,offValue:u}=a,l=n.makeOutput([...r.shape,i],s),c=n.dataIdMap.get(l.dataId).id,h=n.dataIdMap.get(r.dataId).id;return vG(h,i,o,u,c),l}},NG={kernelName:Zn,backendName:"wasm",kernelFunc:function(e){const{inputs:{x:t},backend:n}=e,a=n.makeOutput(t.shape,t.dtype);return n.typedArrayFromHeap(a).fill(1),a}},SG={kernelName:Qn,backendName:"wasm",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a;if(1===t.length)return NU({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const s=t[0].shape,i=t[0].dtype;t.forEach((e=>{re(s,e.shape,"All tensors passed to stack must have matching shapes"),ae(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],u=nU({inputs:t.map((e=>{const t=NU({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeData(e.dataId))),u}};let TG;const CG={kernelName:ea,backendName:"wasm",kernelFunc:function(e){const{inputs:{x:t},backend:n,attrs:{paddings:a,constantValue:r}}=e,s=a.map(((e,n)=>e[0]+t.shape[n]+e[1]));if(0===oe(t.shape))return TU({backend:n,attrs:{shape:s,value:r,dtype:t.dtype}});const i=n.dataIdMap.get(t.dataId).id,o=n.makeOutput(s,t.dtype),u=n.dataIdMap.get(o.dataId).id,l=new Uint8Array(new Int32Array(t.shape).buffer),c=a.map((e=>e[0])),h=a.map((e=>e[1])),p=new Uint8Array(new Int32Array(c).buffer),d=new Uint8Array(new Int32Array(h).buffer);return TG(i,l,t.shape.length,wV[t.dtype],p,d,r,u),o},setupFunc:function(e){TG=e.wasm.cwrap(ea,null,["number","array","number","number","array","array","number","number"])}},$G=TV(na);let EG;const _G={kernelName:aa,backendName:"wasm",setupFunc:function(e){EG=e.wasm.cwrap(aa,null,["number","number","number"])},kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a,alpha:r}=t,s=n.dataIdMap.get(a.dataId).id,i=n.dataIdMap.get(r.dataId).id;let o=s;const u=a;let l=u;"float32"!==u.dtype&&(l=ZV({backend:n,inputs:{x:a},attrs:{dtype:"float32"}}),o=n.dataIdMap.get(l.dataId).id);const c=n.makeOutput(a.shape,"float32"),h=n.dataIdMap.get(c.dataId).id;return EG(o,i,h),"float32"!==u.dtype&&n.disposeData(l.dataId),c}};let AG;const RG={kernelName:ra,backendName:"wasm",setupFunc:function(e){AG=e.wasm.cwrap(ra,null,["number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:s}=a,{x:i}=n,o=t.dataIdMap.get(i.dataId).id;let u=o,l=i;const{transposed:c,axes:h,originalAxes:p,inputWasTransposed:d}=OV(i,r,t);let f=h;if(d){const e=t.dataIdMap.get(c.dataId).id;e!==o&&(l=c,u=e,f=Ec(f.length,l.shape.length))}Tc("prod",f,l.shape.length);const[m,g]=Nc(l.shape,f),y=oe(g),b=t.makeOutput(m,l.dtype);if(0!==oe(l.shape)){const e=t.dataIdMap.get(b.dataId).id;AG(u,y,wV[b.dtype],e)}if(d&&t.disposeData(c.dataId),s){const e=Sc(b.shape,p);b.shape=e}return b}},FG={kernelName:oa,backendName:"wasm",kernelFunc:e=>{const{backend:t,attrs:n}=e,{start:a,stop:r,step:s,dtype:i}=n,o=DA(a,r,s,i),u=t.makeOutput([o.length],i);return t.typedArrayFromHeap(u).set(o),u}},DG=TV(jt),OG=NV(ca),MG=NV(ga);let LG;const zG={kernelName:fa,backendName:"wasm",setupFunc:function(e){LG=e.wasm.cwrap(fa,null,["number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{images:r}=n,{alignCorners:s,halfPixelCenters:i,size:o}=a,[u,l]=o,[c,h,p,d]=r.shape,f=[c,u,l,d];let m,g=t.dataIdMap.get(r.dataId);"float32"!==g.dtype&&(m=ZV({backend:t,inputs:{x:r},attrs:{dtype:"float32"}}),g=t.dataIdMap.get(m.dataId));const y=g.id,b=t.makeOutput(f,"float32");if(0===oe(r.shape))return b;const x=t.dataIdMap.get(b.dataId).id;return LG(y,c,h,p,d,u,l,s?1:0,i?1:0,x),null!=m&&t.disposeData(m.dataId),b}};let PG;const BG={kernelName:pa,backendName:"wasm",setupFunc:function(e){PG=e.wasm.cwrap(pa,null,["number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{images:r}=n,{alignCorners:s,halfPixelCenters:i,size:o}=a,[u,l]=o,[c,h,p,d]=r.shape,f=[c,u,l,d],m=t.makeOutput(f,"float32");if(0===oe(r.shape))return m;let g,y=t.dataIdMap.get(r.dataId);"float32"!==y.dtype&&(g=ZV({backend:t,inputs:{x:r},attrs:{dtype:"float32"}}),y=t.dataIdMap.get(g.dataId));const b=y.id,x=t.dataIdMap.get(m.dataId).id;return PG(b,c,h,p,d,u,l,s?1:0,i?1:0,x),null!=g&&t.disposeData(g.dataId),m}};let WG;const VG={kernelName:ya,backendName:"wasm",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dims:s}=a,i=ye(s,r.shape);if(0===r.shape.length)return _V({inputs:{x:r},backend:n});const o=n.makeOutput(r.shape,r.dtype),u=n.dataIdMap.get(r.dataId).id,l=n.dataIdMap.get(o.dataId).id,c=new Uint8Array(new Int32Array(i).buffer),h=new Uint8Array(new Int32Array(r.shape).buffer);WG(u,c,i.length,h,r.shape.length,l);const p=GV({inputs:{x:o},attrs:{shape:r.shape},backend:n});return n.disposeData(o.dataId),p},setupFunc:function(e){WG=e.wasm.cwrap(ya,null,["number","array","number","array","number","number"])}};let UG;const GG={kernelName:ir,backendName:"wasm",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{image:r}=t,{radians:s,fillValue:i,center:o}=a,u=n.makeOutput(r.shape,r.dtype),l=n.dataIdMap.get(r.dataId).id,c=n.dataIdMap.get(u.dataId).id,[h,p,d,f]=r.shape,[m,g]=bf(o,p,d),y="number"==typeof i?[i,i,i,0===i?0:255]:[...i,255],b=new Uint8Array(new Int32Array(y).buffer);return UG(l,h,p,d,f,s,m,g,b,y.length,c),u},setupFunc:function(e){UG=e.wasm.cwrap(ir,null,["number","number","number","number","number","number","number","number","array","number","number"])}},HG=NV(ba),jG=NV(xa);let qG;const KG={kernelName:wa,backendName:"wasm",setupFunc:function(e){qG=e.wasm.cwrap(wa,null,["number","number","number","number","number","number","array","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{indices:r,updates:s}=n,{shape:i}=a,o=t.makeOutput(i,s.dtype);if(0===oe(i))return o;const{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:p}=jo(0,r,i),d=t.dataIdMap.get(r.dataId).id,f=t.dataIdMap.get(s.dataId).id,m=new Uint8Array(new Int32Array(h).buffer),g=t.dataIdMap.get(o.dataId).id;return qG(d,f,wV[s.dtype],u,l,c,m,p,g),o}};let XG;const YG={kernelName:va,backendName:"wasm",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:a,t:r,e:s}=t,i=n.dataIdMap.get(a.dataId).id,o=n.dataIdMap.get(r.dataId).id,u=n.dataIdMap.get(s.dataId).id,l=n.makeOutput(r.shape,r.dtype),c=n.dataIdMap.get(l.dataId).id,h=a.shape.length,p=r.shape.length,d=0===h||h>1||1===p?1:oe(r.shape.slice(1));return XG(i,o,u,d,c),l},setupFunc:function(e){XG=e.wasm.cwrap("SelectV2",null,["number","number","number","number","number"])}};let ZG;const JG={kernelName:"Sigmoid",backendName:"wasm",setupFunc:function(e){ZG=e.wasm.cwrap($a,null,["number","number"])},kernelFunc:function(e){const{backend:t,inputs:{x:n}}=e,a=t.dataIdMap.get(n.dataId).id,r=t.makeOutput(n.shape,n.dtype),s=t.dataIdMap.get(r.dataId).id;return 0===oe(r.shape)||ZG(a,s),r}},QG=NV(Sa);let eH;const tH={kernelName:Da,backendName:"wasm",setupFunc:function(e){eH=e.wasm.cwrap(Da,null,["number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:{logits:n},attrs:{dim:a}}=e,r=t.dataIdMap.get(n.dataId).id,s=t.makeOutput(n.shape,n.dtype),i=t.dataIdMap.get(s.dataId).id,o=n.shape[a],u=oe(n.shape)/o;return 0===oe(s.shape)||eH(r,i,o,u),s}},nH={kernelName:Ra,backendName:"wasm",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:s,paddings:i}=a,o=oe(s),u=[[0,0]];u.push(...i);for(let e=1+s.length;e<r.shape.length;++e)u.push([0,0]);const l=CG.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:u,constantValue:0}}),c=xf(l.shape,s,o,!1),h=wf(c.length,s.length,!1),p=kf(l.shape,s,o,!1),d=GV({inputs:{x:l},backend:n,attrs:{shape:c}}),f=FV({inputs:{x:d},backend:n,attrs:{perm:h}}),m=GV({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeData(l.dataId),n.disposeData(d.dataId),n.disposeData(f.dataId),m}};let aH;const rH={kernelName:Oa,backendName:"wasm",setupFunc:function(e){aH=e.wasm.cwrap("SparseFillEmptyRows","number",["number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n}=e,{indices:a,values:r,denseShape:s,defaultValue:i}=n,o=a.shape[0],u=a.shape[1],l=t.readSync(s.dataId)[0],c=[o+l,u],h=t.dataIdMap.get(a.dataId).id,p=t.dataIdMap.get(r.dataId).id,d=t.dataIdMap.get(i.dataId).id,f=t.makeOutput(c,a.dtype),m=t.dataIdMap.get(f.dataId).id,g=t.makeOutput(c.slice(0,1),r.dtype),y=t.dataIdMap.get(g.dataId).id,b=t.makeOutput([l],"bool"),x=t.dataIdMap.get(b.dataId).id,w=t.makeOutput([o],a.dtype),k=t.dataIdMap.get(w.dataId).id,v=t.makeOutput([4],"int32"),I=t.dataIdMap.get(v.dataId).id,N=aH(h,p,wV[r.dtype],o,l,u,d,m,y,x,k,I),S=t.readSync(v.dataId);let T;switch(S[0]){case 1:T=Zf(S[1]);break;case 2:T=Jf(S[1],S[2]);break;case 3:T=Qf(S[1],S[2],S[3]);break;default:T=""}if(t.disposeData(v.dataId),T)throw t.disposeData(f.dataId),t.disposeData(g.dataId),t.disposeData(b.dataId),t.disposeData(w.dataId),new Error(T);let C=f,$=g;return N!==c[0]&&(C=KV({inputs:{x:f},attrs:{begin:0,size:[N,u]},backend:t}),$=KV({inputs:{x:g},attrs:{begin:0,size:N},backend:t}),t.disposeData(f.dataId),t.disposeData(g.dataId)),[C,$,b,w]}};let sH;const iH={kernelName:Ma,backendName:"wasm",setupFunc:function(e){sH=e.wasm.cwrap(Ma,null,["number","number","number","number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n}=e,{inputIndices:a,inputShape:r,newShape:s}=n;if(2!==a.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);const i=t.dataIdMap.get(a.dataId).id,o=t.dataIdMap.get(r.dataId).id,u=t.dataIdMap.get(s.dataId).id,l=a.shape[0],c=oe(s.shape),h=t.makeOutput([l,c],a.dtype),p=t.dataIdMap.get(h.dataId).id,d=t.makeOutput([c],s.dtype),f=t.dataIdMap.get(d.dataId).id,m=t.makeOutput([3],"int32"),g=t.dataIdMap.get(m.dataId).id;sH(i,o,u,l,p,f,g);const y=t.readSync(m.dataId);let b;switch(y[0]){case 0:b=em(y[1],y[2]);break;case 1:b=tm(y[1],y[2]);break;case 2:b="reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";break;case 3:b=am(Array.from(t.readSync(r.dataId)),Array.from(t.readSync(d.dataId)));break;case 4:b=rm(Array.from(t.readSync(r.dataId)),Array.from(t.readSync(d.dataId)));break;default:b=""}if(t.disposeData(m.dataId),b)throw t.disposeData(h.dataId),t.disposeData(d.dataId),new Error(b);return[h,d]}};let oH;function uH(e){oH=e.wasm.cwrap("SparseSegmentReduction",null,["number","number","number","number","number","number","number","number","number"])}function lH(e,t){const{backend:n,inputs:a}=e,{data:r,indices:s,segmentIds:i}=a,o=s.shape[0],u=n.readSync(i.dataId,o-1,o)[0],l=o>0?u+1:0;if(l<0)throw new Error("segment ids must be >= 0");const c=r.shape.slice();c[0]=l;const h=n.dataIdMap.get(r.dataId).id,p=n.dataIdMap.get(s.dataId).id,d=n.dataIdMap.get(i.dataId).id,f=n.makeOutput(c,r.dtype),m=n.dataIdMap.get(f.dataId).id,g=n.makeOutput([4],"int32"),y=n.dataIdMap.get(g.dataId).id;oH(h,wV[r.dtype],r.shape[0],p,d,m,y,t,0);const b=n.readSync(g.dataId);let x;switch(b[0]){case 0:x="segment ids must be >= 0";break;case 1:x="segment ids are not increasing";break;case 2:x=om(b[1],b[2]);break;case 3:x=um(b[1],b[2],b[3]);break;default:x=""}if(n.disposeData(g.dataId),x)throw n.disposeData(f.dataId),new Error(x);return f}const cH={kernelName:La,backendName:"wasm",setupFunc:uH,kernelFunc:function(e){return lH(e,!0)}},hH={kernelName:za,backendName:"wasm",setupFunc:uH,kernelFunc:function(e){return lH(e,!1)}},pH={kernelName:Fa,backendName:"wasm",kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{x:r}=t,{numOrSizeSplits:s,axis:i}=n,o=ye(i,r.shape)[0],u=Yf(r,s,o),l=new Array(r.shape.length).fill(0),c=r.shape.slice();return u.map((e=>{const t=[...c];t[o]=e;const n=KV({inputs:{x:r},attrs:{begin:l,size:t},backend:a});return l[o]+=e,n}))}},dH=NV(_a),fH=NV(Wa),mH=TV(Ba);let gH;const yH={kernelName:rr,backendName:"wasm",setupFunc:function(e){gH=e.wasm.cwrap(rr,null,["number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{alpha:r}=a,{x:s}=n,i=t.dataIdMap.get(s.dataId).id,o=t.makeOutput(s.shape,s.dtype),u=t.dataIdMap.get(o.dataId).id;return gH(i,r,wV[s.dtype],u),o}};let bH;const xH={kernelName:Va,backendName:"wasm",setupFunc:function(e){bH=e.wasm.cwrap(Va,null,["number","array","number","array","array","array","array","array","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{x:r}=n,{begin:s,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=a,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=cu(r.shape,s,i,o,u,l,c,h,p);let k;if(m)k=GV({inputs:{x:r},backend:t,attrs:{shape:f}});else if(g||y){ae(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=Zo(b,x,w),n=KV({inputs:{x:r},backend:t,attrs:{begin:b,size:e}});k=GV({inputs:{x:n},backend:t,attrs:{shape:f}}),t.disposeData(n.dataId)}else{const e=t.makeOutput(d,"float32"),n=t.dataIdMap.get(r.dataId).id,a=new Uint8Array(new Int32Array(Fe(r.shape)).buffer),s=new Uint8Array(new Int32Array(b).buffer),i=new Uint8Array(new Int32Array(x).buffer),o=new Uint8Array(new Int32Array(w).buffer),u=new Uint8Array(new Int32Array(d).buffer),l=new Uint8Array(new Int32Array(Fe(d)).buffer),c=t.dataIdMap.get(e.dataId).id;bH(n,a,r.shape.length,s,i,o,u,l,d.length,c),k=GV({inputs:{x:e},backend:t,attrs:{shape:f}}),t.disposeData(e.dataId)}return k}},wH={kernelName:Ua,backendName:"wasm",kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{data:r,dataSplits:s}=n,{separator:i,nGramWidths:o,leftPad:u,rightPad:l,padWidth:c,preserveShortSequences:h}=a,p=t.readSync(r.dataId),d=t.readSync(s.dataId),[f,m]=MR(p,d,i,o,u,l,c,h),g=t.makeOutput([f.length],"string");t.dataIdMap.get(g.dataId).stringBytes=f;const y=t.makeOutput(s.shape,"int32");return t.typedArrayFromHeap(y).set(m),[g,y]}},kH={kernelName:Ga,backendName:"wasm",kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{input:r,delimiter:s}=n,{skipEmpty:i}=a,o=t.readSync(r.dataId),u=t.readSync(s.dataId),[l,c,h]=PR(o,u[0],i),p=c.length,d=t.makeOutput([p,2],"int32");t.typedArrayFromHeap(d).set(l);const f=t.makeOutput([p],"string");t.dataIdMap.get(f.dataId).stringBytes=c;const m=t.makeOutput([2],"int32");return t.typedArrayFromHeap(m).set(h),[d,f,m]}},vH={kernelName:Ha,backendName:"wasm",kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{input:r}=n,{numBuckets:s}=a,i=WR(t.readSync(r.dataId),s),o=t.makeOutput(r.shape,"int32");return t.typedArrayFromHeap(o).set(i),o}},IH=TV(ja);let NH;const SH={kernelName:Aa,backendName:"wasm",setupFunc:function(e){NH=e.wasm.cwrap(Aa,null,["number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{axis:r,keepDims:s}=a,{x:i}=n,o=t.dataIdMap.get(i.dataId).id;let u=o,l=i;const{transposed:c,axes:h,originalAxes:p,inputWasTransposed:d}=OV(i,r,t);let f=h;if(d){const e=t.dataIdMap.get(c.dataId).id;e!==o&&(l=c,u=e,f=Ec(f.length,l.shape.length))}Tc("sum",f,l.shape.length);const[m,g]=Nc(l.shape,f),y=oe(g),b=t.makeOutput(m,l.dtype);if(0!==oe(l.shape)){const e=t.dataIdMap.get(b.dataId).id;NH(u,y,wV[b.dtype],e)}if(d&&t.disposeData(c.dataId),s){const e=Sc(b.shape,p);b.shape=e}return b}},TH=NV(qa),CH=NV(Ka);let $H;const EH={kernelName:Xa,backendName:"wasm",setupFunc:function(e){$H=e.wasm.cwrap(Xa,null,["number","array","number","array","number","number"])},kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,s=n.dataIdMap.get(r.dataId).id,{reps:i}=a,o=new Array(r.shape.length);for(let e=0;e<o.length;e++)o[e]=r.shape[e]*i[e];const u=new Uint8Array(new Int32Array(r.shape).buffer),l=new Uint8Array(new Int32Array(o).buffer),c=n.makeOutput(o,r.dtype),h=n.dataIdMap.get(c.dataId).id;return $H(s,u,r.shape.length,l,o.length,wV[c.dtype],h),c}};let _H;const AH={kernelName:Ya,backendName:"wasm",setupFunc:function(e){_H=e.wasm.cwrap(Ya,null,["number","array","number","number","number","bool","number","number"])},kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a}=e,{k:r,sorted:s}=n,i=t.dataIdMap.get(a.dataId).id,o=new Uint8Array(new Int32Array(a.shape).buffer),u=a.shape.slice();u[u.length-1]=r;const l=t.makeOutput(u,a.dtype),c=t.dataIdMap.get(l.dataId).id,h=t.makeOutput(u,"int32"),p=t.dataIdMap.get(h.dataId).id;return _H(i,o,a.shape.length,wV[a.dtype],r,s,c,p),[l,h]}};let RH;const FH={kernelName:Za,backendName:"wasm",setupFunc:function(e){RH=e.wasm.cwrap(Za,null,["number","number","bool","number","number","number","number","number","number","array","number","array","number","number","number","number","number"])},kernelFunc:function(e){const{backend:t,inputs:n,attrs:a}=e,{image:r,transforms:s}=n,{interpolation:i,fillMode:o,fillValue:u,outputShape:l}=a,[c,h,p,d]=r.shape,[f,m]=null!=l?l:[h,p],g=[c,f,m,d],y=new Uint8Array(new Int32Array(Fe(r.shape)).buffer),b=new Uint8Array(new Int32Array(Fe(g)).buffer),x=t.makeOutput(g,r.dtype),w=t.dataIdMap.get(x.dataId).id,k=t.dataIdMap.get(r.dataId).id,v=t.dataIdMap.get(s.dataId).id,I="nearest"===i?1:2;let N;switch(o){case"constant":default:N=1;break;case"reflect":N=2;break;case"wrap":N=3;break;case"nearest":N=4}return RH(k,v,s.shape[0]>1,c,f,m,d,p,h,y,r.shape.length-1,b,g.length-1,I,N,u,w),x}},DH={kernelName:er,backendName:"wasm",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{value:r}=t;let{axis:s}=a;s<0&&(s+=r.shape.length);const i=r.shape[s],o=r.shape.length,u=new Array(o-1);let l=0;for(let e=0;e<o;e++)e!==s&&(u[l++]=r.shape[e]);const c=new Array(i),h=new Array(o).fill(0),p=r.shape.slice();p[s]=1;for(let e=0;e<c.length;e++)h[s]=e,c[e]=KV({inputs:{x:r},attrs:{begin:h,size:p},backend:n});return c.map((({dataId:e,dtype:t})=>({dataId:e,dtype:t,shape:u})))}},OH={kernelName:ar,backendName:"wasm",kernelFunc:function(e){const{inputs:{x:t},backend:n}=e,a=n.makeOutput(t.shape,t.dtype);return n.typedArrayFromHeap(a).fill(0),a}},MH=[IV,SV,CV,EV,LV,PV,WV,UV,qV,YV,JV,QV,tU,aU,sU,oU,uU,lU,pU,fU,gU,bU,wU,kU,vU,IU,SU,CU,EU,_U,AU,FU,OU,LU,PU,WU,VU,UU,AV,HU,jU,qU,KU,XU,YU,ZU,JU,eG,tG,aG,sG,oG,uG,hG,pG,dG,gG,bG,wG,kG,IG,NG,SG,CG,$G,_G,RG,FG,DG,OG,MG,HV,zG,BG,VG,GG,HG,jG,KG,YG,JG,QG,XV,tH,nH,rH,iH,cH,hH,pH,dH,fH,mH,yH,xH,wH,kH,vH,IH,SH,TH,CH,EH,AH,FH,DV,DH,OH];for(const e of MH)yr(e);const LH=je();LH.registerFlag("WASM_HAS_SIMD_SUPPORT",(async()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]))}catch(e){return!1}})),LH.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT",(async()=>{if(LH.get("IS_NODE"))return!1;try{return(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch(e){return!1}}));var zH=n(417),PH=n.n(zH),BH=n(593),WH=n(186),VH=n.n(WH);const UH=PH()||zH,GH=VH()||WH;class HH extends q{constructor(e){super(),this.wasm=e,this.dataIdNextNumber=1,this.wasm.tfjs.initWithThreadsCount(JH),QH=this.wasm.tfjs.getThreadsCount(),this.dataIdMap=new j(this,po())}write(e,t,n){const a={id:this.dataIdNextNumber++};return this.move(a,e,t,n,1),a}numDataIds(){return this.dataIdMap.numDataIds()}async time(e){const t=Pr();return e(),{kernelMs:Pr()-t}}move(e,t,n,a,r){const s=this.dataIdNextNumber++;if("string"===a){const i=t;return void this.dataIdMap.set(e,{id:s,stringBytes:i,shape:n,dtype:a,memoryOffset:null,refCount:r})}const i=oe(n),o=i*Se(a),u=this.wasm._malloc(o);this.dataIdMap.set(e,{id:s,memoryOffset:u,shape:n,dtype:a,refCount:r}),this.wasm.tfjs.registerTensor(s,i,u),null!=t&&this.wasm.HEAPU8.set(new Uint8Array(t.buffer,t.byteOffset,o),u)}async read(e){return this.readSync(e)}readSync(e,t,n){const{memoryOffset:a,dtype:r,shape:s,stringBytes:i}=this.dataIdMap.get(e);if("string"===r)return null!=t&&0!==t||!(null==n||n>=i.length)?i.slice(t,n):i;t=t||0,n=n||oe(s);const o=Se(r);return function(e,t){switch(t){case"float32":return new Float32Array(e);case"int32":return new Int32Array(e);case"bool":return new Uint8Array(e);default:throw new Error(`Unknown dtype ${t}`)}}(this.wasm.HEAPU8.slice(a+t*o,a+n*o).buffer,r)}disposeData(e,t=!1){if(this.dataIdMap.has(e)){const n=this.dataIdMap.get(e);if(n.refCount--,!t&&n.refCount>0)return!1;this.wasm._free(n.memoryOffset),this.wasm.tfjs.disposeData(n.id),this.dataIdMap.delete(e)}return!0}refCount(e){return this.dataIdMap.has(e)?this.dataIdMap.get(e).refCount:0}incRef(e){const t=this.dataIdMap.get(e);null!=t&&t.refCount++}floatPrecision(){return 32}getMemoryOffset(e){return this.dataIdMap.get(e).memoryOffset}dispose(){this.wasm.tfjs.dispose(),"PThread"in this.wasm&&this.wasm.PThread.terminateAllThreads(),this.wasm=null}memory(){return{unreliable:!1}}makeOutput(e,t,n){let a;if(null==n)a=this.write(null,e,t);else{const r=this.dataIdNextNumber++;a={id:r},this.dataIdMap.set(a,{id:r,memoryOffset:n,shape:e,dtype:t,refCount:1});const s=oe(e);this.wasm.tfjs.registerTensor(r,s,n)}return{dataId:a,shape:e,dtype:t}}typedArrayFromHeap({shape:e,dtype:t,dataId:n}){const a=this.wasm.HEAPU8.buffer,{memoryOffset:r}=this.dataIdMap.get(n),s=oe(e);switch(t){case"float32":return new Float32Array(a,r,s);case"int32":return new Int32Array(a,r,s);case"bool":return new Uint8Array(a,r,s);default:throw new Error(`Unknown dtype ${t}`)}}}function jH(e,t,n){if(null!=qH)return qH;let a="tfjs-backend-wasm.wasm";return e&&t?a="tfjs-backend-wasm-threaded-simd.wasm":e&&(a="tfjs-backend-wasm-simd.wasm"),null!=XH&&null!=XH[a]?XH[a]:n+a}let qH=null,KH=null,XH={},YH=!1,ZH=!1,JH=-1,QH=null;function ej(e){return ej="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ej(e)}function tj(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,nj(a.key),a)}}function nj(e){var t=function(e){if("object"!=ej(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=ej(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==ej(t)?t:t+""}To("wasm",(async()=>{const{wasm:e}=await async function(){const[e,t]=await Promise.all([je().getAsync("WASM_HAS_SIMD_SUPPORT"),je().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]);return new Promise(((n,a)=>{const r={};var s;r.locateFile=(n,a)=>{if(n.endsWith(".worker.js")){const e=BH.$.replace(/\n/g,"\\n"),t=new Blob([e],{type:"application/javascript"});return URL.createObjectURL(t)}return n.endsWith(".wasm")?jH(e,t,null!=KH?KH:a):a+n},ZH&&(r.instantiateWasm=(s=jH(e,t,null!=KH?KH:""),(e,t)=>(Br(s,{credentials:"same-origin"}).then((n=>{n.ok||e.env.a(`failed to load wasm binary file at '${s}'`),n.arrayBuffer().then((n=>{WebAssembly.instantiate(n,e).then((e=>{t(e.instance,e.module)}))}))})),{})));let i,o=!1;r.onAbort=()=>{o||YH||(YH=!0,a({message:"Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers"}))},t&&e&&null==qH?(r.mainScriptUrlOrBlob=new Blob(["var WasmBackendModuleThreadedSimd = "+UH.toString()],{type:"text/javascript"}),i=UH(r)):i=GH(r),i.then((e=>{o=!0,YH=!1,e.tfjs={init:e.cwrap("init",null,[]),initWithThreadsCount:e.cwrap("init_with_threads_count",null,["number"]),getThreadsCount:e.cwrap("get_threads_count","number",[]),registerTensor:e.cwrap("register_tensor",null,["number","number","number"]),disposeData:e.cwrap("dispose_data",null,["number"]),dispose:e.cwrap("dispose",null,[])},n({wasm:e})})).catch(a)}))}();return new HH(e)}),2);var aj,rj,sj=function(){return e=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.l2=t&&t.l2?t.l2:.01},(t=[{key:"apply",value:function(e){var t=this;return go((function(){var n=Rc(Fu(e,e));return Fu(Gu(.5*t.l2),n)}))}},{key:"getConfig",value:function(){return{l2:this.l2}}}])&&tj(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();aj=sj,(rj=nj(rj="className"))in aj?Object.defineProperty(aj,rj,{value:"L2",enumerable:!0,configurable:!0,writable:!0}):aj[rj]="L2",fu(sj),console.log("TensorFlow.js version:",xV.tfjs),H.setWasmPaths&&H.setWasmPaths(chrome.runtime.getURL("")),window.tf=H,console.log("Custom TensorFlow.js bundle loaded"),document.dispatchEvent(new CustomEvent("tensorflowjs-ready"))})()})();